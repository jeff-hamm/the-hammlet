//------------------------------------------------------------------------------
// <auto-generated>
// Generated using NetDaemon CodeGenerator nd-codegen v1.0.0.0
//   At: 2025-02-03T15:53:28.3210057-08:00
//
// *** Make sure the version of the codegen tool and your nugets NetDaemon.* have the same version.***
// You can use following command to keep it up to date with the latest version:
//   dotnet tool update NetDaemon.HassModel.CodeGen
//
// To update this file with latest entities run this command in your project directory:
//   dotnet tool run nd-codegen
//
// In the template projects we provided a convenience powershell script that will update
// the codegen and nugets to latest versions update_all_dependencies.ps1.
//
// For more information: https://netdaemon.xyz/docs/user/hass_model/hass_model_codegen
// For more information about NetDaemon: https://netdaemon.xyz/
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using System.Text.Json;
using System.Text.Json.Serialization;
using NetDaemon.HassModel;
using NetDaemon.HassModel.Entities;
using NetDaemon.HassModel.Entities.Core;

namespace Hammlet.NetDaemon.Models;
public static class TodoEntityExtensionMethods
{
    ///<summary>Adds a new to-do list item.</summary>
    public static void AddItem(this TodoEntity target, TodoAddItemParameters data)
    {
        target.CallService("add_item", data);
    }

    ///<summary>Adds a new to-do list item.</summary>
    public static void AddItem(this IEnumerable<TodoEntity> target, TodoAddItemParameters data)
    {
        target.CallService("add_item", data);
    }

    ///<summary>Adds a new to-do list item.</summary>
    ///<param name="target">The TodoEntity to call this service for</param>
    ///<param name="item">The name that represents the to-do item. eg: Submit income tax return</param>
    ///<param name="dueDate">The date the to-do item is expected to be completed. eg: 2023-11-17</param>
    ///<param name="dueDatetime">The date and time the to-do item is expected to be completed. eg: 2023-11-17 13:30:00</param>
    ///<param name="description">A more complete description of the to-do item than provided by the item name. eg: A more complete description of the to-do item than that provided by the summary.</param>
    public static void AddItem(this TodoEntity target, string item, DateOnly? dueDate = null, DateTime? dueDatetime = null, string? description = null)
    {
        target.CallService("add_item", new TodoAddItemParameters { Item = item, DueDate = dueDate, DueDatetime = dueDatetime, Description = description });
    }

    ///<summary>Adds a new to-do list item.</summary>
    ///<param name="target">The IEnumerable&lt;TodoEntity&gt; to call this service for</param>
    ///<param name="item">The name that represents the to-do item. eg: Submit income tax return</param>
    ///<param name="dueDate">The date the to-do item is expected to be completed. eg: 2023-11-17</param>
    ///<param name="dueDatetime">The date and time the to-do item is expected to be completed. eg: 2023-11-17 13:30:00</param>
    ///<param name="description">A more complete description of the to-do item than provided by the item name. eg: A more complete description of the to-do item than that provided by the summary.</param>
    public static void AddItem(this IEnumerable<TodoEntity> target, string item, DateOnly? dueDate = null, DateTime? dueDatetime = null, string? description = null)
    {
        target.CallService("add_item", new TodoAddItemParameters { Item = item, DueDate = dueDate, DueDatetime = dueDatetime, Description = description });
    }

    ///<summary>Gets items on a to-do list.</summary>
    public static Task<JsonElement?> GetItemsAsync(this TodoEntity target, TodoGetItemsParameters data)
    {
        return target.CallServiceWithResponseAsync("get_items", data);
    }

    ///<summary>Gets items on a to-do list.</summary>
    ///<param name="target">The TodoEntity to call this service for</param>
    ///<param name="status">Only return to-do items with the specified statuses. Returns not completed actions by default. eg: needs_action</param>
    public static Task<JsonElement?> GetItemsAsync(this TodoEntity target, IEnumerable<object>? status = null)
    {
        return target.CallServiceWithResponseAsync("get_items", new TodoGetItemsParameters { Status = status });
    }

    ///<summary>Gets items on a to-do list.</summary>
    public static void GetItems(this TodoEntity target, TodoGetItemsParameters data)
    {
        target.CallService("get_items", data);
    }

    ///<summary>Gets items on a to-do list.</summary>
    public static void GetItems(this IEnumerable<TodoEntity> target, TodoGetItemsParameters data)
    {
        target.CallService("get_items", data);
    }

    ///<summary>Gets items on a to-do list.</summary>
    ///<param name="target">The TodoEntity to call this service for</param>
    ///<param name="status">Only return to-do items with the specified statuses. Returns not completed actions by default. eg: needs_action</param>
    public static void GetItems(this TodoEntity target, IEnumerable<object>? status = null)
    {
        target.CallService("get_items", new TodoGetItemsParameters { Status = status });
    }

    ///<summary>Gets items on a to-do list.</summary>
    ///<param name="target">The IEnumerable&lt;TodoEntity&gt; to call this service for</param>
    ///<param name="status">Only return to-do items with the specified statuses. Returns not completed actions by default. eg: needs_action</param>
    public static void GetItems(this IEnumerable<TodoEntity> target, IEnumerable<object>? status = null)
    {
        target.CallService("get_items", new TodoGetItemsParameters { Status = status });
    }

    ///<summary>Removes all to-do list items that have been completed.</summary>
    public static void RemoveCompletedItems(this TodoEntity target, object? data = null)
    {
        target.CallService("remove_completed_items", data);
    }

    ///<summary>Removes all to-do list items that have been completed.</summary>
    public static void RemoveCompletedItems(this IEnumerable<TodoEntity> target, object? data = null)
    {
        target.CallService("remove_completed_items", data);
    }

    ///<summary>Removes an existing to-do list item by its name.</summary>
    public static void RemoveItem(this TodoEntity target, TodoRemoveItemParameters data)
    {
        target.CallService("remove_item", data);
    }

    ///<summary>Removes an existing to-do list item by its name.</summary>
    public static void RemoveItem(this IEnumerable<TodoEntity> target, TodoRemoveItemParameters data)
    {
        target.CallService("remove_item", data);
    }

    ///<summary>Removes an existing to-do list item by its name.</summary>
    ///<param name="target">The TodoEntity to call this service for</param>
    ///<param name="item">The name for the to-do list item.</param>
    public static void RemoveItem(this TodoEntity target, string item)
    {
        target.CallService("remove_item", new TodoRemoveItemParameters { Item = item });
    }

    ///<summary>Removes an existing to-do list item by its name.</summary>
    ///<param name="target">The IEnumerable&lt;TodoEntity&gt; to call this service for</param>
    ///<param name="item">The name for the to-do list item.</param>
    public static void RemoveItem(this IEnumerable<TodoEntity> target, string item)
    {
        target.CallService("remove_item", new TodoRemoveItemParameters { Item = item });
    }

    ///<summary>Updates an existing to-do list item based on its name.</summary>
    public static void UpdateItem(this TodoEntity target, TodoUpdateItemParameters data)
    {
        target.CallService("update_item", data);
    }

    ///<summary>Updates an existing to-do list item based on its name.</summary>
    public static void UpdateItem(this IEnumerable<TodoEntity> target, TodoUpdateItemParameters data)
    {
        target.CallService("update_item", data);
    }

    ///<summary>Updates an existing to-do list item based on its name.</summary>
    ///<param name="target">The TodoEntity to call this service for</param>
    ///<param name="item">The current name of the to-do item. eg: Submit income tax return</param>
    ///<param name="rename">The new name for the to-do item eg: Something else</param>
    ///<param name="status">A status or confirmation of the to-do item. eg: needs_action</param>
    ///<param name="dueDate">The date the to-do item is expected to be completed. eg: 2023-11-17</param>
    ///<param name="dueDatetime">The date and time the to-do item is expected to be completed. eg: 2023-11-17 13:30:00</param>
    ///<param name="description">A more complete description of the to-do item than provided by the item name. eg: A more complete description of the to-do item than that provided by the summary.</param>
    public static void UpdateItem(this TodoEntity target, string item, string? rename = null, object? status = null, DateOnly? dueDate = null, DateTime? dueDatetime = null, string? description = null)
    {
        target.CallService("update_item", new TodoUpdateItemParameters { Item = item, Rename = rename, Status = status, DueDate = dueDate, DueDatetime = dueDatetime, Description = description });
    }

    ///<summary>Updates an existing to-do list item based on its name.</summary>
    ///<param name="target">The IEnumerable&lt;TodoEntity&gt; to call this service for</param>
    ///<param name="item">The current name of the to-do item. eg: Submit income tax return</param>
    ///<param name="rename">The new name for the to-do item eg: Something else</param>
    ///<param name="status">A status or confirmation of the to-do item. eg: needs_action</param>
    ///<param name="dueDate">The date the to-do item is expected to be completed. eg: 2023-11-17</param>
    ///<param name="dueDatetime">The date and time the to-do item is expected to be completed. eg: 2023-11-17 13:30:00</param>
    ///<param name="description">A more complete description of the to-do item than provided by the item name. eg: A more complete description of the to-do item than that provided by the summary.</param>
    public static void UpdateItem(this IEnumerable<TodoEntity> target, string item, string? rename = null, object? status = null, DateOnly? dueDate = null, DateTime? dueDatetime = null, string? description = null)
    {
        target.CallService("update_item", new TodoUpdateItemParameters { Item = item, Rename = rename, Status = status, DueDate = dueDate, DueDatetime = dueDatetime, Description = description });
    }
}