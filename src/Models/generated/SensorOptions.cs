//------------------------------------------------------------------------------
// <auto-generated>
// Generated using NetDaemon CodeGenerator nd-codegen v1.0.0.0
//   At: 2025-02-03T15:53:27.7672790-08:00
//
// *** Make sure the version of the codegen tool and your nugets NetDaemon.* have the same version.***
// You can use following command to keep it up to date with the latest version:
//   dotnet tool update NetDaemon.HassModel.CodeGen
//
// To update this file with latest entities run this command in your project directory:
//   dotnet tool run nd-codegen
//
// In the template projects we provided a convenience powershell script that will update
// the codegen and nugets to latest versions update_all_dependencies.ps1.
//
// For more information: https://netdaemon.xyz/docs/user/hass_model/hass_model_codegen
// For more information about NetDaemon: https://netdaemon.xyz/
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using System.Text.Json;
using System.Text.Json.Serialization;
using NetDaemon.HassModel;
using NetDaemon.HassModel.Entities;
using NetDaemon.HassModel.Entities.Core;

namespace Hammlet.NetDaemon.Models;
public enum SensorOptions
{
    [System.Text.Json.Serialization.JsonStringEnumMemberNameAttribute("ac"), System.Text.Json.Serialization.JsonConverter(typeof(SingleObjectAsArrayConverter<SensorOptions>))]
    Ac,
    [System.Text.Json.Serialization.JsonStringEnumMemberNameAttribute("charging"), System.Text.Json.Serialization.JsonConverter(typeof(SingleObjectAsArrayConverter<SensorOptions>))]
    Charging,
    [System.Text.Json.Serialization.JsonStringEnumMemberNameAttribute("discharging"), System.Text.Json.Serialization.JsonConverter(typeof(SingleObjectAsArrayConverter<SensorOptions>))]
    Discharging,
    [System.Text.Json.Serialization.JsonStringEnumMemberNameAttribute("dock"), System.Text.Json.Serialization.JsonConverter(typeof(SingleObjectAsArrayConverter<SensorOptions>))]
    Dock,
    [System.Text.Json.Serialization.JsonStringEnumMemberNameAttribute("full"), System.Text.Json.Serialization.JsonConverter(typeof(SingleObjectAsArrayConverter<SensorOptions>))]
    Full,
    [System.Text.Json.Serialization.JsonStringEnumMemberNameAttribute("idle"), System.Text.Json.Serialization.JsonConverter(typeof(SingleObjectAsArrayConverter<SensorOptions>))]
    Idle,
    [System.Text.Json.Serialization.JsonStringEnumMemberNameAttribute("none"), System.Text.Json.Serialization.JsonConverter(typeof(SingleObjectAsArrayConverter<SensorOptions>))]
    None,
    [System.Text.Json.Serialization.JsonStringEnumMemberNameAttribute("not_charging"), System.Text.Json.Serialization.JsonConverter(typeof(SingleObjectAsArrayConverter<SensorOptions>))]
    NotCharging,
    [System.Text.Json.Serialization.JsonStringEnumMemberNameAttribute("printing"), System.Text.Json.Serialization.JsonConverter(typeof(SingleObjectAsArrayConverter<SensorOptions>))]
    Printing,
    [System.Text.Json.Serialization.JsonStringEnumMemberNameAttribute("stopped"), System.Text.Json.Serialization.JsonConverter(typeof(SingleObjectAsArrayConverter<SensorOptions>))]
    Stopped,
    [System.Text.Json.Serialization.JsonStringEnumMemberNameAttribute("usb"), System.Text.Json.Serialization.JsonConverter(typeof(SingleObjectAsArrayConverter<SensorOptions>))]
    Usb,
    [System.Text.Json.Serialization.JsonStringEnumMemberNameAttribute("wireless"), System.Text.Json.Serialization.JsonConverter(typeof(SingleObjectAsArrayConverter<SensorOptions>))]
    Wireless
}