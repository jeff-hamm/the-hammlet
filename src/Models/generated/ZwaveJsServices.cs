//------------------------------------------------------------------------------
// <auto-generated>
// Generated using NetDaemon CodeGenerator nd-codegen v1.0.0.0
//   At: 2025-02-09T17:22:16.7817479-08:00
//
// *** Make sure the version of the codegen tool and your nugets NetDaemon.* have the same version.***
// You can use following command to keep it up to date with the latest version:
//   dotnet tool update NetDaemon.HassModel.CodeGen
//
// To update this file with latest entities run this command in your project directory:
//   dotnet tool run nd-codegen
//
// In the template projects we provided a convenience powershell script that will update
// the codegen and nugets to latest versions update_all_dependencies.ps1.
//
// For more information: https://netdaemon.xyz/docs/user/hass_model/hass_model_codegen
// For more information about NetDaemon: https://netdaemon.xyz/
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using System.Text.Json;
using System.Text.Json.Serialization;
using NetDaemon.HassModel;
using NetDaemon.HassModel.Entities;
using NetDaemon.HassModel.Entities.Core;

namespace Hammlet.NetDaemon.Models;
public partial class ZwaveJsServices
{
    private readonly IHaContext _haContext;
    public ZwaveJsServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Allows for bulk setting partial parameters. Useful when multiple partial parameters have to be set at the same time.</summary>
    public void BulkSetPartialConfigParameters(ZwaveJsBulkSetPartialConfigParametersParameters data)
    {
        _haContext.CallService("zwave_js", "bulk_set_partial_config_parameters", null, data);
    }

    ///<summary>Allows for bulk setting partial parameters. Useful when multiple partial parameters have to be set at the same time.</summary>
    ///<param name="areaId">The area(s) to target for this action. If an area is specified, all Z-Wave devices and entities in that area will be targeted for this action. eg: living_room</param>
    ///<param name="deviceId">The device(s) to target for this action. eg: 8f4219cfa57e23f6f669c4616c2205e2</param>
    ///<param name="entityId">The entity ID(s) to target for this action. eg: sensor.living_room_temperature</param>
    ///<param name="endpoint">The configuration parameter&apos;s endpoint. eg: 1</param>
    ///<param name="parameter">The name (or ID) of the configuration parameter you want to configure. eg: 9</param>
    ///<param name="value">The new value(s) to set for this configuration parameter. Can either be a raw integer value to represent the bulk change or a mapping where the key is the bitmask (either in hex or integer form) and the value is the new value you want to set for that partial parameter. eg: &quot;0x1&quot;: 1 &quot;0x10&quot;: 1 &quot;0x20&quot;: 1 &quot;0x40&quot;: 1 </param>
    public void BulkSetPartialConfigParameters(string parameter, object value, IEnumerable<string>? areaId = null, IEnumerable<string>? deviceId = null, IEnumerable<string>? entityId = null, string? endpoint = null)
    {
        _haContext.CallService("zwave_js", "bulk_set_partial_config_parameters", null, new ZwaveJsBulkSetPartialConfigParametersParameters { AreaId = areaId, DeviceId = deviceId, EntityId = entityId, Endpoint = endpoint, Parameter = parameter, Value = value });
    }

    ///<summary>Calls a Command Class API on a node. Some Command Classes can&apos;t be fully controlled via the `set_value` action and require direct calls to the Command Class API.</summary>
    public void InvokeCcApi(ZwaveJsInvokeCcApiParameters data)
    {
        _haContext.CallService("zwave_js", "invoke_cc_api", null, data);
    }

    ///<summary>Calls a Command Class API on a node. Some Command Classes can&apos;t be fully controlled via the `set_value` action and require direct calls to the Command Class API.</summary>
    ///<param name="areaId">The area(s) to target for this action. If an area is specified, all Z-Wave devices and entities in that area will be targeted for this action. eg: living_room</param>
    ///<param name="deviceId">The device(s) to target for this action. eg: 8f4219cfa57e23f6f669c4616c2205e2</param>
    ///<param name="entityId">The entity ID(s) to target for this action. eg: sensor.living_room_temperature</param>
    ///<param name="commandClass">The ID of the command class that you want to issue a command to. eg: 132</param>
    ///<param name="endpoint">The endpoint to call the API on. If an endpoint is specified, that endpoint will be targeted for all nodes associated with the target areas, devices, and/or entities. If an endpoint is not specified, the root endpoint (0) will be targeted for nodes associated with target areas and devices, and the endpoint for the primary value of each entity will be targeted. eg: 1</param>
    ///<param name="methodName">The name of the API method to call. Refer to the Z-Wave Command Class API documentation (https://zwave-js.github.io/node-zwave-js/#/api/CCs/index) for available methods. eg: setInterval</param>
    ///<param name="parameters">A list of parameters to pass to the API method. Refer to the Z-Wave Command Class API documentation (https://zwave-js.github.io/node-zwave-js/#/api/CCs/index) for parameters. eg: [1, 1]</param>
    public void InvokeCcApi(string commandClass, string methodName, object parameters, IEnumerable<string>? areaId = null, IEnumerable<string>? deviceId = null, IEnumerable<string>? entityId = null, string? endpoint = null)
    {
        _haContext.CallService("zwave_js", "invoke_cc_api", null, new ZwaveJsInvokeCcApiParameters { AreaId = areaId, DeviceId = deviceId, EntityId = entityId, CommandClass = commandClass, Endpoint = endpoint, MethodName = methodName, Parameters = parameters });
    }

    ///<summary>Changes any value that Z-Wave recognizes on multiple Z-Wave devices using multicast, so all devices receive the message simultaneously. This action has minimal validation so only use this action if you know what you are doing.</summary>
    public void MulticastSetValue(ZwaveJsMulticastSetValueParameters data)
    {
        _haContext.CallService("zwave_js", "multicast_set_value", null, data);
    }

    ///<summary>Changes any value that Z-Wave recognizes on multiple Z-Wave devices using multicast, so all devices receive the message simultaneously. This action has minimal validation so only use this action if you know what you are doing.</summary>
    ///<param name="areaId">The area(s) to target for this action. If an area is specified, all Z-Wave devices and entities in that area will be targeted for this action. eg: living_room</param>
    ///<param name="deviceId">The device(s) to target for this action. eg: 8f4219cfa57e23f6f669c4616c2205e2</param>
    ///<param name="entityId">The entity ID(s) to target for this action. eg: sensor.living_room_temperature</param>
    ///<param name="broadcast">Whether command should be broadcast to all devices on the network. eg: True</param>
    ///<param name="commandClass">The ID of the command class for the value. eg: 117</param>
    ///<param name="endpoint">The endpoint for the value. eg: 1</param>
    ///<param name="property">The ID of the property for the value. eg: currentValue</param>
    ///<param name="propertyKey">The ID of the property key for the value. eg: 1</param>
    ///<param name="options">Set value options map. Refer to the Z-Wave documentation for more information on what options can be set.</param>
    ///<param name="value">The new value to set. eg: ffbb99</param>
    public void MulticastSetValue(string commandClass, string @property, object value, IEnumerable<string>? areaId = null, IEnumerable<string>? deviceId = null, IEnumerable<string>? entityId = null, bool? broadcast = null, string? endpoint = null, string? propertyKey = null, object? options = null)
    {
        _haContext.CallService("zwave_js", "multicast_set_value", null, new ZwaveJsMulticastSetValueParameters { AreaId = areaId, DeviceId = deviceId, EntityId = entityId, Broadcast = broadcast, CommandClass = commandClass, Endpoint = endpoint, Property = @property, PropertyKey = propertyKey, Options = options, Value = value });
    }

    ///<summary>Forces Z-Wave to try to reach a node. This can be used to update the status of the node in Z-Wave when you think it doesn&apos;t accurately reflect reality, e.g. reviving a failed/dead node or marking the node as asleep.</summary>
    public void Ping(ZwaveJsPingParameters data)
    {
        _haContext.CallService("zwave_js", "ping", null, data);
    }

    ///<summary>Forces Z-Wave to try to reach a node. This can be used to update the status of the node in Z-Wave when you think it doesn&apos;t accurately reflect reality, e.g. reviving a failed/dead node or marking the node as asleep.</summary>
    ///<param name="areaId">The area(s) to target for this action. If an area is specified, all Z-Wave devices and entities in that area will be targeted for this action. eg: living_room</param>
    ///<param name="deviceId">The device(s) to target for this action. eg: 8f4219cfa57e23f6f669c4616c2205e2</param>
    ///<param name="entityId">The entity ID(s) to target for this action. eg: sensor.living_room_temperature</param>
    public void Ping(IEnumerable<string>? areaId = null, IEnumerable<string>? deviceId = null, IEnumerable<string>? entityId = null)
    {
        _haContext.CallService("zwave_js", "ping", null, new ZwaveJsPingParameters { AreaId = areaId, DeviceId = deviceId, EntityId = entityId });
    }

    ///<summary>Refreshes notifications on a node based on notification type and optionally notification event.</summary>
    public void RefreshNotifications(ZwaveJsRefreshNotificationsParameters data)
    {
        _haContext.CallService("zwave_js", "refresh_notifications", null, data);
    }

    ///<summary>Refreshes notifications on a node based on notification type and optionally notification event.</summary>
    ///<param name="areaId">The area(s) to target for this action. If an area is specified, all Z-Wave devices and entities in that area will be targeted for this action. eg: living_room</param>
    ///<param name="deviceId">The device(s) to target for this action. eg: 8f4219cfa57e23f6f669c4616c2205e2</param>
    ///<param name="entityId">The entity ID(s) to target for this action. eg: sensor.living_room_temperature</param>
    ///<param name="notificationType">The Notification Type number as defined in the Z-Wave specs. eg: 1</param>
    ///<param name="notificationEvent">The Notification Event number as defined in the Z-Wave specs. eg: 1</param>
    public void RefreshNotifications(double notificationType, IEnumerable<string>? areaId = null, IEnumerable<string>? deviceId = null, IEnumerable<string>? entityId = null, double? notificationEvent = null)
    {
        _haContext.CallService("zwave_js", "refresh_notifications", null, new ZwaveJsRefreshNotificationsParameters { AreaId = areaId, DeviceId = deviceId, EntityId = entityId, NotificationType = notificationType, NotificationEvent = notificationEvent });
    }

    ///<summary>Force updates the values of a Z-Wave entity.</summary>
    public void RefreshValue(ZwaveJsRefreshValueParameters data)
    {
        _haContext.CallService("zwave_js", "refresh_value", null, data);
    }

    ///<summary>Force updates the values of a Z-Wave entity.</summary>
    ///<param name="entityId">Entities to refresh. eg: - sensor.family_room_motion - switch.kitchen </param>
    ///<param name="refreshAllValues">Whether to refresh all values (true) or just the primary value (false).</param>
    public void RefreshValue(IEnumerable<string> entityId, bool? refreshAllValues = null)
    {
        _haContext.CallService("zwave_js", "refresh_value", null, new ZwaveJsRefreshValueParameters { EntityId = entityId, RefreshAllValues = refreshAllValues });
    }

    ///<summary>Resets the meters on a node.</summary>
    public void ResetMeter(ZwaveJsResetMeterParameters data)
    {
        _haContext.CallService("zwave_js", "reset_meter", null, data);
    }

    ///<summary>Resets the meters on a node.</summary>
    ///<param name="areaId">The area(s) to target for this action. If an area is specified, all Z-Wave devices and entities in that area will be targeted for this action. eg: living_room</param>
    ///<param name="deviceId">The device(s) to target for this action. eg: 8f4219cfa57e23f6f669c4616c2205e2</param>
    ///<param name="entityId">The entity ID(s) to target for this action. eg: sensor.living_room_temperature</param>
    ///<param name="meterType">The type of meter to reset. Not all meters support the ability to pick a meter type to reset. eg: 1</param>
    ///<param name="value">The value that meters should be reset to. Not all meters support the ability to be reset to a specific value. eg: 5</param>
    public void ResetMeter(IEnumerable<string>? areaId = null, IEnumerable<string>? deviceId = null, IEnumerable<string>? entityId = null, string? meterType = null, string? value = null)
    {
        _haContext.CallService("zwave_js", "reset_meter", null, new ZwaveJsResetMeterParameters { AreaId = areaId, DeviceId = deviceId, EntityId = entityId, MeterType = meterType, Value = value });
    }

    ///<summary>Changes the configuration parameters of your Z-Wave devices.</summary>
    public void SetConfigParameter(ZwaveJsSetConfigParameterParameters data)
    {
        _haContext.CallService("zwave_js", "set_config_parameter", null, data);
    }

    ///<summary>Changes the configuration parameters of your Z-Wave devices.</summary>
    ///<param name="areaId">The area(s) to target for this action. If an area is specified, all Z-Wave devices and entities in that area will be targeted for this action. eg: living_room</param>
    ///<param name="deviceId">The device(s) to target for this action. eg: 8f4219cfa57e23f6f669c4616c2205e2</param>
    ///<param name="entityId">The entity ID(s) to target for this action. eg: sensor.living_room_temperature</param>
    ///<param name="endpoint">The configuration parameter&apos;s endpoint. eg: 1</param>
    ///<param name="parameter">The name (or ID) of the configuration parameter you want to configure. eg: Minimum brightness level</param>
    ///<param name="bitmask">Target a specific bitmask (see the documentation for more information). Cannot be combined with &apos;Value size&apos; or &apos;Value format&apos;.</param>
    ///<param name="value">The new value to set for this configuration parameter. eg: 5</param>
    ///<param name="valueSize">Size of the value, either 1, 2, or 4. Used in combination with &apos;Value format&apos; when a config parameter is not defined in your device&apos;s configuration file. Cannot be combined with &apos;Bitmask&apos;. eg: 1</param>
    ///<param name="valueFormat">Format of the value, 0 for signed integer, 1 for unsigned integer, 2 for enumerated, 3 for bitfield. Used in combination with &apos;Value size&apos; when a config parameter is not defined in your device&apos;s configuration file. Cannot be combined with &apos;Bitmask&apos;. eg: 1</param>
    public void SetConfigParameter(string parameter, string value, IEnumerable<string>? areaId = null, IEnumerable<string>? deviceId = null, IEnumerable<string>? entityId = null, string? endpoint = null, string? bitmask = null, double? valueSize = null, double? valueFormat = null)
    {
        _haContext.CallService("zwave_js", "set_config_parameter", null, new ZwaveJsSetConfigParameterParameters { AreaId = areaId, DeviceId = deviceId, EntityId = entityId, Endpoint = endpoint, Parameter = parameter, Bitmask = bitmask, Value = value, ValueSize = valueSize, ValueFormat = valueFormat });
    }

    ///<summary>Changes any value that Z-Wave recognizes on a Z-Wave device. This action has minimal validation so only use this action if you know what you are doing.</summary>
    public void SetValue(ZwaveJsSetValueParameters data)
    {
        _haContext.CallService("zwave_js", "set_value", null, data);
    }

    ///<summary>Changes any value that Z-Wave recognizes on a Z-Wave device. This action has minimal validation so only use this action if you know what you are doing.</summary>
    ///<param name="areaId">The area(s) to target for this action. If an area is specified, all Z-Wave devices and entities in that area will be targeted for this action. eg: living_room</param>
    ///<param name="deviceId">The device(s) to target for this action. eg: 8f4219cfa57e23f6f669c4616c2205e2</param>
    ///<param name="entityId">The entity ID(s) to target for this action. eg: sensor.living_room_temperature</param>
    ///<param name="commandClass">The ID of the command class for the value. eg: 117</param>
    ///<param name="endpoint">The endpoint for the value. eg: 1</param>
    ///<param name="property">The ID of the property for the value. eg: currentValue</param>
    ///<param name="propertyKey">The ID of the property key for the value. eg: 1</param>
    ///<param name="value">The new value to set. eg: ffbb99</param>
    ///<param name="options">Set value options map. Refer to the Z-Wave documentation for more information on what options can be set.</param>
    ///<param name="waitForResult">Whether or not to wait for a response from the node. If not included in the payload, the integration will decide whether to wait or not. If set to `true`, note that the action can take a while if setting a value on an asleep battery device.</param>
    public void SetValue(string commandClass, string @property, object value, IEnumerable<string>? areaId = null, IEnumerable<string>? deviceId = null, IEnumerable<string>? entityId = null, string? endpoint = null, string? propertyKey = null, object? options = null, bool? waitForResult = null)
    {
        _haContext.CallService("zwave_js", "set_value", null, new ZwaveJsSetValueParameters { AreaId = areaId, DeviceId = deviceId, EntityId = entityId, CommandClass = commandClass, Endpoint = endpoint, Property = @property, PropertyKey = propertyKey, Value = value, Options = options, WaitForResult = waitForResult });
    }
}