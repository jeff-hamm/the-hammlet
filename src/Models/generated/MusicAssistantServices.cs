//------------------------------------------------------------------------------
// <auto-generated>
// Generated using NetDaemon CodeGenerator nd-codegen v1.0.0.0
//   At: 2025-02-09T17:22:16.4894547-08:00
//
// *** Make sure the version of the codegen tool and your nugets NetDaemon.* have the same version.***
// You can use following command to keep it up to date with the latest version:
//   dotnet tool update NetDaemon.HassModel.CodeGen
//
// To update this file with latest entities run this command in your project directory:
//   dotnet tool run nd-codegen
//
// In the template projects we provided a convenience powershell script that will update
// the codegen and nugets to latest versions update_all_dependencies.ps1.
//
// For more information: https://netdaemon.xyz/docs/user/hass_model/hass_model_codegen
// For more information about NetDaemon: https://netdaemon.xyz/
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using System.Text.Json;
using System.Text.Json.Serialization;
using NetDaemon.HassModel;
using NetDaemon.HassModel.Entities;
using NetDaemon.HassModel.Entities.Core;

namespace Hammlet.NetDaemon.Models;
public partial class MusicAssistantServices
{
    private readonly IHaContext _haContext;
    public MusicAssistantServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Get items from a Music Assistant library.</summary>
    public void GetLibrary(MusicAssistantGetLibraryParameters data)
    {
        _haContext.CallService("music_assistant", "get_library", null, data);
    }

    ///<summary>Get items from a Music Assistant library.</summary>
    ///<param name="configEntryId">Select the Music Assistant instance to perform the search on.</param>
    ///<param name="mediaType">The media type for which to request details for. eg: playlist</param>
    ///<param name="favorite">Filter items so only favorites items are returned. eg: true</param>
    ///<param name="search">Optional search string to search through this library. eg: We Are The Champions</param>
    ///<param name="limit">Maximum number of items to return. eg: 25</param>
    ///<param name="offset">Offset to start the list from. eg: 25</param>
    ///<param name="orderBy">Sort the list by this field. eg: random</param>
    ///<param name="albumType">Filter albums by type. eg: single</param>
    ///<param name="albumArtistsOnly">Only return Album Artists when listing the Artists library items. eg: true</param>
    public void GetLibrary(object configEntryId, object mediaType, bool? favorite = null, string? search = null, long? limit = null, long? offset = null, object? orderBy = null, IEnumerable<object>? albumType = null, bool? albumArtistsOnly = null)
    {
        _haContext.CallService("music_assistant", "get_library", null, new MusicAssistantGetLibraryParameters { ConfigEntryId = configEntryId, MediaType = mediaType, Favorite = favorite, Search = search, Limit = limit, Offset = offset, OrderBy = orderBy, AlbumType = albumType, AlbumArtistsOnly = albumArtistsOnly });
    }

    ///<summary>Get items from a Music Assistant library.</summary>
    public Task<JsonElement?> GetLibraryAsync(MusicAssistantGetLibraryParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("music_assistant", "get_library", null, data);
    }

    ///<summary>Get items from a Music Assistant library.</summary>
    ///<param name="configEntryId">Select the Music Assistant instance to perform the search on.</param>
    ///<param name="mediaType">The media type for which to request details for. eg: playlist</param>
    ///<param name="favorite">Filter items so only favorites items are returned. eg: true</param>
    ///<param name="search">Optional search string to search through this library. eg: We Are The Champions</param>
    ///<param name="limit">Maximum number of items to return. eg: 25</param>
    ///<param name="offset">Offset to start the list from. eg: 25</param>
    ///<param name="orderBy">Sort the list by this field. eg: random</param>
    ///<param name="albumType">Filter albums by type. eg: single</param>
    ///<param name="albumArtistsOnly">Only return Album Artists when listing the Artists library items. eg: true</param>
    public Task<JsonElement?> GetLibraryAsync(object configEntryId, object mediaType, bool? favorite = null, string? search = null, long? limit = null, long? offset = null, object? orderBy = null, IEnumerable<object>? albumType = null, bool? albumArtistsOnly = null)
    {
        return _haContext.CallServiceWithResponseAsync("music_assistant", "get_library", null, new MusicAssistantGetLibraryParameters { ConfigEntryId = configEntryId, MediaType = mediaType, Favorite = favorite, Search = search, Limit = limit, Offset = offset, OrderBy = orderBy, AlbumType = albumType, AlbumArtistsOnly = albumArtistsOnly });
    }

    ///<summary>Retrieves the details of the currently active queue of a Music Assistant player.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetQueue(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("music_assistant", "get_queue", target, data);
    }

    ///<summary>Retrieves the details of the currently active queue of a Music Assistant player.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> GetQueueAsync(ServiceTarget target, object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("music_assistant", "get_queue", target, data);
    }

    ///<summary>Plays an announcement on a Music Assistant player with more fine-grained control options.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayAnnouncement(ServiceTarget target, MusicAssistantPlayAnnouncementParameters data)
    {
        _haContext.CallService("music_assistant", "play_announcement", target, data);
    }

    ///<summary>Plays an announcement on a Music Assistant player with more fine-grained control options.</summary>
    ///<param name="url">URL to the notification sound. eg: http://someremotesite.com/doorbell.mp3</param>
    ///<param name="usePreAnnounce">Use pre-announcement sound for the announcement. Omit to use the player default. eg: true</param>
    ///<param name="announceVolume">Use a forced volume level for the announcement. Omit to use player default. eg: 75</param>
    public void PlayAnnouncement(ServiceTarget target, string url, bool? usePreAnnounce = null, long? announceVolume = null)
    {
        _haContext.CallService("music_assistant", "play_announcement", target, new MusicAssistantPlayAnnouncementParameters { Url = url, UsePreAnnounce = usePreAnnounce, AnnounceVolume = announceVolume });
    }

    ///<summary>Plays media on a Music Assistant player with more fine-grained control options.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayMedia(ServiceTarget target, MusicAssistantPlayMediaParameters data)
    {
        _haContext.CallService("music_assistant", "play_media", target, data);
    }

    ///<summary>Plays media on a Music Assistant player with more fine-grained control options.</summary>
    ///<param name="mediaId">URI or name of the item you want to play. Specify a list if you want to play/enqueue multiple items. eg: spotify://playlist/aabbccddeeff</param>
    ///<param name="mediaType">The type of the content to play. Such as artist, album, track or playlist. Will be auto-determined if omitted. eg: playlist</param>
    ///<param name="artist">When specifying a track or album by name in the Media ID field, you can optionally restrict results by this artist name. eg: Queen</param>
    ///<param name="album">When specifying a track by name in the Media ID field, you can optionally restrict results by this album name. eg: News of the world</param>
    ///<param name="enqueue">If the content should be played now or added to the queue.</param>
    ///<param name="radioMode">Enable radio mode to auto-generate a playlist based on the selection.</param>
    public void PlayMedia(ServiceTarget target, object mediaId, object? mediaType = null, string? artist = null, string? album = null, object? enqueue = null, bool? radioMode = null)
    {
        _haContext.CallService("music_assistant", "play_media", target, new MusicAssistantPlayMediaParameters { MediaId = mediaId, MediaType = mediaType, Artist = artist, Album = album, Enqueue = enqueue, RadioMode = radioMode });
    }

    ///<summary>Performs a global search on the Music Assistant library and all providers.</summary>
    public void Search(MusicAssistantSearchParameters data)
    {
        _haContext.CallService("music_assistant", "search", null, data);
    }

    ///<summary>Performs a global search on the Music Assistant library and all providers.</summary>
    ///<param name="configEntryId">Select the Music Assistant instance to perform the search on.</param>
    ///<param name="name">The name/title to search for. eg: We Are The Champions</param>
    ///<param name="mediaType">The type of the content to search. Such as artist, album, track, radio, or playlist. All types if omitted. eg: playlist</param>
    ///<param name="artist">When specifying a track or album name in the name field, you can optionally restrict results by this artist name. eg: Queen</param>
    ///<param name="album">When specifying a track name in the name field, you can optionally restrict results by this album name. eg: News of the world</param>
    ///<param name="limit">Maximum number of items to return (per media type). eg: 25</param>
    ///<param name="libraryOnly">Only include results that are in the library. eg: true</param>
    public void Search(object configEntryId, string name, IEnumerable<object>? mediaType = null, string? artist = null, string? album = null, long? limit = null, bool? libraryOnly = null)
    {
        _haContext.CallService("music_assistant", "search", null, new MusicAssistantSearchParameters { ConfigEntryId = configEntryId, Name = name, MediaType = mediaType, Artist = artist, Album = album, Limit = limit, LibraryOnly = libraryOnly });
    }

    ///<summary>Performs a global search on the Music Assistant library and all providers.</summary>
    public Task<JsonElement?> SearchAsync(MusicAssistantSearchParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("music_assistant", "search", null, data);
    }

    ///<summary>Performs a global search on the Music Assistant library and all providers.</summary>
    ///<param name="configEntryId">Select the Music Assistant instance to perform the search on.</param>
    ///<param name="name">The name/title to search for. eg: We Are The Champions</param>
    ///<param name="mediaType">The type of the content to search. Such as artist, album, track, radio, or playlist. All types if omitted. eg: playlist</param>
    ///<param name="artist">When specifying a track or album name in the name field, you can optionally restrict results by this artist name. eg: Queen</param>
    ///<param name="album">When specifying a track name in the name field, you can optionally restrict results by this album name. eg: News of the world</param>
    ///<param name="limit">Maximum number of items to return (per media type). eg: 25</param>
    ///<param name="libraryOnly">Only include results that are in the library. eg: true</param>
    public Task<JsonElement?> SearchAsync(object configEntryId, string name, IEnumerable<object>? mediaType = null, string? artist = null, string? album = null, long? limit = null, bool? libraryOnly = null)
    {
        return _haContext.CallServiceWithResponseAsync("music_assistant", "search", null, new MusicAssistantSearchParameters { ConfigEntryId = configEntryId, Name = name, MediaType = mediaType, Artist = artist, Album = album, Limit = limit, LibraryOnly = libraryOnly });
    }

    ///<summary>Transfers a player&apos;s queue to another player.</summary>
    ///<param name="target">The target for this service call</param>
    public void TransferQueue(ServiceTarget target, MusicAssistantTransferQueueParameters data)
    {
        _haContext.CallService("music_assistant", "transfer_queue", target, data);
    }

    ///<summary>Transfers a player&apos;s queue to another player.</summary>
    ///<param name="sourcePlayer">The source media player which has the queue you want to transfer. When omitted, the first playing player will be used.</param>
    ///<param name="autoPlay">Start playing the queue on the target player. Omit to use the default behavior. eg: true</param>
    public void TransferQueue(ServiceTarget target, string? sourcePlayer = null, bool? autoPlay = null)
    {
        _haContext.CallService("music_assistant", "transfer_queue", target, new MusicAssistantTransferQueueParameters { SourcePlayer = sourcePlayer, AutoPlay = autoPlay });
    }
}