//------------------------------------------------------------------------------
// <auto-generated>
// Generated using NetDaemon CodeGenerator nd-codegen v1.0.0.0
//   At: 2025-02-14T20:58:04.0021643-08:00
//
// *** Make sure the version of the codegen tool and your nugets NetDaemon.* have the same version.***
// You can use following command to keep it up to date with the latest version:
//   dotnet tool update NetDaemon.HassModel.CodeGen
//
// To update this file with latest entities run this command in your project directory:
//   dotnet tool run nd-codegen
//
// In the template projects we provided a convenience powershell script that will update
// the codegen and nugets to latest versions update_all_dependencies.ps1.
//
// For more information: https://netdaemon.xyz/docs/user/hass_model/hass_model_codegen
// For more information about NetDaemon: https://netdaemon.xyz/
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using System.Text.Json;
using System.Text.Json.Serialization;
using NetDaemon.HassModel;
using NetDaemon.HassModel.Entities;
using NetDaemon.HassModel.Entities.Core;

namespace Hammlet.NetDaemon.Models;
public partial class FluxLedServices
{
    private readonly IHaContext _haContext;
    public FluxLedServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets a custom light effect.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCustomEffect(ServiceTarget target, FluxLedSetCustomEffectParameters data)
    {
        _haContext.CallService("flux_led", "set_custom_effect", target, data);
    }

    ///<summary>Sets a custom light effect.</summary>
    ///<param name="colors">List of colors for the custom effect (RGB). (Max 16 Colors). eg: - [255,0,0] - [0,255,0] - [0,0,255] </param>
    ///<param name="speedPct">The speed of the effect in % (0-100, default 50). eg: 80</param>
    ///<param name="transition">Effect transition. eg: jump</param>
    public void SetCustomEffect(ServiceTarget target, object colors, long? speedPct = null, object? transition = null)
    {
        _haContext.CallService("flux_led", "set_custom_effect", target, new FluxLedSetCustomEffectParameters { Colors = colors, SpeedPct = speedPct, Transition = transition });
    }

    ///<summary>Configures music mode on Controller RGB with MIC (0x08), Addressable v2 (0xA2), and Addressable v3 (0xA3) devices that have a built-in microphone.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetMusicMode(ServiceTarget target, FluxLedSetMusicModeParameters data)
    {
        _haContext.CallService("flux_led", "set_music_mode", target, data);
    }

    ///<summary>Configures music mode on Controller RGB with MIC (0x08), Addressable v2 (0xA2), and Addressable v3 (0xA3) devices that have a built-in microphone.</summary>
    ///<param name="sensitivity">Microphone sensitivity (0-100). eg: 80</param>
    ///<param name="brightness">Light brightness (0-100). eg: 80</param>
    ///<param name="lightScreen">Light screen mode for 2 dimensional pixels (Addressable models only).</param>
    ///<param name="effect">Effect (1-16 on Addressable models, 0-3 on RGB with MIC models). eg: 1</param>
    ///<param name="foregroundColor">The foreground RGB color. eg: [255, 100, 100]</param>
    ///<param name="backgroundColor">The background RGB color (Addressable models only). eg: [255, 100, 100]</param>
    public void SetMusicMode(ServiceTarget target, long? sensitivity = null, long? brightness = null, bool? lightScreen = null, long? effect = null, IReadOnlyCollection<int>? foregroundColor = null, IReadOnlyCollection<int>? backgroundColor = null)
    {
        _haContext.CallService("flux_led", "set_music_mode", target, new FluxLedSetMusicModeParameters { Sensitivity = sensitivity, Brightness = brightness, LightScreen = lightScreen, Effect = effect, ForegroundColor = foregroundColor, BackgroundColor = backgroundColor });
    }

    ///<summary>Sets strip zones for Addressable v3 controllers (0xA3).</summary>
    ///<param name="target">The target for this service call</param>
    public void SetZones(ServiceTarget target, FluxLedSetZonesParameters data)
    {
        _haContext.CallService("flux_led", "set_zones", target, data);
    }

    ///<summary>Sets strip zones for Addressable v3 controllers (0xA3).</summary>
    ///<param name="colors">List of colors for each zone (RGB). The length of each zone is the number of pixels per segment divided by the number of colors. (Max 2048 Colors). eg: - [255,0,0] - [0,255,0] - [0,0,255] - [255,255,255] </param>
    ///<param name="speedPct">The speed of the effect in % (0-100, default 50). eg: 80</param>
    ///<param name="effect">Effect. eg: running_water</param>
    public void SetZones(ServiceTarget target, object colors, long? speedPct = null, object? effect = null)
    {
        _haContext.CallService("flux_led", "set_zones", target, new FluxLedSetZonesParameters { Colors = colors, SpeedPct = speedPct, Effect = effect });
    }
}