//------------------------------------------------------------------------------
// <auto-generated>
// Generated using NetDaemon CodeGenerator nd-codegen v24.52.0.0
//   At: 2025-01-17T19:32:34.0293361-08:00
//
// *** Make sure the version of the codegen tool and your nugets NetDaemon.* have the same version.***
// You can use following command to keep it up to date with the latest version:
//   dotnet tool update NetDaemon.HassModel.CodeGen
//
// To update this file with latest entities run this command in your project directory:
//   dotnet tool run nd-codegen
//
// In the template projects we provided a convenience powershell script that will update
// the codegen and nugets to latest versions update_all_dependencies.ps1.
//
// For more information: https://netdaemon.xyz/docs/user/hass_model/hass_model_codegen
// For more information about NetDaemon: https://netdaemon.xyz/
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using System.Text.Json;
using System.Text.Json.Serialization;
using NetDaemon.HassModel;
using NetDaemon.HassModel.Entities;
using NetDaemon.HassModel.Entities.Core;

namespace Hammlet.NetDaemon.Models;
public partial record ZhaToolkitZhaDevicesParameters
{
    ///<summary>Optional Entity name, device name, or IEEE address of the device to provide details for.  Defaults to all devices eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>Selected Fields eg: [&quot;ieee&quot;,&quot;lqi&quot;,&quot;name&quot;]</summary>
    [JsonPropertyName("command_data")]
    public string? CommandData { get; init; }

    ///<summary>Filename of CSV to write read data to.  Written to &apos;csv&apos; directory (can be relative as in example). eg: ../web/mycsv.csv</summary>
    [JsonPropertyName("csvout")]
    public string? Csvout { get; init; }

    ///<summary>Column to sort table by eg: lqi</summary>
    [JsonPropertyName("csvlabel")]
    public object? Csvlabel { get; init; }

    ///<summary>Event name in case of success eg: my_read_success_trigger_event</summary>
    [JsonPropertyName("event_success")]
    public string? EventSuccess { get; init; }

    ///<summary>Event name in case of failure eg: my_read_fail_trigger_event</summary>
    [JsonPropertyName("event_fail")]
    public string? EventFail { get; init; }

    ///<summary>Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</summary>
    [JsonPropertyName("event_done")]
    public string? EventDone { get; init; }

    ///<summary>Throw exception when success==False, useful to stop scripts, automations</summary>
    [JsonPropertyName("fail_exception")]
    public bool? FailException { get; init; }
}