//------------------------------------------------------------------------------
// <auto-generated>
// Generated using NetDaemon CodeGenerator nd-codegen v1.0.0.0
//   At: 2025-02-03T15:53:28.0185894-08:00
//
// *** Make sure the version of the codegen tool and your nugets NetDaemon.* have the same version.***
// You can use following command to keep it up to date with the latest version:
//   dotnet tool update NetDaemon.HassModel.CodeGen
//
// To update this file with latest entities run this command in your project directory:
//   dotnet tool run nd-codegen
//
// In the template projects we provided a convenience powershell script that will update
// the codegen and nugets to latest versions update_all_dependencies.ps1.
//
// For more information: https://netdaemon.xyz/docs/user/hass_model/hass_model_codegen
// For more information about NetDaemon: https://netdaemon.xyz/
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using System.Text.Json;
using System.Text.Json.Serialization;
using NetDaemon.HassModel;
using NetDaemon.HassModel.Entities;
using NetDaemon.HassModel.Entities.Core;

namespace Hammlet.NetDaemon.Models;
public partial class OpenplantbookServices
{
    private readonly IHaContext _haContext;
    public OpenplantbookServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clean up the cached entries from Openplantbook</summary>
    public void CleanCache(OpenplantbookCleanCacheParameters data)
    {
        _haContext.CallService("openplantbook", "clean_cache", null, data);
    }

    ///<summary>Clean up the cached entries from Openplantbook</summary>
    ///<param name="hours">Minimum age of entries to clean from the cache. Default to 24 hours if not set eg: 6</param>
    public void CleanCache(double? hours = null)
    {
        _haContext.CallService("openplantbook", "clean_cache", null, new OpenplantbookCleanCacheParameters { Hours = hours });
    }

    ///<summary>Fetches data for a single species</summary>
    public void Get(OpenplantbookGetParameters data)
    {
        _haContext.CallService("openplantbook", "get", null, data);
    }

    ///<summary>Fetches data for a single species</summary>
    ///<param name="species">The name of the species exactly as written in &quot;pid&quot; or &quot;scientific species&quot; in Openplantbook eg: coleus &apos;marble&apos;</param>
    public void Get(string species)
    {
        _haContext.CallService("openplantbook", "get", null, new OpenplantbookGetParameters { Species = species });
    }

    ///<summary>Fetches data for a single species</summary>
    public Task<JsonElement?> GetAsync(OpenplantbookGetParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("openplantbook", "get", null, data);
    }

    ///<summary>Fetches data for a single species</summary>
    ///<param name="species">The name of the species exactly as written in &quot;pid&quot; or &quot;scientific species&quot; in Openplantbook eg: coleus &apos;marble&apos;</param>
    public Task<JsonElement?> GetAsync(string species)
    {
        return _haContext.CallServiceWithResponseAsync("openplantbook", "get", null, new OpenplantbookGetParameters { Species = species });
    }

    ///<summary>Searches Openplantbook for a plant</summary>
    public void Search(OpenplantbookSearchParameters data)
    {
        _haContext.CallService("openplantbook", "search", null, data);
    }

    ///<summary>Searches Openplantbook for a plant</summary>
    ///<param name="alias">The string to search for eg: Capsicum</param>
    public void Search(string @alias)
    {
        _haContext.CallService("openplantbook", "search", null, new OpenplantbookSearchParameters { Alias = @alias });
    }

    ///<summary>Searches Openplantbook for a plant</summary>
    public Task<JsonElement?> SearchAsync(OpenplantbookSearchParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("openplantbook", "search", null, data);
    }

    ///<summary>Searches Openplantbook for a plant</summary>
    ///<param name="alias">The string to search for eg: Capsicum</param>
    public Task<JsonElement?> SearchAsync(string @alias)
    {
        return _haContext.CallServiceWithResponseAsync("openplantbook", "search", null, new OpenplantbookSearchParameters { Alias = @alias });
    }

    ///<summary>Upload sensors data of all plant instances</summary>
    public void Upload(object? data = null)
    {
        _haContext.CallService("openplantbook", "upload", null, data);
    }

    ///<summary>Upload sensors data of all plant instances</summary>
    public Task<JsonElement?> UploadAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("openplantbook", "upload", null, data);
    }
}