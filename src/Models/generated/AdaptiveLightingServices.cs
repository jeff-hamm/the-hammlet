//------------------------------------------------------------------------------
// <auto-generated>
// Generated using NetDaemon CodeGenerator nd-codegen v24.52.0.0
//   At: 2025-01-17T19:32:33.6569584-08:00
//
// *** Make sure the version of the codegen tool and your nugets NetDaemon.* have the same version.***
// You can use following command to keep it up to date with the latest version:
//   dotnet tool update NetDaemon.HassModel.CodeGen
//
// To update this file with latest entities run this command in your project directory:
//   dotnet tool run nd-codegen
//
// In the template projects we provided a convenience powershell script that will update
// the codegen and nugets to latest versions update_all_dependencies.ps1.
//
// For more information: https://netdaemon.xyz/docs/user/hass_model/hass_model_codegen
// For more information about NetDaemon: https://netdaemon.xyz/
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using System.Text.Json;
using System.Text.Json.Serialization;
using NetDaemon.HassModel;
using NetDaemon.HassModel.Entities;
using NetDaemon.HassModel.Entities.Core;

namespace Hammlet.NetDaemon.Models;
public partial class AdaptiveLightingServices
{
    private readonly IHaContext _haContext;
    public AdaptiveLightingServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Applies the current Adaptive Lighting settings to lights.</summary>
    public void Apply(AdaptiveLightingApplyParameters data)
    {
        _haContext.CallService("adaptive_lighting", "apply", null, data);
    }

    ///<summary>Applies the current Adaptive Lighting settings to lights.</summary>
    ///<param name="entityId">The `entity_id` of the switch with the settings to apply. 📝</param>
    ///<param name="lights">A light (or list of lights) to apply the settings to. 💡</param>
    ///<param name="transition">Duration of transition when lights change, in seconds. 🕑 eg: 10</param>
    ///<param name="adaptBrightness">Whether to adapt the brightness of the light. 🌞 eg: True</param>
    ///<param name="adaptColor">Whether to adapt the color on supporting lights. 🌈 eg: True</param>
    ///<param name="preferRgbColor">Whether to prefer RGB color adjustment over light color temperature when possible. 🌈 eg: False</param>
    ///<param name="turnOnLights">Whether to turn on lights that are currently off. 🔆 eg: False</param>
    public void Apply(string? entityId = null, IEnumerable<string>? lights = null, string? transition = null, bool? adaptBrightness = null, bool? adaptColor = null, bool? preferRgbColor = null, bool? turnOnLights = null)
    {
        _haContext.CallService("adaptive_lighting", "apply", null, new AdaptiveLightingApplyParameters { EntityId = entityId, Lights = lights, Transition = transition, AdaptBrightness = adaptBrightness, AdaptColor = adaptColor, PreferRgbColor = preferRgbColor, TurnOnLights = turnOnLights });
    }

    ///<summary>Change any settings you&apos;d like in the switch. All options here are the same as in the config flow.</summary>
    public void ChangeSwitchSettings(AdaptiveLightingChangeSwitchSettingsParameters data)
    {
        _haContext.CallService("adaptive_lighting", "change_switch_settings", null, data);
    }

    ///<summary>Change any settings you&apos;d like in the switch. All options here are the same as in the config flow.</summary>
    ///<param name="entityId">Entity ID of the switch. 📝</param>
    ///<param name="useDefaults">Sets the default values not specified in this service call. Options: &quot;current&quot; (default, retains current values), &quot;factory&quot; (resets to documented defaults), or &quot;configuration&quot; (reverts to switch config defaults). ⚙️ eg: current</param>
    ///<param name="includeConfigInAttributes">Show all options as attributes on the switch in Home Assistant when set to `true`. 📝</param>
    ///<param name="turnOnLights">Whether to turn on lights that are currently off. 🔆 eg: False</param>
    ///<param name="initialTransition">Duration of the first transition when lights turn from `off` to `on` in seconds. ⏲️ eg: 1</param>
    ///<param name="sleepTransition">Duration of transition when &quot;sleep mode&quot; is toggled in seconds. 😴 eg: 1</param>
    ///<param name="maxBrightness">Maximum brightness percentage. 💡 eg: 100</param>
    ///<param name="maxColorTemp">Coldest color temperature in Kelvin. ❄️ eg: 5500</param>
    ///<param name="minBrightness">Minimum brightness percentage. 💡 eg: 1</param>
    ///<param name="minColorTemp">Warmest color temperature in Kelvin. 🔥 eg: 2000</param>
    ///<param name="onlyOnce">Adapt lights only when they are turned on (`true`) or keep adapting them (`false`). 🔄 eg: False</param>
    ///<param name="preferRgbColor">Whether to prefer RGB color adjustment over light color temperature when possible. 🌈 eg: False</param>
    ///<param name="separateTurnOnCommands">Use separate `light.turn_on` calls for color and brightness, needed for some light types. 🔀 eg: False</param>
    ///<param name="sendSplitDelay">Delay (ms) between `separate_turn_on_commands` for lights that don&apos;t support simultaneous brightness and color setting. ⏲️ eg: 0</param>
    ///<param name="sleepBrightness">Brightness percentage of lights in sleep mode. 😴 eg: 1</param>
    ///<param name="sleepRgbOrColorTemp">Use either `&quot;rgb_color&quot;` or `&quot;color_temp&quot;` in sleep mode. 🌙 eg: color_temp</param>
    ///<param name="sleepRgbColor">RGB color in sleep mode (used when `sleep_rgb_or_color_temp` is &quot;rgb_color&quot;). 🌈</param>
    ///<param name="sleepColorTemp">Color temperature in sleep mode (used when `sleep_rgb_or_color_temp` is `color_temp`) in Kelvin. 😴 eg: 1000</param>
    ///<param name="sunriseOffset">Adjust sunrise time with a positive or negative offset in seconds. ⏰ eg: 0</param>
    ///<param name="sunriseTime">Set a fixed time (HH:MM:SS) for sunrise. 🌅</param>
    ///<param name="sunsetOffset">Adjust sunset time with a positive or negative offset in seconds. ⏰</param>
    ///<param name="sunsetTime">Set a fixed time (HH:MM:SS) for sunset. 🌇</param>
    ///<param name="maxSunriseTime">Set the latest virtual sunrise time (HH:MM:SS), allowing for earlier sunrises. 🌅</param>
    ///<param name="minSunsetTime">Set the earliest virtual sunset time (HH:MM:SS), allowing for later sunsets. 🌇</param>
    ///<param name="takeOverControl">Disable Adaptive Lighting if another source calls `light.turn_on` while lights are on and being adapted. Note that this calls `homeassistant.update_entity` every `interval`! 🔒 eg: True</param>
    ///<param name="detectNonHaChanges">Detects and halts adaptations for non-`light.turn_on` state changes. Needs `take_over_control` enabled. 🕵️ Caution: ⚠️ Some lights might falsely indicate an &apos;on&apos; state, which could result in lights turning on unexpectedly. Disable this feature if you encounter such issues. eg: False</param>
    ///<param name="transition">Duration of transition when lights change, in seconds. 🕑 eg: 45</param>
    ///<param name="adaptDelay">Wait time (seconds) between light turn on and Adaptive Lighting applying changes. Might help to avoid flickering. ⏲️ eg: 0</param>
    ///<param name="autoresetControlSeconds">Automatically reset the manual control after a number of seconds. Set to 0 to disable. ⏲️ eg: 0</param>
    public void ChangeSwitchSettings(string entityId, object? useDefaults = null, bool? includeConfigInAttributes = null, bool? turnOnLights = null, string? initialTransition = null, string? sleepTransition = null, string? maxBrightness = null, string? maxColorTemp = null, string? minBrightness = null, string? minColorTemp = null, bool? onlyOnce = null, bool? preferRgbColor = null, bool? separateTurnOnCommands = null, bool? sendSplitDelay = null, string? sleepBrightness = null, object? sleepRgbOrColorTemp = null, IReadOnlyCollection<int>? sleepRgbColor = null, string? sleepColorTemp = null, double? sunriseOffset = null, TimeOnly? sunriseTime = null, double? sunsetOffset = null, TimeOnly? sunsetTime = null, TimeOnly? maxSunriseTime = null, TimeOnly? minSunsetTime = null, bool? takeOverControl = null, bool? detectNonHaChanges = null, string? transition = null, string? adaptDelay = null, string? autoresetControlSeconds = null)
    {
        _haContext.CallService("adaptive_lighting", "change_switch_settings", null, new AdaptiveLightingChangeSwitchSettingsParameters { EntityId = entityId, UseDefaults = useDefaults, IncludeConfigInAttributes = includeConfigInAttributes, TurnOnLights = turnOnLights, InitialTransition = initialTransition, SleepTransition = sleepTransition, MaxBrightness = maxBrightness, MaxColorTemp = maxColorTemp, MinBrightness = minBrightness, MinColorTemp = minColorTemp, OnlyOnce = onlyOnce, PreferRgbColor = preferRgbColor, SeparateTurnOnCommands = separateTurnOnCommands, SendSplitDelay = sendSplitDelay, SleepBrightness = sleepBrightness, SleepRgbOrColorTemp = sleepRgbOrColorTemp, SleepRgbColor = sleepRgbColor, SleepColorTemp = sleepColorTemp, SunriseOffset = sunriseOffset, SunriseTime = sunriseTime, SunsetOffset = sunsetOffset, SunsetTime = sunsetTime, MaxSunriseTime = maxSunriseTime, MinSunsetTime = minSunsetTime, TakeOverControl = takeOverControl, DetectNonHaChanges = detectNonHaChanges, Transition = transition, AdaptDelay = adaptDelay, AutoresetControlSeconds = autoresetControlSeconds });
    }

    ///<summary>Mark whether a light is &apos;manually controlled&apos;.</summary>
    public void SetManualControl(AdaptiveLightingSetManualControlParameters data)
    {
        _haContext.CallService("adaptive_lighting", "set_manual_control", null, data);
    }

    ///<summary>Mark whether a light is &apos;manually controlled&apos;.</summary>
    ///<param name="entityId">The `entity_id` of the switch in which to (un)mark the light as being `manually controlled`. 📝</param>
    ///<param name="lights">entity_id(s) of lights, if not specified, all lights in the switch are selected. 💡</param>
    ///<param name="manualControl">Whether to add (&quot;true&quot;) or remove (&quot;false&quot;) the light from the &quot;manual_control&quot; list. 🔒 eg: True</param>
    public void SetManualControl(string? entityId = null, IEnumerable<string>? lights = null, bool? manualControl = null)
    {
        _haContext.CallService("adaptive_lighting", "set_manual_control", null, new AdaptiveLightingSetManualControlParameters { EntityId = entityId, Lights = lights, ManualControl = manualControl });
    }
}