//------------------------------------------------------------------------------
// <auto-generated>
// Generated using NetDaemon CodeGenerator nd-codegen v1.0.0.0
//   At: 2025-02-03T13:48:14.4074245-08:00
//
// *** Make sure the version of the codegen tool and your nugets NetDaemon.* have the same version.***
// You can use following command to keep it up to date with the latest version:
//   dotnet tool update NetDaemon.HassModel.CodeGen
//
// To update this file with latest entities run this command in your project directory:
//   dotnet tool run nd-codegen
//
// In the template projects we provided a convenience powershell script that will update
// the codegen and nugets to latest versions update_all_dependencies.ps1.
//
// For more information: https://netdaemon.xyz/docs/user/hass_model/hass_model_codegen
// For more information about NetDaemon: https://netdaemon.xyz/
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using System.Text.Json;
using System.Text.Json.Serialization;
using NetDaemon.HassModel;
using NetDaemon.HassModel.Entities;
using NetDaemon.HassModel.Entities.Core;

namespace Hammlet.NetDaemon.Models;
public partial record ZhaToolkitHaSetStateParameters
{
    ///<summary>value to write to the state (or use in the template)</summary>
    [JsonPropertyName("attr_val")]
    public string? AttrVal { get; init; }

    ///<summary>Number of times the zigbee packet should be attempted</summary>
    [JsonPropertyName("tries")]
    public double? Tries { get; init; }

    ///<summary>Name of state to write the read attribute value to eg: sensor.example</summary>
    [JsonPropertyName("state_id")]
    public string? StateId { get; init; }

    ///<summary>When defined, attribute in state_id to write the read attribute value to.  Write to state value when missing (and state_id is defined) eg: other_attr</summary>
    [JsonPropertyName("state_attr")]
    public string? StateAttr { get; init; }

    ///<summary>When defined, used as a template expression. For example &quot;value + 10&quot; will be internally interpreted as &quot;{{ value + 10 }}&quot; where &apos;value&apos; is substituted with the value for &apos;attr_val&apos; eg: value + 10</summary>
    [JsonPropertyName("state_value_template")]
    public string? StateValueTemplate { get; init; }

    ///<summary>Allow state creation (given by state_id) if it does not exist</summary>
    [JsonPropertyName("allow_create")]
    public bool? AllowCreate { get; init; }

    ///<summary>Event name in case of success eg: my_read_success_trigger_event</summary>
    [JsonPropertyName("event_success")]
    public string? EventSuccess { get; init; }

    ///<summary>Event name in case of failure eg: my_read_fail_trigger_event</summary>
    [JsonPropertyName("event_fail")]
    public string? EventFail { get; init; }

    ///<summary>Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</summary>
    [JsonPropertyName("event_done")]
    public string? EventDone { get; init; }

    ///<summary>Throw exception when success==False, useful to stop scripts, automations</summary>
    [JsonPropertyName("fail_exception")]
    public bool? FailException { get; init; }

    ///<summary>Filename of CSV to write the update state information to.  Written to &apos;csv&apos; directory. eg: ../web/mystatecsv.csv</summary>
    [JsonPropertyName("csvout")]
    public string? Csvout { get; init; }

    ///<summary>Label to designate value written (in CSV file) eg: Updated from zha_toolkit.ha_set_state</summary>
    [JsonPropertyName("csvlabel")]
    public string? Csvlabel { get; init; }
}