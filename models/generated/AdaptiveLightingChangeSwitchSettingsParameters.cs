//------------------------------------------------------------------------------
// <auto-generated>
// Generated using NetDaemon CodeGenerator nd-codegen v24.52.0.0
//   At: 2025-01-16T04:15:56.0250965-08:00
//
// *** Make sure the version of the codegen tool and your nugets NetDaemon.* have the same version.***
// You can use following command to keep it up to date with the latest version:
//   dotnet tool update NetDaemon.HassModel.CodeGen
//
// To update this file with latest entities run this command in your project directory:
//   dotnet tool run nd-codegen
//
// In the template projects we provided a convenience powershell script that will update
// the codegen and nugets to latest versions update_all_dependencies.ps1.
//
// For more information: https://netdaemon.xyz/docs/user/hass_model/hass_model_codegen
// For more information about NetDaemon: https://netdaemon.xyz/
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using System.Text.Json;
using System.Text.Json.Serialization;
using NetDaemon.HassModel;
using NetDaemon.HassModel.Entities;
using NetDaemon.HassModel.Entities.Core;

namespace Hammlet.NetDaemon.Models;
public partial record AdaptiveLightingChangeSwitchSettingsParameters
{
    ///<summary>Entity ID of the switch. 📝</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Sets the default values not specified in this service call. Options: &quot;current&quot; (default, retains current values), &quot;factory&quot; (resets to documented defaults), or &quot;configuration&quot; (reverts to switch config defaults). ⚙️ eg: current</summary>
    [JsonPropertyName("use_defaults")]
    public object? UseDefaults { get; init; }

    ///<summary>Show all options as attributes on the switch in Home Assistant when set to `true`. 📝</summary>
    [JsonPropertyName("include_config_in_attributes")]
    public bool? IncludeConfigInAttributes { get; init; }

    ///<summary>Whether to turn on lights that are currently off. 🔆 eg: False</summary>
    [JsonPropertyName("turn_on_lights")]
    public bool? TurnOnLights { get; init; }

    ///<summary>Duration of the first transition when lights turn from `off` to `on` in seconds. ⏲️ eg: 1</summary>
    [JsonPropertyName("initial_transition")]
    public string? InitialTransition { get; init; }

    ///<summary>Duration of transition when &quot;sleep mode&quot; is toggled in seconds. 😴 eg: 1</summary>
    [JsonPropertyName("sleep_transition")]
    public string? SleepTransition { get; init; }

    ///<summary>Maximum brightness percentage. 💡 eg: 100</summary>
    [JsonPropertyName("max_brightness")]
    public string? MaxBrightness { get; init; }

    ///<summary>Coldest color temperature in Kelvin. ❄️ eg: 5500</summary>
    [JsonPropertyName("max_color_temp")]
    public string? MaxColorTemp { get; init; }

    ///<summary>Minimum brightness percentage. 💡 eg: 1</summary>
    [JsonPropertyName("min_brightness")]
    public string? MinBrightness { get; init; }

    ///<summary>Warmest color temperature in Kelvin. 🔥 eg: 2000</summary>
    [JsonPropertyName("min_color_temp")]
    public string? MinColorTemp { get; init; }

    ///<summary>Adapt lights only when they are turned on (`true`) or keep adapting them (`false`). 🔄 eg: False</summary>
    [JsonPropertyName("only_once")]
    public bool? OnlyOnce { get; init; }

    ///<summary>Whether to prefer RGB color adjustment over light color temperature when possible. 🌈 eg: False</summary>
    [JsonPropertyName("prefer_rgb_color")]
    public bool? PreferRgbColor { get; init; }

    ///<summary>Use separate `light.turn_on` calls for color and brightness, needed for some light types. 🔀 eg: False</summary>
    [JsonPropertyName("separate_turn_on_commands")]
    public bool? SeparateTurnOnCommands { get; init; }

    ///<summary>Delay (ms) between `separate_turn_on_commands` for lights that don&apos;t support simultaneous brightness and color setting. ⏲️ eg: 0</summary>
    [JsonPropertyName("send_split_delay")]
    public bool? SendSplitDelay { get; init; }

    ///<summary>Brightness percentage of lights in sleep mode. 😴 eg: 1</summary>
    [JsonPropertyName("sleep_brightness")]
    public string? SleepBrightness { get; init; }

    ///<summary>Use either `&quot;rgb_color&quot;` or `&quot;color_temp&quot;` in sleep mode. 🌙 eg: color_temp</summary>
    [JsonPropertyName("sleep_rgb_or_color_temp")]
    public object? SleepRgbOrColorTemp { get; init; }

    ///<summary>RGB color in sleep mode (used when `sleep_rgb_or_color_temp` is &quot;rgb_color&quot;). 🌈</summary>
    [JsonPropertyName("sleep_rgb_color")]
    public IReadOnlyCollection<int>? SleepRgbColor { get; init; }

    ///<summary>Color temperature in sleep mode (used when `sleep_rgb_or_color_temp` is `color_temp`) in Kelvin. 😴 eg: 1000</summary>
    [JsonPropertyName("sleep_color_temp")]
    public string? SleepColorTemp { get; init; }

    ///<summary>Adjust sunrise time with a positive or negative offset in seconds. ⏰ eg: 0</summary>
    [JsonPropertyName("sunrise_offset")]
    public double? SunriseOffset { get; init; }

    ///<summary>Set a fixed time (HH:MM:SS) for sunrise. 🌅</summary>
    [JsonPropertyName("sunrise_time")]
    public TimeOnly? SunriseTime { get; init; }

    ///<summary>Adjust sunset time with a positive or negative offset in seconds. ⏰</summary>
    [JsonPropertyName("sunset_offset")]
    public double? SunsetOffset { get; init; }

    ///<summary>Set a fixed time (HH:MM:SS) for sunset. 🌇</summary>
    [JsonPropertyName("sunset_time")]
    public TimeOnly? SunsetTime { get; init; }

    ///<summary>Set the latest virtual sunrise time (HH:MM:SS), allowing for earlier sunrises. 🌅</summary>
    [JsonPropertyName("max_sunrise_time")]
    public TimeOnly? MaxSunriseTime { get; init; }

    ///<summary>Set the earliest virtual sunset time (HH:MM:SS), allowing for later sunsets. 🌇</summary>
    [JsonPropertyName("min_sunset_time")]
    public TimeOnly? MinSunsetTime { get; init; }

    ///<summary>Disable Adaptive Lighting if another source calls `light.turn_on` while lights are on and being adapted. Note that this calls `homeassistant.update_entity` every `interval`! 🔒 eg: True</summary>
    [JsonPropertyName("take_over_control")]
    public bool? TakeOverControl { get; init; }

    ///<summary>Detects and halts adaptations for non-`light.turn_on` state changes. Needs `take_over_control` enabled. 🕵️ Caution: ⚠️ Some lights might falsely indicate an &apos;on&apos; state, which could result in lights turning on unexpectedly. Disable this feature if you encounter such issues. eg: False</summary>
    [JsonPropertyName("detect_non_ha_changes")]
    public bool? DetectNonHaChanges { get; init; }

    ///<summary>Duration of transition when lights change, in seconds. 🕑 eg: 45</summary>
    [JsonPropertyName("transition")]
    public string? Transition { get; init; }

    ///<summary>Wait time (seconds) between light turn on and Adaptive Lighting applying changes. Might help to avoid flickering. ⏲️ eg: 0</summary>
    [JsonPropertyName("adapt_delay")]
    public string? AdaptDelay { get; init; }

    ///<summary>Automatically reset the manual control after a number of seconds. Set to 0 to disable. ⏲️ eg: 0</summary>
    [JsonPropertyName("autoreset_control_seconds")]
    public string? AutoresetControlSeconds { get; init; }
}