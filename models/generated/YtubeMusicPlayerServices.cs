//------------------------------------------------------------------------------
// <auto-generated>
// Generated using NetDaemon CodeGenerator nd-codegen v24.50.0.0
//   At: 2024-12-29T20:57:07.9865023-08:00
//
// *** Make sure the version of the codegen tool and your nugets NetDaemon.* have the same version.***
// You can use following command to keep it up to date with the latest version:
//   dotnet tool update NetDaemon.HassModel.CodeGen
//
// To update this file with latest entities run this command in your project directory:
//   dotnet tool run nd-codegen
//
// In the template projects we provided a convenience powershell script that will update
// the codegen and nugets to latest versions update_all_dependencies.ps1.
//
// For more information: https://netdaemon.xyz/docs/user/hass_model/hass_model_codegen
// For more information about NetDaemon: https://netdaemon.xyz/
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using System.Text.Json;
using System.Text.Json.Serialization;
using NetDaemon.HassModel;
using NetDaemon.HassModel.Entities;
using NetDaemon.HassModel.Entities.Core;

namespace Hammlet.NetDaemon.Models;
public partial class YtubeMusicPlayerServices
{
    private readonly IHaContext _haContext;
    public YtubeMusicPlayerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Adds a song to a playlist</summary>
    public void AddToPlaylist(YtubeMusicPlayerAddToPlaylistParameters data)
    {
        _haContext.CallService("ytube_music_player", "add_to_playlist", null, data);
    }

    ///<summary>Adds a song to a playlist</summary>
    ///<param name="entityId">Entity ID of the ytube media player eg: media_player.ytube_music_player</param>
    ///<param name="songId">The id of the song, optional. By default the current song id is used. Only provide an argument to override this behavior.</param>
    ///<param name="playlistId">The id of the playlist, optional. By default the current playlist is used. Only provide an argument to override this behavior.</param>
    public void AddToPlaylist(string entityId, string? songId = null, string? playlistId = null)
    {
        _haContext.CallService("ytube_music_player", "add_to_playlist", null, new YtubeMusicPlayerAddToPlaylistParameters { EntityId = entityId, SongId = songId, PlaylistId = playlistId });
    }

    ///<summary>Call a custom command.</summary>
    public void CallMethod(YtubeMusicPlayerCallMethodParameters data)
    {
        _haContext.CallService("ytube_music_player", "call_method", null, data);
    }

    ///<summary>Call a custom command.</summary>
    ///<param name="entityId">Name(s) of the yTube music player entity where to run the custom command. eg: media_player.ytube_music_player</param>
    ///<param name="command">Command to pass to LyTube music player. eg: rate_track</param>
    ///<param name="parameters">Array of additional parameters, optional and depends on command. eg: thumb_up</param>
    public void CallMethod(string entityId, string command, string parameters)
    {
        _haContext.CallService("ytube_music_player", "call_method", null, new YtubeMusicPlayerCallMethodParameters { EntityId = entityId, Command = command, Parameters = parameters });
    }

    ///<summary>Limits the count of loaded tracks</summary>
    public void LimitCount(YtubeMusicPlayerLimitCountParameters data)
    {
        _haContext.CallService("ytube_music_player", "limit_count", null, data);
    }

    ///<summary>Limits the count of loaded tracks</summary>
    ///<param name="entityId">Name(s) of the yTube music player entity where to run the custom command. eg: media_player.ytube_music_player</param>
    ///<param name="limit">The amount of tracks, loaded per call eg: 20</param>
    public void LimitCount(string entityId, double limit)
    {
        _haContext.CallService("ytube_music_player", "limit_count", null, new YtubeMusicPlayerLimitCountParameters { EntityId = entityId, Limit = limit });
    }

    ///<summary>Rates a song</summary>
    public void RateTrack(YtubeMusicPlayerRateTrackParameters data)
    {
        _haContext.CallService("ytube_music_player", "rate_track", null, data);
    }

    ///<summary>Rates a song</summary>
    ///<param name="entityId">Name(s) of the yTube music player entity where to run the custom command. eg: media_player.ytube_music_player</param>
    ///<param name="rating">The rating of the song, can be &apos;thumb_up&apos; / &apos;thumb_down&apos; / &apos;thumb_middle&apos; / &apos;thumb_toggle_up_middle&apos;. eg: thumb_up</param>
    ///<param name="songId">The id of the song, optional. By default the current song id is used. Only provide an argument to override this behavior.</param>
    public void RateTrack(string entityId, object rating, object? songId = null)
    {
        _haContext.CallService("ytube_music_player", "rate_track", null, new YtubeMusicPlayerRateTrackParameters { EntityId = entityId, Rating = rating, SongId = songId });
    }

    ///<summary>Removes a song from a playlist</summary>
    public void RemoveFromPlaylist(YtubeMusicPlayerRemoveFromPlaylistParameters data)
    {
        _haContext.CallService("ytube_music_player", "remove_from_playlist", null, data);
    }

    ///<summary>Removes a song from a playlist</summary>
    ///<param name="entityId">Entity ID of the ytube media player eg: media_player.ytube_music_player</param>
    ///<param name="songId">The id of the song, optional. By default the current song id is used. Only provide an argument to override this behavior.</param>
    ///<param name="playlistId">The id of the playlist, optional. By default the current playlist is used. Only provide an argument to override this behavior.</param>
    public void RemoveFromPlaylist(string entityId, object? songId = null, object? playlistId = null)
    {
        _haContext.CallService("ytube_music_player", "remove_from_playlist", null, new YtubeMusicPlayerRemoveFromPlaylistParameters { EntityId = entityId, SongId = songId, PlaylistId = playlistId });
    }

    ///<summary>Search for music / album / etc on Ytube YouTube Music Player</summary>
    public void Search(YtubeMusicPlayerSearchParameters data)
    {
        _haContext.CallService("ytube_music_player", "search", null, data);
    }

    ///<summary>Search for music / album / etc on Ytube YouTube Music Player</summary>
    ///<param name="entityId">Name(s) of the yTube music player entity where to run the custom command. eg: media_player.ytube_music_player</param>
    ///<param name="query">The search query eg: 2pm tetris</param>
    ///<param name="filter">filter for query, values can be &apos;albums&apos;, &apos;playlists&apos;,&apos;artists&apos; or &apos;songs&apos;. Leave this out to get all types.</param>
    ///<param name="limit">Limits the amount of resuls eg: 20</param>
    public void Search(string entityId, string query, string? filter = null, double? limit = null)
    {
        _haContext.CallService("ytube_music_player", "search", null, new YtubeMusicPlayerSearchParameters { EntityId = entityId, Query = query, Filter = filter, Limit = limit });
    }

    ///<summary>Creates a radio of the current track</summary>
    public void StartRadio(YtubeMusicPlayerStartRadioParameters data)
    {
        _haContext.CallService("ytube_music_player", "start_radio", null, data);
    }

    ///<summary>Creates a radio of the current track</summary>
    ///<param name="entityId">Name(s) of the yTube music player entity where to run the command. eg: media_player.ytube_music_player</param>
    ///<param name="interrupt">interrupt the current playback or not eg: true</param>
    public void StartRadio(string entityId, bool interrupt)
    {
        _haContext.CallService("ytube_music_player", "start_radio", null, new YtubeMusicPlayerStartRadioParameters { EntityId = entityId, Interrupt = interrupt });
    }
}