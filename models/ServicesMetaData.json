{
  "persistent_notification": {
    "create": {
      "name": "Create",
      "description": "Shows a notification on the notifications panel.",
      "fields": {
        "message": {
          "required": true,
          "example": "Please check your configuration.yaml.",
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "Message body of the notification."
        },
        "title": {
          "example": "Test notification",
          "selector": {
            "text": null
          },
          "name": "Title",
          "description": "Optional title of the notification."
        },
        "notification_id": {
          "example": 1234,
          "selector": {
            "text": null
          },
          "name": "Notification ID",
          "description": "ID of the notification. This new notification will overwrite an existing notification with the same ID."
        }
      }
    },
    "dismiss": {
      "name": "Dismiss",
      "description": "Deletes a notification from the notifications panel.",
      "fields": {
        "notification_id": {
          "required": true,
          "example": 1234,
          "selector": {
            "text": null
          },
          "name": "Notification ID",
          "description": "ID of the notification to be deleted."
        }
      }
    },
    "dismiss_all": {
      "name": "Dismiss all",
      "description": "Deletes all notifications from the notifications panel.",
      "fields": {}
    }
  },
  "homeassistant": {
    "save_persistent_states": {
      "name": "Save persistent states",
      "description": "Saves the persistent states immediately. Maintains the normal periodic saving interval.",
      "fields": {}
    },
    "turn_off": {
      "name": "Generic turn off",
      "description": "Generic action to turn devices off under any domain.",
      "fields": {},
      "target": {
        "entity": [
          {}
        ]
      }
    },
    "turn_on": {
      "name": "Generic turn on",
      "description": "Generic action to turn devices on under any domain.",
      "fields": {},
      "target": {
        "entity": [
          {}
        ]
      }
    },
    "toggle": {
      "name": "Generic toggle",
      "description": "Generic action to toggle devices on/off under any domain.",
      "fields": {},
      "target": {
        "entity": [
          {}
        ]
      }
    },
    "stop": {
      "name": "Stop",
      "description": "Stops Home Assistant.",
      "fields": {}
    },
    "restart": {
      "name": "Restart",
      "description": "Restarts Home Assistant.",
      "fields": {}
    },
    "check_config": {
      "name": "Check configuration",
      "description": "Checks the Home Assistant YAML-configuration files for errors. Errors will be shown in the Home Assistant logs.",
      "fields": {}
    },
    "update_entity": {
      "name": "Update entity",
      "description": "Forces one or more entities to update its data.",
      "fields": {
        "entity_id": {
          "required": true,
          "selector": {
            "entity": {
              "multiple": true
            }
          },
          "name": "Entities to update",
          "description": "List of entities to force update."
        }
      }
    },
    "reload_core_config": {
      "name": "Reload core configuration",
      "description": "Reloads the core configuration from the YAML-configuration.",
      "fields": {}
    },
    "set_location": {
      "name": "Set location",
      "description": "Updates the Home Assistant location.",
      "fields": {
        "latitude": {
          "required": true,
          "example": 32.87336,
          "selector": {
            "number": {
              "mode": "box",
              "min": -90,
              "max": 90,
              "step": "any"
            }
          },
          "name": "Latitude",
          "description": "Latitude of your location."
        },
        "longitude": {
          "required": true,
          "example": 117.22743,
          "selector": {
            "number": {
              "mode": "box",
              "min": -180,
              "max": 180,
              "step": "any"
            }
          },
          "name": "Longitude",
          "description": "Longitude of your location."
        },
        "elevation": {
          "required": false,
          "example": 120,
          "selector": {
            "number": {
              "mode": "box",
              "step": "any"
            }
          },
          "name": "Elevation",
          "description": "Elevation of your location above sea level."
        }
      }
    },
    "reload_custom_templates": {
      "name": "Reload custom Jinja2 templates",
      "description": "Reloads Jinja2 templates found in the \u0060custom_templates\u0060 folder in your config. New values will be applied on the next render of the template.",
      "fields": {}
    },
    "reload_config_entry": {
      "name": "Reload config entry",
      "description": "Reloads the specified config entry.",
      "fields": {
        "entry_id": {
          "advanced": true,
          "required": false,
          "example": "8955375327824e14ba89e4b29cc3ec9a",
          "selector": {
            "text": null
          },
          "name": "Config entry ID",
          "description": "The configuration entry ID of the entry to be reloaded."
        }
      },
      "target": {
        "entity": [
          {}
        ],
        "device": [
          {}
        ]
      }
    },
    "reload_all": {
      "name": "Reload all",
      "description": "Reload all YAML configuration that can be reloaded without restarting Home Assistant.",
      "fields": {}
    }
  },
  "system_log": {
    "clear": {
      "name": "Clear",
      "description": "Deletes all log entries.",
      "fields": {}
    },
    "write": {
      "name": "Write",
      "description": "Write log entry.",
      "fields": {
        "message": {
          "required": true,
          "example": "Something went wrong",
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "Message to log."
        },
        "level": {
          "default": "error",
          "selector": {
            "select": {
              "options": [
                "debug",
                "info",
                "warning",
                "error",
                "critical"
              ],
              "translation_key": "level"
            }
          },
          "name": "Level",
          "description": "Log level."
        },
        "logger": {
          "example": "mycomponent.myplatform",
          "selector": {
            "text": null
          },
          "name": "Logger",
          "description": "Logger name under which to log the message. Defaults to \u0060system_log.external\u0060."
        }
      }
    }
  },
  "logger": {
    "set_default_level": {
      "name": "Set default level",
      "description": "Sets the default log level for integrations.",
      "fields": {
        "level": {
          "selector": {
            "select": {
              "options": [
                "debug",
                "info",
                "warning",
                "error",
                "fatal",
                "critical"
              ],
              "translation_key": "level"
            }
          },
          "name": "Level",
          "description": "Default severity level for all integrations."
        }
      }
    },
    "set_level": {
      "name": "Set level",
      "description": "Sets the log level for one or more integrations.",
      "fields": {}
    }
  },
  "person": {
    "reload": {
      "name": "Reload",
      "description": "Reloads persons from the YAML-configuration.",
      "fields": {}
    }
  },
  "frontend": {
    "set_theme": {
      "name": "Set the default theme",
      "description": "Sets the default theme Home Assistant uses. Can be overridden by a user.",
      "fields": {
        "name": {
          "required": true,
          "example": "default",
          "selector": {
            "theme": {
              "include_default": true
            }
          },
          "name": "Theme",
          "description": "Name of a theme."
        },
        "mode": {
          "default": "light",
          "selector": {
            "select": {
              "options": [
                "dark",
                "light"
              ],
              "translation_key": "mode"
            }
          },
          "name": "Mode",
          "description": "Theme mode."
        }
      }
    },
    "reload_themes": {
      "name": "Reload themes",
      "description": "Reloads themes from the YAML-configuration.",
      "fields": {}
    }
  },
  "recorder": {
    "purge": {
      "name": "Purge",
      "description": "Starts purge task - to clean up old data from your database.",
      "fields": {
        "keep_days": {
          "selector": {
            "number": {
              "min": 0,
              "max": 365,
              "unit_of_measurement": "days"
            }
          },
          "name": "Days to keep",
          "description": "Number of days to keep the data in the database. Starting today, counting backward. A value of \u00607\u0060 means that everything older than a week will be purged."
        },
        "repack": {
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Repack",
          "description": "Attempt to save disk space by rewriting the entire database file."
        },
        "apply_filter": {
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Apply filter",
          "description": "Apply \u0060entity_id\u0060 and \u0060event_type\u0060 filters in addition to time-based purge."
        }
      }
    },
    "purge_entities": {
      "name": "Purge entities",
      "description": "Starts a purge task to remove the data related to specific entities from your database.",
      "fields": {
        "entity_id": {
          "required": false,
          "selector": {
            "entity": {
              "multiple": true
            }
          },
          "name": "Entities to remove",
          "description": "List of entities for which the data is to be removed from the recorder database."
        },
        "domains": {
          "example": "sun",
          "required": false,
          "selector": {
            "object": null
          },
          "name": "Domains to remove",
          "description": "List of domains for which the data needs to be removed from the recorder database."
        },
        "entity_globs": {
          "example": "domain*.object_id*",
          "required": false,
          "selector": {
            "object": null
          },
          "name": "Entity globs to remove",
          "description": "List of glob patterns used to select the entities for which the data is to be removed from the recorder database."
        },
        "keep_days": {
          "default": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 365,
              "unit_of_measurement": "days"
            }
          },
          "name": "Days to keep",
          "description": "Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of \u00607\u0060 means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately."
        }
      }
    },
    "enable": {
      "name": "Enable",
      "description": "Starts the recording of events and state changes.",
      "fields": {}
    },
    "disable": {
      "name": "Disable",
      "description": "Stops the recording of events and state changes.",
      "fields": {}
    }
  },
  "hassio": {
    "addon_start": {
      "name": "Start add-on",
      "description": "Starts an add-on.",
      "fields": {
        "addon": {
          "required": true,
          "example": "core_ssh",
          "selector": {
            "addon": null
          },
          "name": "Add-on",
          "description": "The add-on to start."
        }
      }
    },
    "addon_stop": {
      "name": "Stop add-on",
      "description": "Stops an add-on.",
      "fields": {
        "addon": {
          "required": true,
          "example": "core_ssh",
          "selector": {
            "addon": null
          },
          "name": "Add-on",
          "description": "The add-on to stop."
        }
      }
    },
    "addon_restart": {
      "name": "Restart add-on",
      "description": "Restarts an add-on.",
      "fields": {
        "addon": {
          "required": true,
          "example": "core_ssh",
          "selector": {
            "addon": null
          },
          "name": "Add-on",
          "description": "The add-on to restart."
        }
      }
    },
    "addon_update": {
      "name": "Update add-on",
      "description": "Updates an add-on. This action should be used with caution since add-on updates can contain breaking changes. It is highly recommended that you review release notes/change logs before updating an add-on.",
      "fields": {
        "addon": {
          "required": true,
          "example": "core_ssh",
          "selector": {
            "addon": null
          },
          "name": "Add-on",
          "description": "The add-on to update."
        }
      }
    },
    "addon_stdin": {
      "name": "Write data to add-on stdin",
      "description": "Writes data to the add-on\u0027s standard input.",
      "fields": {
        "addon": {
          "required": true,
          "example": "core_ssh",
          "selector": {
            "addon": null
          },
          "name": "Add-on",
          "description": "The add-on to write to."
        }
      }
    },
    "host_shutdown": {
      "name": "Power off the host system",
      "description": "Powers off the host system.",
      "fields": {}
    },
    "host_reboot": {
      "name": "Reboot the host system",
      "description": "Reboots the host system.",
      "fields": {}
    },
    "backup_full": {
      "name": "Create a full backup",
      "description": "Creates a full backup.",
      "fields": {
        "name": {
          "example": "Backup 1",
          "selector": {
            "text": null
          },
          "name": "Name",
          "description": "Optional (default = current date and time)."
        },
        "password": {
          "example": "password",
          "selector": {
            "text": null
          },
          "name": "Password",
          "description": "Password to protect the backup with."
        },
        "compressed": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Compressed",
          "description": "Compresses the backup files."
        },
        "location": {
          "example": "my_backup_mount",
          "selector": {
            "backup_location": null
          },
          "name": "Location",
          "description": "Name of a backup network storage to host backups."
        },
        "homeassistant_exclude_database": {
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Home Assistant exclude database",
          "description": "Exclude the Home Assistant database file from backup"
        }
      }
    },
    "backup_partial": {
      "name": "Create a partial backup",
      "description": "Creates a partial backup.",
      "fields": {
        "homeassistant": {
          "selector": {
            "boolean": null
          },
          "name": "Home Assistant settings",
          "description": "Includes Home Assistant settings in the backup."
        },
        "homeassistant_exclude_database": {
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Home Assistant exclude database",
          "description": "Exclude the Home Assistant database file from backup"
        },
        "addons": {
          "example": [
            "core_ssh",
            "core_samba",
            "core_mosquitto"
          ],
          "selector": {
            "object": null
          },
          "name": "Add-ons",
          "description": "List of add-ons to include in the backup. Use the name slug of the add-on."
        },
        "folders": {
          "example": [
            "homeassistant",
            "share"
          ],
          "selector": {
            "object": null
          },
          "name": "Folders",
          "description": "List of directories to include in the backup."
        },
        "name": {
          "example": "Partial backup 1",
          "selector": {
            "text": null
          },
          "name": "Name",
          "description": "Optional (default = current date and time)."
        },
        "password": {
          "example": "password",
          "selector": {
            "text": null
          },
          "name": "Password",
          "description": "Password to protect the backup with."
        },
        "compressed": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Compressed",
          "description": "Compresses the backup files."
        },
        "location": {
          "example": "my_backup_mount",
          "selector": {
            "backup_location": null
          },
          "name": "Location",
          "description": "Name of a backup network storage to host backups."
        }
      }
    },
    "restore_full": {
      "name": "Restore from full backup",
      "description": "Restores from full backup.",
      "fields": {
        "slug": {
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Slug",
          "description": "Slug of backup to restore from."
        },
        "password": {
          "example": "password",
          "selector": {
            "text": null
          },
          "name": "Password",
          "description": "Optional password."
        }
      }
    },
    "restore_partial": {
      "name": "Restore from partial backup",
      "description": "Restores from a partial backup.",
      "fields": {
        "slug": {
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Slug",
          "description": "Slug of backup to restore from."
        },
        "homeassistant": {
          "selector": {
            "boolean": null
          },
          "name": "Home Assistant settings",
          "description": "Restores Home Assistant."
        },
        "folders": {
          "example": [
            "homeassistant",
            "share"
          ],
          "selector": {
            "object": null
          },
          "name": "Folders",
          "description": "List of directories to include in the backup."
        },
        "addons": {
          "example": [
            "core_ssh",
            "core_samba",
            "core_mosquitto"
          ],
          "selector": {
            "object": null
          },
          "name": "Add-ons",
          "description": "List of add-ons to include in the backup. Use the name slug of the add-on."
        },
        "password": {
          "example": "password",
          "selector": {
            "text": null
          },
          "name": "Password",
          "description": "Optional password."
        }
      }
    }
  },
  "update": {
    "install": {
      "name": "Install update",
      "description": "Installs an update for this device or service.",
      "fields": {
        "version": {
          "required": false,
          "example": "1.0.0",
          "selector": {
            "text": null
          },
          "name": "Version",
          "description": "The version to install. If omitted, the latest version will be installed."
        },
        "backup": {
          "required": false,
          "selector": {
            "boolean": null
          },
          "name": "Backup",
          "description": "If supported by the integration, this creates a backup before starting the update ."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "update"
            ]
          }
        ]
      }
    },
    "skip": {
      "name": "Skip update",
      "description": "Marks currently available update as skipped.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "update"
            ]
          }
        ]
      }
    },
    "clear_skipped": {
      "name": "Clear skipped update",
      "description": "Removes the skipped version marker from an update.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "update"
            ]
          }
        ]
      }
    }
  },
  "cloud": {
    "remote_connect": {
      "name": "Enable remote access",
      "description": "Makes the instance UI accessible from outside of the local network by enabling your Home Assistant Cloud connection.",
      "fields": {}
    },
    "remote_disconnect": {
      "name": "Disable remote access",
      "description": "Disconnects the instance UI from Home Assistant Cloud. This disables access to it from outside your local network.",
      "fields": {}
    }
  },
  "ffmpeg": {
    "start": {
      "name": "Start",
      "description": "Sends a start command to a ffmpeg based sensor.",
      "fields": {
        "entity_id": {
          "selector": {
            "entity": {
              "integration": "ffmpeg",
              "domain": "binary_sensor"
            }
          },
          "name": "Entity",
          "description": "Name of entity that will start. Platform dependent."
        }
      }
    },
    "stop": {
      "name": "Stop",
      "description": "Sends a stop command to a ffmpeg based sensor.",
      "fields": {
        "entity_id": {
          "selector": {
            "entity": {
              "integration": "ffmpeg",
              "domain": "binary_sensor"
            }
          },
          "name": "Entity",
          "description": "Name of entity that will stop. Platform dependent."
        }
      }
    },
    "restart": {
      "name": "Restart",
      "description": "Sends a restart command to a ffmpeg based sensor.",
      "fields": {
        "entity_id": {
          "selector": {
            "entity": {
              "integration": "ffmpeg",
              "domain": "binary_sensor"
            }
          },
          "name": "Entity",
          "description": "Name of entity that will restart. Platform dependent."
        }
      }
    }
  },
  "tts": {
    "speak": {
      "name": "Speak",
      "description": "Speaks something using text-to-speech on a media player.",
      "fields": {
        "media_player_entity_id": {
          "required": true,
          "selector": {
            "entity": {
              "domain": "media_player"
            }
          },
          "name": "Media player entity",
          "description": "Media players to play the message."
        },
        "message": {
          "example": "My name is hanna",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "The text you want to convert into speech so that you can listen to it on your device."
        },
        "cache": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Cache",
          "description": "Stores this message locally so that when the text is requested again, the output can be produced more quickly."
        },
        "language": {
          "example": "ru",
          "selector": {
            "text": null
          },
          "name": "Language",
          "description": "Language to use for speech generation."
        },
        "options": {
          "advanced": true,
          "example": "platform specific",
          "selector": {
            "object": null
          },
          "name": "Options",
          "description": "A dictionary containing integration-specific options."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "tts"
            ]
          }
        ]
      }
    },
    "clear_cache": {
      "name": "Clear TTS cache",
      "description": "Removes all cached text-to-speech files and purges the memory.",
      "fields": {}
    },
    "cloud_say": {
      "name": "Say a TTS message with cloud",
      "description": "Say something using text-to-speech on a media player with cloud.",
      "fields": {
        "entity_id": {
          "required": true,
          "selector": {
            "entity": {
              "domain": "media_player"
            }
          }
        },
        "message": {
          "example": "My name is hanna",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "cache": {
          "default": false,
          "selector": {
            "boolean": null
          }
        },
        "language": {
          "example": "ru",
          "selector": {
            "text": null
          }
        },
        "options": {
          "advanced": true,
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    }
  },
  "camera": {
    "enable_motion_detection": {
      "name": "Enable motion detection",
      "description": "Enables the motion detection.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "disable_motion_detection": {
      "name": "Disable motion detection",
      "description": "Disables the motion detection.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns off the camera.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Turns on the camera.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "snapshot": {
      "name": "Take snapshot",
      "description": "Takes a snapshot from a camera.",
      "fields": {
        "filename": {
          "required": true,
          "example": "/tmp/snapshot_{{ entity_id.name }}.jpg",
          "selector": {
            "text": null
          },
          "name": "Filename",
          "description": "Full path to filename."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "play_stream": {
      "name": "Play stream",
      "description": "Plays the camera stream on a supported media player.",
      "fields": {
        "media_player": {
          "required": true,
          "selector": {
            "entity": {
              "domain": "media_player"
            }
          },
          "name": "Media player",
          "description": "Media players to stream to."
        },
        "format": {
          "default": "hls",
          "selector": {
            "select": {
              "options": [
                "hls"
              ]
            }
          },
          "name": "Format",
          "description": "Stream format supported by the media player."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "record": {
      "name": "Record",
      "description": "Creates a recording of a live camera feed.",
      "fields": {
        "filename": {
          "required": true,
          "example": "/tmp/snapshot_{{ entity_id.name }}.mp4",
          "selector": {
            "text": null
          },
          "name": "Filename",
          "description": "Full path to filename. Must be mp4."
        },
        "duration": {
          "default": 30,
          "selector": {
            "number": {
              "min": 1,
              "max": 3600,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Duration",
          "description": "Planned duration of the recording. The actual duration may vary."
        },
        "lookback": {
          "default": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Lookback",
          "description": "Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    }
  },
  "light": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turn on one or more lights and adjust properties of the light, even when they are turned on already.",
      "fields": {
        "transition": {
          "filter": {
            "supported_features": [
              32
            ]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Transition",
          "description": "Duration it takes to get to next state."
        },
        "rgb_color": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "example": "[255, 100, 100]",
          "selector": {
            "color_rgb": null
          },
          "name": "Color",
          "description": "The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue."
        },
        "kelvin": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "color_temp": {
              "unit": "kelvin",
              "min": 2000,
              "max": 6500
            }
          },
          "name": "Color temperature",
          "description": "Color temperature in Kelvin."
        },
        "brightness_pct": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "brightness",
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Brightness",
          "description": "Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness."
        },
        "brightness_step_pct": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "brightness",
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "number": {
              "min": -100,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Brightness step",
          "description": "Change brightness by a percentage."
        },
        "effect": {
          "filter": {
            "supported_features": [
              4
            ]
          },
          "selector": {
            "text": null
          },
          "name": "Effect",
          "description": "Light effect."
        },
        "advanced_fields": {
          "collapsed": true,
          "fields": {
            "rgbw_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[255, 100, 100, 50]",
              "selector": {
                "object": null
              }
            },
            "rgbww_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[255, 100, 100, 50, 70]",
              "selector": {
                "object": null
              }
            },
            "color_name": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "select": {
                  "translation_key": "color_name",
                  "options": [
                    "homeassistant",
                    "aliceblue",
                    "antiquewhite",
                    "aqua",
                    "aquamarine",
                    "azure",
                    "beige",
                    "bisque",
                    "blanchedalmond",
                    "blue",
                    "blueviolet",
                    "brown",
                    "burlywood",
                    "cadetblue",
                    "chartreuse",
                    "chocolate",
                    "coral",
                    "cornflowerblue",
                    "cornsilk",
                    "crimson",
                    "cyan",
                    "darkblue",
                    "darkcyan",
                    "darkgoldenrod",
                    "darkgray",
                    "darkgreen",
                    "darkgrey",
                    "darkkhaki",
                    "darkmagenta",
                    "darkolivegreen",
                    "darkorange",
                    "darkorchid",
                    "darkred",
                    "darksalmon",
                    "darkseagreen",
                    "darkslateblue",
                    "darkslategray",
                    "darkslategrey",
                    "darkturquoise",
                    "darkviolet",
                    "deeppink",
                    "deepskyblue",
                    "dimgray",
                    "dimgrey",
                    "dodgerblue",
                    "firebrick",
                    "floralwhite",
                    "forestgreen",
                    "fuchsia",
                    "gainsboro",
                    "ghostwhite",
                    "gold",
                    "goldenrod",
                    "gray",
                    "green",
                    "greenyellow",
                    "grey",
                    "honeydew",
                    "hotpink",
                    "indianred",
                    "indigo",
                    "ivory",
                    "khaki",
                    "lavender",
                    "lavenderblush",
                    "lawngreen",
                    "lemonchiffon",
                    "lightblue",
                    "lightcoral",
                    "lightcyan",
                    "lightgoldenrodyellow",
                    "lightgray",
                    "lightgreen",
                    "lightgrey",
                    "lightpink",
                    "lightsalmon",
                    "lightseagreen",
                    "lightskyblue",
                    "lightslategray",
                    "lightslategrey",
                    "lightsteelblue",
                    "lightyellow",
                    "lime",
                    "limegreen",
                    "linen",
                    "magenta",
                    "maroon",
                    "mediumaquamarine",
                    "mediumblue",
                    "mediumorchid",
                    "mediumpurple",
                    "mediumseagreen",
                    "mediumslateblue",
                    "mediumspringgreen",
                    "mediumturquoise",
                    "mediumvioletred",
                    "midnightblue",
                    "mintcream",
                    "mistyrose",
                    "moccasin",
                    "navajowhite",
                    "navy",
                    "navyblue",
                    "oldlace",
                    "olive",
                    "olivedrab",
                    "orange",
                    "orangered",
                    "orchid",
                    "palegoldenrod",
                    "palegreen",
                    "paleturquoise",
                    "palevioletred",
                    "papayawhip",
                    "peachpuff",
                    "peru",
                    "pink",
                    "plum",
                    "powderblue",
                    "purple",
                    "red",
                    "rosybrown",
                    "royalblue",
                    "saddlebrown",
                    "salmon",
                    "sandybrown",
                    "seagreen",
                    "seashell",
                    "sienna",
                    "silver",
                    "skyblue",
                    "slateblue",
                    "slategray",
                    "slategrey",
                    "snow",
                    "springgreen",
                    "steelblue",
                    "tan",
                    "teal",
                    "thistle",
                    "tomato",
                    "turquoise",
                    "violet",
                    "wheat",
                    "white",
                    "whitesmoke",
                    "yellow",
                    "yellowgreen"
                  ]
                }
              }
            },
            "hs_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[300, 70]",
              "selector": {
                "object": null
              }
            },
            "xy_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[0.52, 0.43]",
              "selector": {
                "object": null
              }
            },
            "color_temp": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "color_temp",
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "color_temp": {
                  "unit": "mired",
                  "min": 153,
                  "max": 500
                }
              }
            },
            "brightness": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "brightness",
                    "color_temp",
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "number": {
                  "min": 0,
                  "max": 255
                }
              }
            },
            "brightness_step": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "brightness",
                    "color_temp",
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "number": {
                  "min": -225,
                  "max": 255
                }
              }
            },
            "white": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "white"
                  ]
                }
              },
              "selector": {
                "constant": {
                  "value": true,
                  "label": "Enabled"
                }
              }
            },
            "profile": {
              "example": "relax",
              "selector": {
                "text": null
              }
            },
            "flash": {
              "filter": {
                "supported_features": [
                  8
                ]
              },
              "selector": {
                "select": {
                  "options": [
                    {
                      "label": "Long",
                      "value": "long"
                    },
                    {
                      "label": "Short",
                      "value": "short"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "light"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turn off one or more lights.",
      "fields": {
        "transition": {
          "filter": {
            "supported_features": [
              32
            ]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Transition",
          "description": "Duration it takes to get to next state."
        },
        "advanced_fields": {
          "collapsed": true,
          "fields": {
            "flash": {
              "filter": {
                "supported_features": [
                  8
                ]
              },
              "selector": {
                "select": {
                  "options": [
                    {
                      "label": "Long",
                      "value": "long"
                    },
                    {
                      "label": "Short",
                      "value": "short"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "light"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles one or more lights, from on to off, or, off to on, based on their current state.",
      "fields": {
        "transition": {
          "filter": {
            "supported_features": [
              32
            ]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Transition",
          "description": "Duration it takes to get to next state."
        },
        "rgb_color": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "example": "[255, 100, 100]",
          "selector": {
            "color_rgb": null
          },
          "name": "Color",
          "description": "The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue."
        },
        "kelvin": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "color_temp": {
              "unit": "kelvin",
              "min": 2000,
              "max": 6500
            }
          },
          "name": "Color temperature",
          "description": "Color temperature in Kelvin."
        },
        "brightness_pct": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "brightness",
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Brightness",
          "description": "Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness."
        },
        "effect": {
          "filter": {
            "supported_features": [
              4
            ]
          },
          "selector": {
            "text": null
          },
          "name": "Effect",
          "description": "Light effect."
        },
        "advanced_fields": {
          "collapsed": true,
          "fields": {
            "rgbw_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[255, 100, 100, 50]",
              "selector": {
                "object": null
              }
            },
            "rgbww_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[255, 100, 100, 50, 70]",
              "selector": {
                "object": null
              }
            },
            "color_name": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "select": {
                  "translation_key": "color_name",
                  "options": [
                    "homeassistant",
                    "aliceblue",
                    "antiquewhite",
                    "aqua",
                    "aquamarine",
                    "azure",
                    "beige",
                    "bisque",
                    "blanchedalmond",
                    "blue",
                    "blueviolet",
                    "brown",
                    "burlywood",
                    "cadetblue",
                    "chartreuse",
                    "chocolate",
                    "coral",
                    "cornflowerblue",
                    "cornsilk",
                    "crimson",
                    "cyan",
                    "darkblue",
                    "darkcyan",
                    "darkgoldenrod",
                    "darkgray",
                    "darkgreen",
                    "darkgrey",
                    "darkkhaki",
                    "darkmagenta",
                    "darkolivegreen",
                    "darkorange",
                    "darkorchid",
                    "darkred",
                    "darksalmon",
                    "darkseagreen",
                    "darkslateblue",
                    "darkslategray",
                    "darkslategrey",
                    "darkturquoise",
                    "darkviolet",
                    "deeppink",
                    "deepskyblue",
                    "dimgray",
                    "dimgrey",
                    "dodgerblue",
                    "firebrick",
                    "floralwhite",
                    "forestgreen",
                    "fuchsia",
                    "gainsboro",
                    "ghostwhite",
                    "gold",
                    "goldenrod",
                    "gray",
                    "green",
                    "greenyellow",
                    "grey",
                    "honeydew",
                    "hotpink",
                    "indianred",
                    "indigo",
                    "ivory",
                    "khaki",
                    "lavender",
                    "lavenderblush",
                    "lawngreen",
                    "lemonchiffon",
                    "lightblue",
                    "lightcoral",
                    "lightcyan",
                    "lightgoldenrodyellow",
                    "lightgray",
                    "lightgreen",
                    "lightgrey",
                    "lightpink",
                    "lightsalmon",
                    "lightseagreen",
                    "lightskyblue",
                    "lightslategray",
                    "lightslategrey",
                    "lightsteelblue",
                    "lightyellow",
                    "lime",
                    "limegreen",
                    "linen",
                    "magenta",
                    "maroon",
                    "mediumaquamarine",
                    "mediumblue",
                    "mediumorchid",
                    "mediumpurple",
                    "mediumseagreen",
                    "mediumslateblue",
                    "mediumspringgreen",
                    "mediumturquoise",
                    "mediumvioletred",
                    "midnightblue",
                    "mintcream",
                    "mistyrose",
                    "moccasin",
                    "navajowhite",
                    "navy",
                    "navyblue",
                    "oldlace",
                    "olive",
                    "olivedrab",
                    "orange",
                    "orangered",
                    "orchid",
                    "palegoldenrod",
                    "palegreen",
                    "paleturquoise",
                    "palevioletred",
                    "papayawhip",
                    "peachpuff",
                    "peru",
                    "pink",
                    "plum",
                    "powderblue",
                    "purple",
                    "red",
                    "rosybrown",
                    "royalblue",
                    "saddlebrown",
                    "salmon",
                    "sandybrown",
                    "seagreen",
                    "seashell",
                    "sienna",
                    "silver",
                    "skyblue",
                    "slateblue",
                    "slategray",
                    "slategrey",
                    "snow",
                    "springgreen",
                    "steelblue",
                    "tan",
                    "teal",
                    "thistle",
                    "tomato",
                    "turquoise",
                    "violet",
                    "wheat",
                    "white",
                    "whitesmoke",
                    "yellow",
                    "yellowgreen"
                  ]
                }
              }
            },
            "hs_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[300, 70]",
              "selector": {
                "object": null
              }
            },
            "xy_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[0.52, 0.43]",
              "selector": {
                "object": null
              }
            },
            "color_temp": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "color_temp",
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "color_temp": {
                  "unit": "mired",
                  "min": 153,
                  "max": 500
                }
              }
            },
            "brightness": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "brightness",
                    "color_temp",
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "number": {
                  "min": 0,
                  "max": 255
                }
              }
            },
            "white": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "white"
                  ]
                }
              },
              "selector": {
                "constant": {
                  "value": true,
                  "label": "Enabled"
                }
              }
            },
            "profile": {
              "example": "relax",
              "selector": {
                "text": null
              }
            },
            "flash": {
              "filter": {
                "supported_features": [
                  8
                ]
              },
              "selector": {
                "select": {
                  "options": [
                    {
                      "label": "Long",
                      "value": "long"
                    },
                    {
                      "label": "Short",
                      "value": "short"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "light"
            ]
          }
        ]
      }
    }
  },
  "scene": {
    "reload": {
      "name": "Reload",
      "description": "Reloads the scenes from the YAML-configuration.",
      "fields": {}
    },
    "apply": {
      "name": "Apply",
      "description": "Activates a scene with configuration.",
      "fields": {
        "entities": {
          "required": true,
          "example": "light.kitchen: \u0022on\u0022\nlight.ceiling:\n  state: \u0022on\u0022\n  brightness: 80\n",
          "selector": {
            "object": null
          },
          "name": "Entities state",
          "description": "List of entities and their target state."
        },
        "transition": {
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Transition",
          "description": "Time it takes the devices to transition into the states defined in the scene."
        }
      }
    },
    "create": {
      "name": "Create",
      "description": "Creates a new scene.",
      "fields": {
        "scene_id": {
          "required": true,
          "example": "all_lights",
          "selector": {
            "text": null
          },
          "name": "Scene entity ID",
          "description": "The entity ID of the new scene."
        },
        "entities": {
          "advanced": true,
          "example": "light.tv_back_light: \u0022on\u0022\nlight.ceiling:\n  state: \u0022on\u0022\n  brightness: 200\n",
          "selector": {
            "object": null
          },
          "name": "Entities state",
          "description": "List of entities and their target state. If your entities are already in the target state right now, use \u0060snapshot_entities\u0060 instead."
        },
        "snapshot_entities": {
          "example": "- light.ceiling\n- light.kitchen\n",
          "selector": {
            "entity": {
              "multiple": true
            }
          },
          "name": "Snapshot entities",
          "description": "List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine the \u0060snapshot_entities\u0060 with \u0060entities\u0060."
        }
      }
    },
    "delete": {
      "name": "Delete",
      "description": "Deletes a dynamically created scene.",
      "fields": {},
      "target": {
        "entity": [
          {
            "integration": "homeassistant",
            "domain": [
              "scene"
            ]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Activate",
      "description": "Activates a scene.",
      "fields": {
        "transition": {
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Transition",
          "description": "Time it takes the devices to transition into the states defined in the scene."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "scene"
            ]
          }
        ]
      }
    }
  },
  "logbook": {
    "log": {
      "name": "Log",
      "description": "Creates a custom entry in the logbook.",
      "fields": {
        "name": {
          "required": true,
          "example": "Kitchen",
          "selector": {
            "text": null
          },
          "name": "Name",
          "description": "Custom name for an entity, can be referenced using an \u0060entity_id\u0060."
        },
        "message": {
          "required": true,
          "example": "is being used",
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "Message of the logbook entry."
        },
        "entity_id": {
          "selector": {
            "entity": null
          },
          "name": "Entity ID",
          "description": "Entity to reference in the logbook entry."
        },
        "domain": {
          "example": "light",
          "selector": {
            "text": null
          },
          "name": "Domain",
          "description": "Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry."
        }
      }
    }
  },
  "group": {
    "reload": {
      "name": "Reload",
      "description": "Reloads group configuration, entities, and notify services from YAML-configuration.",
      "fields": {}
    },
    "set": {
      "name": "Set",
      "description": "Creates/Updates a user group.",
      "fields": {
        "object_id": {
          "required": true,
          "example": "test_group",
          "selector": {
            "text": null
          },
          "name": "Object ID",
          "description": "Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]."
        },
        "name": {
          "example": "My test group",
          "selector": {
            "text": null
          },
          "name": "Name",
          "description": "Name of the group."
        },
        "icon": {
          "example": "mdi:camera",
          "selector": {
            "icon": null
          },
          "name": "Icon",
          "description": "Name of the icon for the group."
        },
        "entities": {
          "example": "domain.entity_id1, domain.entity_id2",
          "selector": {
            "entity": {
              "multiple": true
            }
          },
          "name": "Entities",
          "description": "List of all members in the group. Cannot be used in combination with \u0060Add entities\u0060 or \u0060Remove entities\u0060."
        },
        "add_entities": {
          "example": "domain.entity_id1, domain.entity_id2",
          "selector": {
            "entity": {
              "multiple": true
            }
          },
          "name": "Add entities",
          "description": "List of members to be added to the group. Cannot be used in combination with \u0060Entities\u0060 or \u0060Remove entities\u0060."
        },
        "remove_entities": {
          "example": "domain.entity_id1, domain.entity_id2",
          "selector": {
            "entity": {
              "multiple": true
            }
          },
          "name": "Remove entities",
          "description": "List of members to be removed from a group. Cannot be used in combination with \u0060Entities\u0060 or \u0060Add entities\u0060."
        },
        "all": {
          "selector": {
            "boolean": null
          },
          "name": "All",
          "description": "Enable this option if the group should only be used when all entities are in state \u0060on\u0060."
        }
      }
    },
    "remove": {
      "name": "Remove",
      "description": "Removes a group.",
      "fields": {
        "object_id": {
          "required": true,
          "example": "test_group",
          "selector": {
            "object": null
          },
          "name": "Object ID",
          "description": "Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]."
        }
      }
    }
  },
  "zone": {
    "reload": {
      "name": "Reload",
      "description": "Reloads zones from the YAML-configuration.",
      "fields": {}
    }
  },
  "script": {
    "toggle_projector": {
      "name": "Toggle Projector",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "toggle_input": {
      "name": "toggle_input",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "reload": {
      "name": "Reload",
      "description": "Reloads all the available scripts.",
      "fields": {}
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Runs the sequence of actions defined in a script.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "script"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Stops a running script.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "script"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggle a script. Starts it, if isn\u0027t running, stops it otherwise.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "script"
            ]
          }
        ]
      }
    }
  },
  "input_button": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "press": {
      "name": "Press",
      "description": "Mimics the physical button press on the device.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_button"
            ]
          }
        ]
      }
    }
  },
  "input_select": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "select_first": {
      "name": "First",
      "description": "Selects the first option.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "select_last": {
      "name": "Last",
      "description": "Selects the last option.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "select_next": {
      "name": "Next",
      "description": "Select the next option.",
      "fields": {
        "cycle": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Cycle",
          "description": "If the option should cycle from the last to the first option on the list."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "select_option": {
      "name": "Select",
      "description": "Selects an option.",
      "fields": {
        "option": {
          "required": true,
          "example": "\u0022Item A\u0022",
          "selector": {
            "text": null
          },
          "name": "Option",
          "description": "Option to be selected."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "select_previous": {
      "name": "Previous",
      "description": "Selects the previous option.",
      "fields": {
        "cycle": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Cycle",
          "description": "If the option should cycle from the last to the first option on the list."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "set_options": {
      "name": "Set options",
      "description": "Sets the options.",
      "fields": {
        "options": {
          "required": true,
          "example": "[\u0022Item A\u0022, \u0022Item B\u0022, \u0022Item C\u0022]",
          "selector": {
            "text": {
              "multiple": true
            }
          },
          "name": "Options",
          "description": "List of options."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    }
  },
  "timer": {
    "reload": {
      "name": "Reload",
      "description": "Reloads timers from the YAML-configuration.",
      "fields": {}
    },
    "start": {
      "name": "Start",
      "description": "Starts a timer or restarts it with a provided duration.",
      "fields": {
        "duration": {
          "example": "00:01:00 or 60",
          "selector": {
            "text": null
          },
          "name": "Duration",
          "description": "Custom duration to restart the timer with."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    },
    "pause": {
      "name": "Pause",
      "description": "Pauses a running timer, retaining the remaining duration for later continuation.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    },
    "cancel": {
      "name": "Cancel",
      "description": "Resets a timer\u0027s duration to the last known initial value without firing the timer finished event.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    },
    "finish": {
      "name": "Finish",
      "description": "Finishes a running timer earlier than scheduled.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    },
    "change": {
      "name": "Change",
      "description": "Changes a timer by adding or subtracting a given duration.",
      "fields": {
        "duration": {
          "default": 0,
          "required": true,
          "example": "00:01:00, 60 or -60",
          "selector": {
            "text": null
          },
          "name": "Duration",
          "description": "Duration to add to or subtract from the running timer."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    }
  },
  "input_boolean": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Turns on the helper.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_boolean"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns off the helper.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_boolean"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles the helper on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_boolean"
            ]
          }
        ]
      }
    }
  },
  "input_number": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "set_value": {
      "name": "Set",
      "description": "Sets the value.",
      "fields": {
        "value": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 9223372036854775807,
              "step": 0.001,
              "mode": "box"
            }
          },
          "name": "Value",
          "description": "The target value."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_number"
            ]
          }
        ]
      }
    },
    "increment": {
      "name": "Increment",
      "description": "Increments the current value by 1 step.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_number"
            ]
          }
        ]
      }
    },
    "decrement": {
      "name": "Decrement",
      "description": "Decrements the current value by 1 step.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_number"
            ]
          }
        ]
      }
    }
  },
  "conversation": {
    "process": {
      "name": "Process",
      "description": "Launches a conversation from a transcribed text.",
      "fields": {
        "text": {
          "example": "Turn all lights on",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Text",
          "description": "Transcribed text input."
        },
        "language": {
          "example": "NL",
          "selector": {
            "text": null
          },
          "name": "Language",
          "description": "Language of text. Defaults to server language."
        },
        "agent_id": {
          "example": "homeassistant",
          "selector": {
            "conversation_agent": null
          },
          "name": "Agent",
          "description": "Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands."
        },
        "conversation_id": {
          "example": "my_conversation_1",
          "selector": {
            "text": null
          },
          "name": "Conversation ID",
          "description": "ID of the conversation, to be able to continue a previous conversation"
        }
      },
      "response": {
        "optional": true
      }
    },
    "reload": {
      "name": "Reload",
      "description": "Reloads the intent configuration.",
      "fields": {
        "language": {
          "example": "NL",
          "selector": {
            "text": null
          },
          "name": "Language",
          "description": "Language to clear cached intents for. Defaults to server language."
        },
        "agent_id": {
          "example": "homeassistant",
          "selector": {
            "conversation_agent": null
          },
          "name": "Agent",
          "description": "Conversation agent to reload."
        }
      }
    }
  },
  "counter": {
    "increment": {
      "name": "Increment",
      "description": "Increments a counter by its step size.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "counter"
            ]
          }
        ]
      }
    },
    "decrement": {
      "name": "Decrement",
      "description": "Decrements a counter by its step size.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "counter"
            ]
          }
        ]
      }
    },
    "reset": {
      "name": "Reset",
      "description": "Resets a counter to its initial value.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "counter"
            ]
          }
        ]
      }
    },
    "set_value": {
      "name": "Set",
      "description": "Sets the counter to a specific value.",
      "fields": {
        "value": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 9223372036854775807,
              "mode": "box"
            }
          },
          "name": "Value",
          "description": "The new counter value the entity should be set to."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "counter"
            ]
          }
        ]
      }
    }
  },
  "zwave_js": {
    "set_config_parameter": {
      "name": "Set device configuration parameter",
      "description": "Changes the configuration parameters of your Z-Wave devices.",
      "fields": {
        "area_id": {
          "example": "living_room",
          "selector": {
            "area": {
              "device": [
                {
                  "integration": "zwave_js"
                }
              ],
              "multiple": true
            }
          },
          "name": "Area ID(s)",
          "description": "The area(s) to target for this service. If an area is specified, all zwave_js devices and entities in that area will be targeted for this service."
        },
        "device_id": {
          "example": "8f4219cfa57e23f6f669c4616c2205e2",
          "selector": {
            "device": {
              "filter": [
                {
                  "integration": "zwave_js"
                }
              ],
              "multiple": true
            }
          },
          "name": "Device ID(s)",
          "description": "The device(s) to target for this service."
        },
        "entity_id": {
          "example": "sensor.living_room_temperature",
          "selector": {
            "entity": {
              "filter": [
                {
                  "integration": "zwave_js"
                }
              ],
              "multiple": true
            }
          },
          "name": "Entity ID(s)",
          "description": "The entity ID(s) to target for this service."
        },
        "endpoint": {
          "example": 1,
          "default": 0,
          "required": false,
          "selector": {
            "text": null
          },
          "name": "Endpoint",
          "description": "The configuration parameter\u0027s endpoint."
        },
        "parameter": {
          "example": "Minimum brightness level",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Parameter",
          "description": "The name (or ID) of the configuration parameter you want to configure."
        },
        "bitmask": {
          "advanced": true,
          "selector": {
            "text": null
          },
          "name": "Bitmask",
          "description": "Target a specific bitmask (see the documentation for more information). Cannot be combined with value_size or value_format."
        },
        "value": {
          "example": 5,
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Value",
          "description": "The new value to set for this configuration parameter."
        },
        "value_size": {
          "example": 1,
          "selector": {
            "number": {
              "min": 1,
              "max": 4
            }
          },
          "name": "Value size",
          "description": "Size of the value, either 1, 2, or 4. Used in combination with value_format when a config parameter is not defined in your device\u0027s configuration file. Cannot be combined with bitmask."
        },
        "value_format": {
          "example": 1,
          "selector": {
            "number": {
              "min": 0,
              "max": 3
            }
          },
          "name": "Value format",
          "description": "Format of the value, 0 for signed integer, 1 for unsigned integer, 2 for enumerated, 3 for bitfield. Used in combination with value_size when a config parameter is not defined in your device\u0027s configuration file. Cannot be combined with bitmask."
        }
      }
    },
    "bulk_set_partial_config_parameters": {
      "name": "Bulk set partial configuration parameters (advanced).",
      "description": "Allows for bulk setting partial parameters. Useful when multiple partial parameters have to be set at the same time.",
      "fields": {
        "area_id": {
          "example": "living_room",
          "selector": {
            "area": {
              "device": [
                {
                  "integration": "zwave_js"
                }
              ],
              "multiple": true
            }
          },
          "name": "Area ID(s)",
          "description": "The area(s) to target for this service. If an area is specified, all zwave_js devices and entities in that area will be targeted for this service."
        },
        "device_id": {
          "example": "8f4219cfa57e23f6f669c4616c2205e2",
          "selector": {
            "device": {
              "filter": [
                {
                  "integration": "zwave_js"
                }
              ],
              "multiple": true
            }
          },
          "name": "Device ID(s)",
          "description": "The device(s) to target for this service."
        },
        "entity_id": {
          "example": "sensor.living_room_temperature",
          "selector": {
            "entity": {
              "filter": [
                {
                  "integration": "zwave_js"
                }
              ],
              "multiple": true
            }
          },
          "name": "Entity ID(s)",
          "description": "The entity ID(s) to target for this service."
        },
        "endpoint": {
          "example": 1,
          "default": 0,
          "required": false,
          "selector": {
            "text": null
          },
          "name": "Endpoint",
          "description": "The configuration parameter\u0027s endpoint."
        },
        "parameter": {
          "example": 9,
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Parameter",
          "description": "The name (or ID) of the configuration parameter you want to configure."
        },
        "value": {
          "example": "\u00220x1\u0022: 1\n\u00220x10\u0022: 1\n\u00220x20\u0022: 1\n\u00220x40\u0022: 1\n",
          "required": true,
          "selector": {
            "object": null
          },
          "name": "Value",
          "description": "The new value(s) to set for this configuration parameter. Can either be a raw integer value to represent the bulk change or a mapping where the key is the bitmask (either in hex or integer form) and the value is the new value you want to set for that partial parameter."
        }
      }
    },
    "refresh_value": {
      "name": "Refresh values",
      "description": "Force updates the values of a Z-Wave entity.",
      "fields": {
        "entity_id": {
          "required": true,
          "example": "- sensor.family_room_motion\n- switch.kitchen\n",
          "selector": {
            "entity": {
              "integration": "zwave_js",
              "multiple": true
            }
          },
          "name": "Entities",
          "description": "Entities to refresh."
        },
        "refresh_all_values": {
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Refresh all values?",
          "description": "Whether to refresh all values (true) or just the primary value (false)."
        }
      }
    },
    "set_value": {
      "name": "Set a value (advanced)",
      "description": "Changes any value that Z-Wave JS recognizes on a Z-Wave device. This action has minimal validation so only use this action if you know what you are doing.",
      "fields": {
        "area_id": {
          "example": "living_room",
          "selector": {
            "area": {
              "device": [
                {
                  "integration": "zwave_js"
                }
              ],
              "multiple": true
            }
          },
          "name": "Area ID(s)",
          "description": "The area(s) to target for this service. If an area is specified, all zwave_js devices and entities in that area will be targeted for this service."
        },
        "device_id": {
          "example": "8f4219cfa57e23f6f669c4616c2205e2",
          "selector": {
            "device": {
              "filter": [
                {
                  "integration": "zwave_js"
                }
              ],
              "multiple": true
            }
          },
          "name": "Device ID(s)",
          "description": "The device(s) to target for this service."
        },
        "entity_id": {
          "example": "sensor.living_room_temperature",
          "selector": {
            "entity": {
              "filter": [
                {
                  "integration": "zwave_js"
                }
              ],
              "multiple": true
            }
          },
          "name": "Entity ID(s)",
          "description": "The entity ID(s) to target for this service."
        },
        "command_class": {
          "example": 117,
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Command class",
          "description": "The ID of the command class for the value."
        },
        "endpoint": {
          "example": 1,
          "required": false,
          "selector": {
            "text": null
          },
          "name": "Endpoint",
          "description": "The endpoint for the value."
        },
        "property": {
          "example": "currentValue",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Property",
          "description": "The ID of the property for the value."
        },
        "property_key": {
          "example": 1,
          "required": false,
          "selector": {
            "text": null
          },
          "name": "Property key",
          "description": "The ID of the property key for the value."
        },
        "value": {
          "example": "ffbb99",
          "required": true,
          "selector": {
            "object": null
          },
          "name": "Value",
          "description": "The new value to set."
        },
        "options": {
          "required": false,
          "selector": {
            "object": null
          },
          "name": "Options",
          "description": "Set value options map. Refer to the Z-Wave JS documentation for more information on what options can be set."
        },
        "wait_for_result": {
          "required": false,
          "selector": {
            "boolean": null
          },
          "name": "Wait for result?",
          "description": "Whether or not to wait for a response from the node. If not included in the payload, the integration will decide whether to wait or not. If set to \u0060true\u0060, note that the action can take a while if setting a value on an asleep battery device."
        }
      }
    },
    "multicast_set_value": {
      "name": "Set a value on multiple devices via multicast (advanced)",
      "description": "Changes any value that Z-Wave JS recognizes on multiple Z-Wave devices using multicast, so all devices receive the message simultaneously. This action has minimal validation so only use this action if you know what you are doing.",
      "fields": {
        "area_id": {
          "example": "living_room",
          "selector": {
            "area": {
              "device": [
                {
                  "integration": "zwave_js"
                }
              ],
              "multiple": true
            }
          },
          "name": "Area ID(s)",
          "description": "The area(s) to target for this service. If an area is specified, all zwave_js devices and entities in that area will be targeted for this service."
        },
        "device_id": {
          "example": "8f4219cfa57e23f6f669c4616c2205e2",
          "selector": {
            "device": {
              "filter": [
                {
                  "integration": "zwave_js"
                }
              ],
              "multiple": true
            }
          },
          "name": "Device ID(s)",
          "description": "The device(s) to target for this service."
        },
        "entity_id": {
          "example": "sensor.living_room_temperature",
          "selector": {
            "entity": {
              "filter": [
                {
                  "integration": "zwave_js"
                }
              ],
              "multiple": true
            }
          },
          "name": "Entity ID(s)",
          "description": "The entity ID(s) to target for this service."
        },
        "broadcast": {
          "example": true,
          "required": false,
          "selector": {
            "boolean": null
          },
          "name": "Broadcast?",
          "description": "Whether command should be broadcast to all devices on the network."
        },
        "command_class": {
          "example": 117,
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Command class",
          "description": "The ID of the command class for the value."
        },
        "endpoint": {
          "example": 1,
          "required": false,
          "selector": {
            "text": null
          },
          "name": "Endpoint",
          "description": "The endpoint for the value."
        },
        "property": {
          "example": "currentValue",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Property",
          "description": "The ID of the property for the value."
        },
        "property_key": {
          "example": 1,
          "required": false,
          "selector": {
            "text": null
          },
          "name": "Property key",
          "description": "The ID of the property key for the value."
        },
        "options": {
          "required": false,
          "selector": {
            "object": null
          },
          "name": "Options",
          "description": "Set value options map. Refer to the Z-Wave JS documentation for more information on what options can be set."
        },
        "value": {
          "example": "ffbb99",
          "required": true,
          "selector": {
            "object": null
          },
          "name": "Value",
          "description": "The new value to set."
        }
      }
    },
    "ping": {
      "name": "Ping a node",
      "description": "Forces Z-Wave JS to try to reach a node. This can be used to update the status of the node in Z-Wave JS when you think it doesn\u0027t accurately reflect reality, e.g. reviving a failed/dead node or marking the node as asleep.",
      "fields": {
        "area_id": {
          "example": "living_room",
          "selector": {
            "area": {
              "device": [
                {
                  "integration": "zwave_js"
                }
              ],
              "multiple": true
            }
          },
          "name": "Area ID(s)",
          "description": "The area(s) to target for this service. If an area is specified, all zwave_js devices and entities in that area will be targeted for this service."
        },
        "device_id": {
          "example": "8f4219cfa57e23f6f669c4616c2205e2",
          "selector": {
            "device": {
              "filter": [
                {
                  "integration": "zwave_js"
                }
              ],
              "multiple": true
            }
          },
          "name": "Device ID(s)",
          "description": "The device(s) to target for this service."
        },
        "entity_id": {
          "example": "sensor.living_room_temperature",
          "selector": {
            "entity": {
              "filter": [
                {
                  "integration": "zwave_js"
                }
              ],
              "multiple": true
            }
          },
          "name": "Entity ID(s)",
          "description": "The entity ID(s) to target for this service."
        }
      }
    },
    "invoke_cc_api": {
      "name": "Invoke a Command Class API on a node (advanced)",
      "description": "Calls a Command Class API on a node. Some Command Classes can\u0027t be fully controlled via the \u0060set_value\u0060 action and require direct calls to the Command Class API.",
      "fields": {
        "area_id": {
          "example": "living_room",
          "selector": {
            "area": {
              "device": [
                {
                  "integration": "zwave_js"
                }
              ],
              "multiple": true
            }
          },
          "name": "Area ID(s)",
          "description": "The area(s) to target for this service. If an area is specified, all zwave_js devices and entities in that area will be targeted for this service."
        },
        "device_id": {
          "example": "8f4219cfa57e23f6f669c4616c2205e2",
          "selector": {
            "device": {
              "filter": [
                {
                  "integration": "zwave_js"
                }
              ],
              "multiple": true
            }
          },
          "name": "Device ID(s)",
          "description": "The device(s) to target for this service."
        },
        "entity_id": {
          "example": "sensor.living_room_temperature",
          "selector": {
            "entity": {
              "filter": [
                {
                  "integration": "zwave_js"
                }
              ],
              "multiple": true
            }
          },
          "name": "Entity ID(s)",
          "description": "The entity ID(s) to target for this service."
        },
        "command_class": {
          "example": 132,
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Command class",
          "description": "The ID of the command class that you want to issue a command to."
        },
        "endpoint": {
          "example": 1,
          "required": false,
          "selector": {
            "text": null
          },
          "name": "Endpoint",
          "description": "The endpoint to call the API on. If an endpoint is specified, that endpoint will be targeted for all nodes associated with the target areas, devices, and/or entities. If an endpoint is not specified, the root endpoint (0) will be targeted for nodes associated with target areas and devices, and the endpoint for the primary value of each entity will be targeted."
        },
        "method_name": {
          "example": "setInterval",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Method name",
          "description": "The name of the API method to call. Refer to the Z-Wave JS Command Class API documentation (https://zwave-js.github.io/node-zwave-js/#/api/CCs/index) for available methods."
        },
        "parameters": {
          "example": "[1, 1]",
          "required": true,
          "selector": {
            "object": null
          },
          "name": "Parameters",
          "description": "A list of parameters to pass to the API method. Refer to the Z-Wave JS Command Class API documentation (https://zwave-js.github.io/node-zwave-js/#/api/CCs/index) for parameters."
        }
      }
    },
    "refresh_notifications": {
      "name": "Refresh notifications on a node (advanced)",
      "description": "Refreshes notifications on a node based on notification type and optionally notification event.",
      "fields": {
        "area_id": {
          "example": "living_room",
          "selector": {
            "area": {
              "device": [
                {
                  "integration": "zwave_js"
                }
              ],
              "multiple": true
            }
          },
          "name": "Area ID(s)",
          "description": "The area(s) to target for this service. If an area is specified, all zwave_js devices and entities in that area will be targeted for this service."
        },
        "device_id": {
          "example": "8f4219cfa57e23f6f669c4616c2205e2",
          "selector": {
            "device": {
              "filter": [
                {
                  "integration": "zwave_js"
                }
              ],
              "multiple": true
            }
          },
          "name": "Device ID(s)",
          "description": "The device(s) to target for this service."
        },
        "entity_id": {
          "example": "sensor.living_room_temperature",
          "selector": {
            "entity": {
              "filter": [
                {
                  "integration": "zwave_js"
                }
              ],
              "multiple": true
            }
          },
          "name": "Entity ID(s)",
          "description": "The entity ID(s) to target for this service."
        },
        "notification_type": {
          "example": 1,
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 22,
              "mode": "box"
            }
          },
          "name": "Notification Type",
          "description": "The Notification Type number as defined in the Z-Wave specs."
        },
        "notification_event": {
          "example": 1,
          "required": false,
          "selector": {
            "number": {
              "min": 1,
              "max": 255,
              "mode": "box"
            }
          },
          "name": "Notification Event",
          "description": "The Notification Event number as defined in the Z-Wave specs."
        }
      }
    },
    "reset_meter": {
      "name": "Reset meters on a node",
      "description": "Resets the meters on a node.",
      "fields": {
        "area_id": {
          "example": "living_room",
          "selector": {
            "area": {
              "entity": [
                {
                  "integration": "zwave_js",
                  "domain": "sensor"
                }
              ],
              "multiple": true
            }
          },
          "name": "Area ID(s)",
          "description": "The area(s) to target for this service. If an area is specified, all zwave_js devices and entities in that area will be targeted for this service."
        },
        "device_id": {
          "example": "8f4219cfa57e23f6f669c4616c2205e2",
          "selector": {
            "device": {
              "entity": [
                {
                  "integration": "zwave_js",
                  "domain": "sensor"
                }
              ],
              "multiple": true
            }
          },
          "name": "Device ID(s)",
          "description": "The device(s) to target for this service."
        },
        "entity_id": {
          "example": "sensor.living_room_temperature",
          "selector": {
            "entity": {
              "filter": [
                {
                  "integration": "zwave_js",
                  "domain": "sensor"
                }
              ],
              "multiple": true
            }
          },
          "name": "Entity ID(s)",
          "description": "The entity ID(s) to target for this service."
        },
        "meter_type": {
          "example": 1,
          "required": false,
          "selector": {
            "text": null
          },
          "name": "Meter type",
          "description": "The type of meter to reset. Not all meters support the ability to pick a meter type to reset."
        },
        "value": {
          "example": 5,
          "required": false,
          "selector": {
            "text": null
          },
          "name": "Target value",
          "description": "The value that meters should be reset to. Not all meters support the ability to be reset to a specific value."
        }
      }
    }
  },
  "mqtt": {
    "publish": {
      "name": "Publish",
      "description": "Publishes a message to an MQTT topic.",
      "fields": {
        "topic": {
          "required": true,
          "example": "/homeassistant/hello",
          "selector": {
            "text": null
          },
          "name": "Topic",
          "description": "Topic to publish to."
        },
        "payload": {
          "required": true,
          "example": "The temperature is {{ states(\u0027sensor.temperature\u0027) }}",
          "selector": {
            "template": null
          },
          "name": "Payload",
          "description": "The payload to publish."
        },
        "evaluate_payload": {
          "advanced": true,
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Evaluate payload",
          "description": "When \u0060payload\u0060 is a Python bytes literal, evaluate the bytes literal and publish the raw data."
        },
        "qos": {
          "advanced": true,
          "default": 0,
          "selector": {
            "select": {
              "options": [
                "0",
                "1",
                "2"
              ]
            }
          },
          "name": "QoS",
          "description": "Quality of Service to use. 0: At most once. 1: At least once. 2: Exactly once."
        },
        "retain": {
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Retain",
          "description": "If the message should have the retain flag set. If set, the broker stores the most recent message on a topic."
        }
      }
    },
    "dump": {
      "name": "Export",
      "description": "Writes all messages on a specific topic into the \u0060mqtt_dump.txt\u0060 file in your configuration folder.",
      "fields": {
        "topic": {
          "example": "OpenZWave/#",
          "selector": {
            "text": null
          },
          "name": "Topic",
          "description": "Topic to listen to."
        },
        "duration": {
          "default": 5,
          "selector": {
            "number": {
              "min": 1,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Duration",
          "description": "How long we should listen for messages in seconds."
        }
      }
    },
    "reload": {
      "name": "Reload",
      "description": "Reloads MQTT entities from the YAML-configuration.",
      "fields": {}
    }
  },
  "schedule": {
    "reload": {
      "name": "Reload",
      "description": "Reloads schedules from the YAML-configuration.",
      "fields": {}
    }
  },
  "sonoff": {
    "send_command": {
      "name": "Send Command",
      "description": "Sends a command to a device.",
      "fields": {
        "device": {
          "name": "Device",
          "description": "Device ID to send command to.",
          "example": "1000123456"
        },
        "cmd": {
          "name": "Command",
          "description": "A single command to send.",
          "example": "switch"
        }
      }
    }
  },
  "rest_command": {
    "set_sound_mode": {
      "name": "",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "reload": {
      "name": "Reload",
      "description": "Reloads RESTful commands from the YAML-configuration.",
      "fields": {}
    }
  },
  "button": {
    "press": {
      "name": "Press",
      "description": "Press the button entity.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "button"
            ]
          }
        ]
      }
    }
  },
  "climate": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns climate device on.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              256
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns climate device off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              128
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles climate device, from on to off, or off to on.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              128,
              256
            ]
          }
        ]
      }
    },
    "set_hvac_mode": {
      "name": "Set HVAC mode",
      "description": "Sets HVAC operation mode.",
      "fields": {
        "hvac_mode": {
          "selector": {
            "select": {
              "options": [
                "off",
                "auto",
                "cool",
                "dry",
                "fan_only",
                "heat_cool",
                "heat"
              ],
              "translation_key": "hvac_mode"
            }
          },
          "name": "HVAC mode",
          "description": "HVAC operation mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ]
          }
        ]
      }
    },
    "set_preset_mode": {
      "name": "Set preset mode",
      "description": "Sets preset mode.",
      "fields": {
        "preset_mode": {
          "required": true,
          "example": "away",
          "selector": {
            "text": null
          },
          "name": "Preset mode",
          "description": "Preset mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              16
            ]
          }
        ]
      }
    },
    "set_aux_heat": {
      "name": "Turn on/off auxiliary heater",
      "description": "Turns auxiliary heater on/off.",
      "fields": {
        "aux_heat": {
          "required": true,
          "selector": {
            "boolean": null
          },
          "name": "Auxiliary heating",
          "description": "New value of auxiliary heater."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              64
            ]
          }
        ]
      }
    },
    "set_temperature": {
      "name": "Set target temperature",
      "description": "Sets the temperature setpoint.",
      "fields": {
        "temperature": {
          "filter": {
            "supported_features": [
              1
            ]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 250,
              "step": 0.1,
              "mode": "box"
            }
          },
          "name": "Target temperature",
          "description": "The temperature setpoint."
        },
        "target_temp_high": {
          "filter": {
            "supported_features": [
              2
            ]
          },
          "advanced": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 250,
              "step": 0.1,
              "mode": "box"
            }
          },
          "name": "Upper target temperature",
          "description": "The max temperature setpoint."
        },
        "target_temp_low": {
          "filter": {
            "supported_features": [
              2
            ]
          },
          "advanced": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 250,
              "step": 0.1,
              "mode": "box"
            }
          },
          "name": "Lower target temperature",
          "description": "The min temperature setpoint."
        },
        "hvac_mode": {
          "selector": {
            "select": {
              "options": [
                "off",
                "auto",
                "cool",
                "dry",
                "fan_only",
                "heat_cool",
                "heat"
              ],
              "translation_key": "hvac_mode"
            }
          },
          "name": "HVAC mode",
          "description": "HVAC operation mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              1,
              2
            ]
          }
        ]
      }
    },
    "set_humidity": {
      "name": "Set target humidity",
      "description": "Sets target humidity.",
      "fields": {
        "humidity": {
          "required": true,
          "selector": {
            "number": {
              "min": 30,
              "max": 99,
              "unit_of_measurement": "%"
            }
          },
          "name": "Humidity",
          "description": "Target humidity."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "set_fan_mode": {
      "name": "Set fan mode",
      "description": "Sets fan operation mode.",
      "fields": {
        "fan_mode": {
          "required": true,
          "example": "low",
          "selector": {
            "text": null
          },
          "name": "Fan mode",
          "description": "Fan operation mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              8
            ]
          }
        ]
      }
    },
    "set_swing_mode": {
      "name": "Set swing mode",
      "description": "Sets swing operation mode.",
      "fields": {
        "swing_mode": {
          "required": true,
          "example": "on",
          "selector": {
            "text": null
          },
          "name": "Swing mode",
          "description": "Swing operation mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              32
            ]
          }
        ]
      }
    },
    "set_swing_horizontal_mode": {
      "name": "Set horizontal swing mode",
      "description": "Sets horizontal swing operation mode.",
      "fields": {
        "swing_horizontal_mode": {
          "required": true,
          "example": "on",
          "selector": {
            "text": null
          },
          "name": "Horizontal swing mode",
          "description": "Horizontal swing operation mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              512
            ]
          }
        ]
      }
    }
  },
  "cover": {
    "open_cover": {
      "name": "Open",
      "description": "Opens a cover.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "close_cover": {
      "name": "Close",
      "description": "Closes a cover.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    },
    "set_cover_position": {
      "name": "Set position",
      "description": "Moves a cover to a specific position.",
      "fields": {
        "position": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Position",
          "description": "Target position."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "stop_cover": {
      "name": "Stop",
      "description": "Stops the cover movement.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              8
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a cover open/closed.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              3
            ]
          }
        ]
      }
    },
    "open_cover_tilt": {
      "name": "Open tilt",
      "description": "Tilts a cover open.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              16
            ]
          }
        ]
      }
    },
    "close_cover_tilt": {
      "name": "Close tilt",
      "description": "Tilts a cover to close.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              32
            ]
          }
        ]
      }
    },
    "stop_cover_tilt": {
      "name": "Stop tilt",
      "description": "Stops a tilting cover movement.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              64
            ]
          }
        ]
      }
    },
    "set_cover_tilt_position": {
      "name": "Set tilt position",
      "description": "Moves a cover tilt to a specific position.",
      "fields": {
        "tilt_position": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Tilt position",
          "description": "Target tilt positition."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              128
            ]
          }
        ]
      }
    },
    "toggle_cover_tilt": {
      "name": "Toggle tilt",
      "description": "Toggles a cover tilt open/closed.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              48
            ]
          }
        ]
      }
    }
  },
  "fan": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns fan on.",
      "fields": {
        "percentage": {
          "filter": {
            "supported_features": [
              1
            ]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Percentage",
          "description": "Speed of the fan."
        },
        "preset_mode": {
          "example": "auto",
          "filter": {
            "supported_features": [
              8
            ]
          },
          "selector": {
            "text": null
          },
          "name": "Preset mode",
          "description": "Preset fan mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              32
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns fan off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              16
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a fan on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ]
          }
        ]
      }
    },
    "increase_speed": {
      "name": "Increase speed",
      "description": "Increases the speed of a fan.",
      "fields": {
        "percentage_step": {
          "advanced": true,
          "required": false,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Increment",
          "description": "Percentage step by which the speed should be increased."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "decrease_speed": {
      "name": "Decrease speed",
      "description": "Decreases the speed of a fan.",
      "fields": {
        "percentage_step": {
          "advanced": true,
          "required": false,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Decrement",
          "description": "Percentage step by which the speed should be decreased."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "oscillate": {
      "name": "Oscillate",
      "description": "Controls the oscillation of a fan.",
      "fields": {
        "oscillating": {
          "required": true,
          "selector": {
            "boolean": null
          },
          "name": "Oscillating",
          "description": "Turns oscillation on/off."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    },
    "set_direction": {
      "name": "Set direction",
      "description": "Sets a fan\u0027s rotation direction.",
      "fields": {
        "direction": {
          "required": true,
          "selector": {
            "select": {
              "options": [
                "forward",
                "reverse"
              ],
              "translation_key": "direction"
            }
          },
          "name": "Direction",
          "description": "Direction of the fan rotation."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "set_percentage": {
      "name": "Set speed",
      "description": "Sets the speed of a fan.",
      "fields": {
        "percentage": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Percentage",
          "description": "Speed of the fan."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "set_preset_mode": {
      "name": "Set preset mode",
      "description": "Sets preset fan mode.",
      "fields": {
        "preset_mode": {
          "required": true,
          "example": "auto",
          "selector": {
            "text": null
          },
          "name": "Preset mode",
          "description": "Preset fan mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              8
            ]
          }
        ]
      }
    }
  },
  "remote": {
    "turn_off": {
      "name": "Turn off",
      "description": "Sends the turn off command.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Sends the turn on command.",
      "fields": {
        "activity": {
          "example": "BedroomTV",
          "filter": {
            "supported_features": [
              4
            ]
          },
          "selector": {
            "text": null
          },
          "name": "Activity",
          "description": "Activity ID or activity name to be started."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Sends the toggle command.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "send_command": {
      "name": "Send command",
      "description": "Sends a command or a list of commands to a device.",
      "fields": {
        "device": {
          "example": "32756745",
          "selector": {
            "text": null
          },
          "name": "Device",
          "description": "Device ID to send command to."
        },
        "command": {
          "required": true,
          "example": "Play",
          "selector": {
            "object": null
          },
          "name": "Command",
          "description": "A single command or a list of commands to send."
        },
        "num_repeats": {
          "default": 1,
          "selector": {
            "number": {
              "min": 0,
              "max": 255
            }
          },
          "name": "Repeats",
          "description": "The number of times you want to repeat the commands."
        },
        "delay_secs": {
          "default": 0.4,
          "selector": {
            "number": {
              "min": 0,
              "max": 60,
              "step": 0.1,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Delay seconds",
          "description": "The time you want to wait in between repeated commands."
        },
        "hold_secs": {
          "default": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 60,
              "step": 0.1,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Hold seconds",
          "description": "The time you want to have it held before the release is send."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "learn_command": {
      "name": "Learn command",
      "description": "Learns a command or a list of commands from a device.",
      "fields": {
        "device": {
          "example": "television",
          "selector": {
            "text": null
          },
          "name": "Device",
          "description": "Device ID to learn command from."
        },
        "command": {
          "example": "Turn on",
          "selector": {
            "object": null
          },
          "name": "Command",
          "description": "A single command or a list of commands to learn."
        },
        "command_type": {
          "default": "ir",
          "selector": {
            "select": {
              "options": [
                "ir",
                "rf"
              ]
            }
          },
          "name": "Command type",
          "description": "The type of command to be learned."
        },
        "alternative": {
          "selector": {
            "boolean": null
          },
          "name": "Alternative",
          "description": "If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won\u0027t change the state."
        },
        "timeout": {
          "selector": {
            "number": {
              "min": 0,
              "max": 60,
              "step": 5,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Timeout",
          "description": "Timeout for the command to be learned."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "delete_command": {
      "name": "Delete command",
      "description": "Deletes a command or a list of commands from the database.",
      "fields": {
        "device": {
          "example": "television",
          "selector": {
            "text": null
          },
          "name": "Device",
          "description": "Device from which commands will be deleted."
        },
        "command": {
          "required": true,
          "example": "Mute",
          "selector": {
            "object": null
          },
          "name": "Command",
          "description": "The single command or the list of commands to be deleted."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    }
  },
  "switch": {
    "turn_off": {
      "name": "Turn off",
      "description": "Turns a switch off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "switch"
            ]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Turns a switch on.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "switch"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a switch on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "switch"
            ]
          }
        ]
      }
    }
  },
  "number": {
    "set_value": {
      "name": "Set",
      "description": "Sets the value of a number.",
      "fields": {
        "value": {
          "example": 42,
          "selector": {
            "text": null
          },
          "name": "Value",
          "description": "The target value to set."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "number"
            ]
          }
        ]
      }
    }
  },
  "input_datetime": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "set_datetime": {
      "name": "Set",
      "description": "Sets the date and/or time.",
      "fields": {
        "date": {
          "example": "\u00222019-04-20\u0022",
          "selector": {
            "text": null
          },
          "name": "Date",
          "description": "The target date."
        },
        "time": {
          "example": "\u002205:04:20\u0022",
          "selector": {
            "time": null
          },
          "name": "Time",
          "description": "The target time."
        },
        "datetime": {
          "example": "\u00222019-04-20 05:04:20\u0022",
          "selector": {
            "text": null
          },
          "name": "Date \u0026 time",
          "description": "The target date \u0026 time."
        },
        "timestamp": {
          "selector": {
            "number": {
              "min": 0,
              "max": 9223372036854775807,
              "mode": "box"
            }
          },
          "name": "Timestamp",
          "description": "The target date \u0026 time, expressed by a UNIX timestamp."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_datetime"
            ]
          }
        ]
      }
    }
  },
  "wake_on_lan": {
    "send_magic_packet": {
      "name": "Send magic packet",
      "description": "Sends a \u0027magic packet\u0027 to wake up a device with \u0027Wake-On-LAN\u0027 capabilities.",
      "fields": {
        "mac": {
          "required": true,
          "example": "aa:bb:cc:dd:ee:ff",
          "selector": {
            "text": null
          },
          "name": "MAC address",
          "description": "MAC address of the device to wake up."
        },
        "broadcast_address": {
          "example": "192.168.255.255",
          "selector": {
            "text": null
          },
          "name": "Broadcast address",
          "description": "The IP address of the host to send the magic packet to. Defaults to \u0060255.255.255.255\u0060 and is normally not changed."
        },
        "broadcast_port": {
          "default": 9,
          "selector": {
            "number": {
              "min": 1,
              "max": 65535
            }
          },
          "name": "Broadcast port",
          "description": "The port to send the magic packet to. Defaults to \u00609\u0060 and is normally not changed."
        }
      }
    }
  },
  "webostv": {
    "button": {
      "name": "Button",
      "description": "Sends a button press command.",
      "fields": {
        "entity_id": {
          "required": true,
          "selector": {
            "entity": {
              "integration": "webostv",
              "domain": "media_player"
            }
          },
          "name": "Entity",
          "description": "Name(s) of the webostv entities where to run the API method."
        },
        "button": {
          "required": true,
          "example": "LEFT",
          "selector": {
            "text": null
          },
          "name": "Button",
          "description": "Name of the button to press.  Known possible values are LEFT, RIGHT, DOWN, UP, HOME, MENU, BACK, ENTER, DASH, INFO, ASTERISK, CC, EXIT, MUTE, RED, GREEN, BLUE, YELLOW, VOLUMEUP, VOLUMEDOWN, CHANNELUP, CHANNELDOWN, PLAY, PAUSE, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9."
        }
      }
    },
    "command": {
      "name": "Command",
      "description": "Sends a command.",
      "fields": {
        "entity_id": {
          "required": true,
          "selector": {
            "entity": {
              "integration": "webostv",
              "domain": "media_player"
            }
          },
          "name": "Entity",
          "description": "Name(s) of the webostv entities where to run the API method."
        },
        "command": {
          "required": true,
          "example": "system.launcher/open",
          "selector": {
            "text": null
          },
          "name": "Command",
          "description": "Endpoint of the command."
        },
        "payload": {
          "example": "target: https://www.google.com",
          "advanced": true,
          "selector": {
            "object": null
          },
          "name": "Payload",
          "description": "An optional payload to provide to the endpoint in the format of key value pair(s)."
        }
      }
    },
    "select_sound_output": {
      "name": "Select sound output",
      "description": "Sends the TV the command to change sound output.",
      "fields": {
        "entity_id": {
          "required": true,
          "selector": {
            "entity": {
              "integration": "webostv",
              "domain": "media_player"
            }
          },
          "name": "Entity",
          "description": "Name(s) of the webostv entities to change sound output on."
        },
        "sound_output": {
          "required": true,
          "example": "external_speaker",
          "selector": {
            "text": null
          },
          "name": "Sound output",
          "description": "Name of the sound output to switch to."
        }
      }
    }
  },
  "cloudflare": {
    "update_records": {
      "name": "Update records",
      "description": "Manually trigger update to Cloudflare records.",
      "fields": {}
    }
  },
  "lock": {
    "unlock": {
      "name": "Unlock",
      "description": "Unlocks a lock.",
      "fields": {
        "code": {
          "example": 1234,
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code used to unlock the lock."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "lock"
            ]
          }
        ]
      }
    },
    "lock": {
      "name": "Lock",
      "description": "Locks a lock.",
      "fields": {
        "code": {
          "example": 1234,
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code used to lock the lock."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "lock"
            ]
          }
        ]
      }
    },
    "open": {
      "name": "Open",
      "description": "Opens a lock.",
      "fields": {
        "code": {
          "example": 1234,
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code used to open the lock."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "lock"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    }
  },
  "select": {
    "select_first": {
      "name": "First",
      "description": "Selects the first option.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    },
    "select_last": {
      "name": "Last",
      "description": "Selects the last option.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    },
    "select_next": {
      "name": "Next",
      "description": "Selects the next option.",
      "fields": {
        "cycle": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Cycle",
          "description": "If the option should cycle from the last to the first."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    },
    "select_option": {
      "name": "Select",
      "description": "Selects an option.",
      "fields": {
        "option": {
          "required": true,
          "example": "\u0022Item A\u0022",
          "selector": {
            "text": null
          },
          "name": "Option",
          "description": "Option to be selected."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    },
    "select_previous": {
      "name": "Previous",
      "description": "Selects the previous option.",
      "fields": {
        "cycle": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Cycle",
          "description": "If the option should cycle from the first to the last."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    }
  },
  "vacuum": {
    "start": {
      "name": "Start",
      "description": "Starts or resumes the cleaning task.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ],
            "supported_features": [
              8192
            ]
          }
        ]
      }
    },
    "pause": {
      "name": "Pause",
      "description": "Pauses the cleaning task.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "return_to_base": {
      "name": "Return to dock",
      "description": "Tells the vacuum cleaner to return to its dock.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ],
            "supported_features": [
              16
            ]
          }
        ]
      }
    },
    "clean_spot": {
      "name": "Clean spot",
      "description": "Tells the vacuum cleaner to do a spot clean-up.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "locate": {
      "name": "Locate",
      "description": "Locates the vacuum cleaner robot.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ],
            "supported_features": [
              512
            ]
          }
        ]
      }
    },
    "stop": {
      "name": "Stop",
      "description": "Stops the current cleaning task.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ],
            "supported_features": [
              8
            ]
          }
        ]
      }
    },
    "set_fan_speed": {
      "name": "Set fan speed",
      "description": "Sets the fan speed of the vacuum cleaner.",
      "fields": {
        "fan_speed": {
          "required": true,
          "example": "low",
          "selector": {
            "text": null
          },
          "name": "Fan speed",
          "description": "Fan speed. The value depends on the integration. Some integrations have speed steps, like \u0027medium\u0027. Some use a percentage, between 0 and 100."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "send_command": {
      "name": "Send command",
      "description": "Sends a command to the vacuum cleaner.",
      "fields": {
        "command": {
          "required": true,
          "example": "set_dnd_timer",
          "selector": {
            "text": null
          },
          "name": "Command",
          "description": "Command to execute. The commands are integration-specific."
        },
        "params": {
          "example": "{ \u0022key\u0022: \u0022value\u0022 }",
          "selector": {
            "object": null
          },
          "name": "Parameters",
          "description": "Parameters for the command. The parameters are integration-specific."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    }
  },
  "valve": {
    "open_valve": {
      "name": "Open",
      "description": "Opens a valve.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "valve"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "close_valve": {
      "name": "Close",
      "description": "Closes a valve.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "valve"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    },
    "set_valve_position": {
      "name": "Set position",
      "description": "Moves a valve to a specific position.",
      "fields": {
        "position": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Position",
          "description": "Target position."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "valve"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "stop_valve": {
      "name": "Stop",
      "description": "Stops the valve movement.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "valve"
            ],
            "supported_features": [
              8
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a valve open/closed.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "valve"
            ],
            "supported_features": [
              3
            ]
          }
        ]
      }
    }
  },
  "adaptive_lighting": {
    "apply": {
      "name": "apply",
      "description": "Applies the current Adaptive Lighting settings to lights.",
      "fields": {
        "entity_id": {
          "description": "The \u0060entity_id\u0060 of the switch with the settings to apply. \uD83D\uDCDD",
          "selector": {
            "entity": {
              "integration": "adaptive_lighting",
              "domain": "switch",
              "multiple": false
            }
          },
          "name": "entity_id"
        },
        "lights": {
          "description": "A light (or list of lights) to apply the settings to. \uD83D\uDCA1",
          "selector": {
            "entity": {
              "domain": "light",
              "multiple": true
            }
          },
          "name": "lights"
        },
        "transition": {
          "description": "Duration of transition when lights change, in seconds. \uD83D\uDD51",
          "example": 10,
          "selector": {
            "text": null
          },
          "name": "transition"
        },
        "adapt_brightness": {
          "description": "Whether to adapt the brightness of the light. \uD83C\uDF1E",
          "example": true,
          "selector": {
            "boolean": null
          },
          "name": "adapt_brightness"
        },
        "adapt_color": {
          "description": "Whether to adapt the color on supporting lights. \uD83C\uDF08",
          "example": true,
          "selector": {
            "boolean": null
          },
          "name": "adapt_color"
        },
        "prefer_rgb_color": {
          "description": "Whether to prefer RGB color adjustment over light color temperature when possible. \uD83C\uDF08",
          "example": false,
          "selector": {
            "boolean": null
          },
          "name": "prefer_rgb_color"
        },
        "turn_on_lights": {
          "description": "Whether to turn on lights that are currently off. \uD83D\uDD06",
          "example": false,
          "selector": {
            "boolean": null
          },
          "name": "turn_on_lights"
        }
      }
    },
    "set_manual_control": {
      "name": "set_manual_control",
      "description": "Mark whether a light is \u0027manually controlled\u0027.",
      "fields": {
        "entity_id": {
          "description": "The \u0060entity_id\u0060 of the switch in which to (un)mark the light as being \u0060manually controlled\u0060. \uD83D\uDCDD",
          "selector": {
            "entity": {
              "integration": "adaptive_lighting",
              "domain": "switch",
              "multiple": false
            }
          },
          "name": "entity_id"
        },
        "lights": {
          "description": "entity_id(s) of lights, if not specified, all lights in the switch are selected. \uD83D\uDCA1",
          "selector": {
            "entity": {
              "domain": "light",
              "multiple": true
            }
          },
          "name": "lights"
        },
        "manual_control": {
          "description": "Whether to add (\u0022true\u0022) or remove (\u0022false\u0022) the light from the \u0022manual_control\u0022 list. \uD83D\uDD12",
          "example": true,
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "manual_control"
        }
      }
    },
    "change_switch_settings": {
      "name": "change_switch_settings",
      "description": "Change any settings you\u0027d like in the switch. All options here are the same as in the config flow.",
      "fields": {
        "entity_id": {
          "description": "Entity ID of the switch. \uD83D\uDCDD",
          "required": true,
          "selector": {
            "entity": {
              "domain": "switch"
            }
          },
          "name": "entity_id"
        },
        "use_defaults": {
          "description": "Sets the default values not specified in this service call. Options: \u0022current\u0022 (default, retains current values), \u0022factory\u0022 (resets to documented defaults), or \u0022configuration\u0022 (reverts to switch config defaults). \u2699\uFE0F",
          "example": "current",
          "required": false,
          "default": "current",
          "selector": {
            "select": {
              "options": [
                "current",
                "configuration",
                "factory"
              ]
            }
          },
          "name": "use_defaults"
        },
        "include_config_in_attributes": {
          "description": "Show all options as attributes on the switch in Home Assistant when set to \u0060true\u0060. \uD83D\uDCDD",
          "required": false,
          "selector": {
            "boolean": null
          },
          "name": "include_config_in_attributes"
        },
        "turn_on_lights": {
          "description": "Whether to turn on lights that are currently off. \uD83D\uDD06",
          "example": false,
          "required": false,
          "selector": {
            "boolean": null
          },
          "name": "turn_on_lights"
        },
        "initial_transition": {
          "description": "Duration of the first transition when lights turn from \u0060off\u0060 to \u0060on\u0060 in seconds. \u23F2\uFE0F",
          "example": 1,
          "required": false,
          "selector": {
            "text": null
          },
          "name": "initial_transition"
        },
        "sleep_transition": {
          "description": "Duration of transition when \u0022sleep mode\u0022 is toggled in seconds. \uD83D\uDE34",
          "example": 1,
          "required": false,
          "selector": {
            "text": null
          },
          "name": "sleep_transition"
        },
        "max_brightness": {
          "description": "Maximum brightness percentage. \uD83D\uDCA1",
          "required": false,
          "example": 100,
          "selector": {
            "text": null
          },
          "name": "max_brightness"
        },
        "max_color_temp": {
          "description": "Coldest color temperature in Kelvin. \u2744\uFE0F",
          "required": false,
          "example": 5500,
          "selector": {
            "text": null
          },
          "name": "max_color_temp"
        },
        "min_brightness": {
          "description": "Minimum brightness percentage. \uD83D\uDCA1",
          "required": false,
          "example": 1,
          "selector": {
            "text": null
          },
          "name": "min_brightness"
        },
        "min_color_temp": {
          "description": "Warmest color temperature in Kelvin. \uD83D\uDD25",
          "required": false,
          "example": 2000,
          "selector": {
            "text": null
          },
          "name": "min_color_temp"
        },
        "only_once": {
          "description": "Adapt lights only when they are turned on (\u0060true\u0060) or keep adapting them (\u0060false\u0060). \uD83D\uDD04",
          "example": false,
          "required": false,
          "selector": {
            "boolean": null
          },
          "name": "only_once"
        },
        "prefer_rgb_color": {
          "description": "Whether to prefer RGB color adjustment over light color temperature when possible. \uD83C\uDF08",
          "required": false,
          "example": false,
          "selector": {
            "boolean": null
          },
          "name": "prefer_rgb_color"
        },
        "separate_turn_on_commands": {
          "description": "Use separate \u0060light.turn_on\u0060 calls for color and brightness, needed for some light types. \uD83D\uDD00",
          "required": false,
          "example": false,
          "selector": {
            "boolean": null
          },
          "name": "separate_turn_on_commands"
        },
        "send_split_delay": {
          "description": "Delay (ms) between \u0060separate_turn_on_commands\u0060 for lights that don\u0027t support simultaneous brightness and color setting. \u23F2\uFE0F",
          "required": false,
          "example": 0,
          "selector": {
            "boolean": null
          },
          "name": "send_split_delay"
        },
        "sleep_brightness": {
          "description": "Brightness percentage of lights in sleep mode. \uD83D\uDE34",
          "required": false,
          "example": 1,
          "selector": {
            "text": null
          },
          "name": "sleep_brightness"
        },
        "sleep_rgb_or_color_temp": {
          "description": "Use either \u0060\u0022rgb_color\u0022\u0060 or \u0060\u0022color_temp\u0022\u0060 in sleep mode. \uD83C\uDF19",
          "required": false,
          "example": "color_temp",
          "selector": {
            "select": {
              "options": [
                "rgb_color",
                "color_temp"
              ]
            }
          },
          "name": "sleep_rgb_or_color_temp"
        },
        "sleep_rgb_color": {
          "description": "RGB color in sleep mode (used when \u0060sleep_rgb_or_color_temp\u0060 is \u0022rgb_color\u0022). \uD83C\uDF08",
          "required": false,
          "selector": {
            "color_rgb": null
          },
          "name": "sleep_rgb_color"
        },
        "sleep_color_temp": {
          "description": "Color temperature in sleep mode (used when \u0060sleep_rgb_or_color_temp\u0060 is \u0060color_temp\u0060) in Kelvin. \uD83D\uDE34",
          "required": false,
          "example": 1000,
          "selector": {
            "text": null
          },
          "name": "sleep_color_temp"
        },
        "sunrise_offset": {
          "description": "Adjust sunrise time with a positive or negative offset in seconds. \u23F0",
          "required": false,
          "example": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 86300
            }
          },
          "name": "sunrise_offset"
        },
        "sunrise_time": {
          "description": "Set a fixed time (HH:MM:SS) for sunrise. \uD83C\uDF05",
          "required": false,
          "example": "",
          "selector": {
            "time": null
          },
          "name": "sunrise_time"
        },
        "sunset_offset": {
          "description": "Adjust sunset time with a positive or negative offset in seconds. \u23F0",
          "required": false,
          "example": "",
          "selector": {
            "number": {
              "min": 0,
              "max": 86300
            }
          },
          "name": "sunset_offset"
        },
        "sunset_time": {
          "description": "Set a fixed time (HH:MM:SS) for sunset. \uD83C\uDF07",
          "example": "",
          "required": false,
          "selector": {
            "time": null
          },
          "name": "sunset_time"
        },
        "max_sunrise_time": {
          "description": "Set the latest virtual sunrise time (HH:MM:SS), allowing for earlier sunrises. \uD83C\uDF05",
          "example": "",
          "required": false,
          "selector": {
            "time": null
          },
          "name": "max_sunrise_time"
        },
        "min_sunset_time": {
          "description": "Set the earliest virtual sunset time (HH:MM:SS), allowing for later sunsets. \uD83C\uDF07",
          "example": "",
          "required": false,
          "selector": {
            "time": null
          },
          "name": "min_sunset_time"
        },
        "take_over_control": {
          "description": "Disable Adaptive Lighting if another source calls \u0060light.turn_on\u0060 while lights are on and being adapted. Note that this calls \u0060homeassistant.update_entity\u0060 every \u0060interval\u0060! \uD83D\uDD12",
          "required": false,
          "example": true,
          "selector": {
            "boolean": null
          },
          "name": "take_over_control"
        },
        "detect_non_ha_changes": {
          "description": "Detects and halts adaptations for non-\u0060light.turn_on\u0060 state changes. Needs \u0060take_over_control\u0060 enabled. \uD83D\uDD75\uFE0F Caution: \u26A0\uFE0F Some lights might falsely indicate an \u0027on\u0027 state, which could result in lights turning on unexpectedly. Disable this feature if you encounter such issues.",
          "required": false,
          "example": false,
          "selector": {
            "boolean": null
          },
          "name": "detect_non_ha_changes"
        },
        "transition": {
          "description": "Duration of transition when lights change, in seconds. \uD83D\uDD51",
          "required": false,
          "example": 45,
          "selector": {
            "text": null
          },
          "name": "transition"
        },
        "adapt_delay": {
          "description": "Wait time (seconds) between light turn on and Adaptive Lighting applying changes. Might help to avoid flickering. \u23F2\uFE0F",
          "required": false,
          "example": 0,
          "selector": {
            "text": null
          },
          "name": "adapt_delay"
        },
        "autoreset_control_seconds": {
          "description": "Automatically reset the manual control after a number of seconds. Set to 0 to disable. \u23F2\uFE0F",
          "required": false,
          "example": 0,
          "selector": {
            "text": null
          },
          "name": "autoreset_control_seconds"
        }
      }
    }
  },
  "input_text": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "set_value": {
      "name": "Set",
      "description": "Sets the value.",
      "fields": {
        "value": {
          "required": true,
          "example": "This is an example text",
          "selector": {
            "text": null
          },
          "name": "Value",
          "description": "The target value."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_text"
            ]
          }
        ]
      }
    }
  },
  "netdaemon": {
    "register_service": {
      "name": "",
      "description": "Register a new service for netdaemon, used by the daemon and not to be used by users",
      "fields": {
        "service": {
          "description": "The name of the service to register"
        },
        "class": {
          "description": "The class that implements the service call"
        },
        "method": {
          "description": "The method to call"
        }
      }
    },
    "reload_apps": {
      "name": "",
      "description": "",
      "fields": {}
    },
    "entity_create": {
      "name": "",
      "description": "Create an entity",
      "fields": {
        "entity_id": {
          "description": "The entity ID of the entity",
          "example": "sensor.awesome"
        },
        "state": {
          "description": "The state of the entity",
          "example": "Lorem ipsum"
        },
        "icon": {
          "description": "The icon for the entity",
          "example": "mdi:rocket-launch-outline"
        },
        "unit": {
          "description": "The unit of measurement for the entity"
        },
        "options": {
          "description": "List of options for a select entity"
        },
        "attributes": {
          "description": "The attributes of the entity"
        }
      }
    },
    "entity_update": {
      "name": "",
      "description": "Update an entity",
      "fields": {
        "entity_id": {
          "description": "The entity ID of the entity",
          "example": "sensor.awesome"
        },
        "state": {
          "description": "The state of the entity",
          "example": "Lorem ipsum"
        },
        "icon": {
          "description": "The icon for the entity",
          "example": "mdi:rocket-launch-outline"
        },
        "unit": {
          "description": "The unit of measurement for the entity"
        },
        "options": {
          "description": "List of options for a select entity"
        },
        "attributes": {
          "description": "The attributes of the entity"
        }
      }
    },
    "entity_remove": {
      "name": "",
      "description": "Remove an entity",
      "fields": {
        "entity_id": {
          "description": "The entity ID of the entity",
          "example": "sensor.awesome"
        }
      }
    }
  },
  "cast": {
    "show_lovelace_view": {
      "name": "Show dashboard view",
      "description": "Shows a dashboard view on a Chromecast device.",
      "fields": {
        "entity_id": {
          "required": true,
          "selector": {
            "entity": {
              "integration": "cast",
              "domain": "media_player"
            }
          },
          "name": "Entity",
          "description": "Media player entity to show the dashboard view on."
        },
        "dashboard_path": {
          "required": true,
          "example": "lovelace-cast",
          "selector": {
            "text": null
          },
          "name": "Dashboard path",
          "description": "The URL path of the dashboard to show."
        },
        "view_path": {
          "example": "downstairs",
          "selector": {
            "text": null
          },
          "name": "View path",
          "description": "The URL path of the dashboard view to show."
        }
      }
    }
  },
  "media_player": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns on the power of the media player.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              128
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns off the power of the media player.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              256
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a media player on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              384
            ]
          }
        ]
      }
    },
    "volume_up": {
      "name": "Turn up volume",
      "description": "Turns up the volume.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              4,
              1024
            ]
          }
        ]
      }
    },
    "volume_down": {
      "name": "Turn down volume",
      "description": "Turns down the volume.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              4,
              1024
            ]
          }
        ]
      }
    },
    "media_play_pause": {
      "name": "Play/Pause",
      "description": "Toggles play/pause.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              16385
            ]
          }
        ]
      }
    },
    "media_play": {
      "name": "Play",
      "description": "Starts playing.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              16384
            ]
          }
        ]
      }
    },
    "media_pause": {
      "name": "Pause",
      "description": "Pauses.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "media_stop": {
      "name": "Stop",
      "description": "Stops playing.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              4096
            ]
          }
        ]
      }
    },
    "media_next_track": {
      "name": "Next",
      "description": "Selects the next track.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              32
            ]
          }
        ]
      }
    },
    "media_previous_track": {
      "name": "Previous",
      "description": "Selects the previous track.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              16
            ]
          }
        ]
      }
    },
    "clear_playlist": {
      "name": "Clear playlist",
      "description": "Removes all items from the playlist.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              8192
            ]
          }
        ]
      }
    },
    "volume_set": {
      "name": "Set volume",
      "description": "Sets the volume level.",
      "fields": {
        "volume_level": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 1,
              "step": 0.01
            }
          },
          "name": "Level",
          "description": "The volume. 0 is inaudible, 1 is the maximum volume."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "volume_mute": {
      "name": "Mute/unmute volume",
      "description": "Mutes or unmutes the media player.",
      "fields": {
        "is_volume_muted": {
          "required": true,
          "selector": {
            "boolean": null
          },
          "name": "Muted",
          "description": "Defines whether or not it is muted."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              8
            ]
          }
        ]
      }
    },
    "media_seek": {
      "name": "Seek",
      "description": "Allows you to go to a different part of the media that is currently playing.",
      "fields": {
        "seek_position": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 9223372036854775807,
              "step": 0.01,
              "mode": "box"
            }
          },
          "name": "Position",
          "description": "Target position in the currently playing media. The format is platform dependent."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    },
    "join": {
      "name": "Join",
      "description": "Groups media players together for synchronous playback. Only works on supported multiroom audio systems.",
      "fields": {
        "group_members": {
          "required": true,
          "example": "- media_player.multiroom_player2\n- media_player.multiroom_player3\n",
          "selector": {
            "entity": {
              "multiple": true,
              "domain": "media_player"
            }
          },
          "name": "Group members",
          "description": "The players which will be synced with the playback specified in \u0060target\u0060."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              524288
            ]
          }
        ]
      }
    },
    "select_source": {
      "name": "Select source",
      "description": "Sends the media player the command to change input source.",
      "fields": {
        "source": {
          "required": true,
          "example": "video1",
          "selector": {
            "text": null
          },
          "name": "Source",
          "description": "Name of the source to switch to. Platform dependent."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              2048
            ]
          }
        ]
      }
    },
    "select_sound_mode": {
      "name": "Select sound mode",
      "description": "Selects a specific sound mode.",
      "fields": {
        "sound_mode": {
          "example": "Music",
          "selector": {
            "text": null
          },
          "name": "Sound mode",
          "description": "Name of the sound mode to switch to."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              65536
            ]
          }
        ]
      }
    },
    "play_media": {
      "name": "Play media",
      "description": "Starts playing specified media.",
      "fields": {
        "media_content_id": {
          "required": true,
          "example": "https://home-assistant.io/images/cast/splash.png",
          "selector": {
            "text": null
          },
          "name": "Content ID",
          "description": "The ID of the content to play. Platform dependent."
        },
        "media_content_type": {
          "required": true,
          "example": "music",
          "selector": {
            "text": null
          },
          "name": "Content type",
          "description": "The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist."
        },
        "enqueue": {
          "filter": {
            "supported_features": [
              2097152
            ]
          },
          "required": false,
          "selector": {
            "select": {
              "options": [
                "play",
                "next",
                "add",
                "replace"
              ],
              "translation_key": "enqueue"
            }
          },
          "name": "Enqueue",
          "description": "If the content should be played now or be added to the queue."
        },
        "announce": {
          "filter": {
            "supported_features": [
              1048576
            ]
          },
          "required": false,
          "example": "true",
          "selector": {
            "boolean": null
          },
          "name": "Announce",
          "description": "If the media should be played as an announcement."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              512
            ]
          }
        ]
      }
    },
    "shuffle_set": {
      "name": "Shuffle",
      "description": "Playback mode that selects the media in randomized order.",
      "fields": {
        "shuffle": {
          "required": true,
          "selector": {
            "boolean": null
          },
          "name": "Shuffle",
          "description": "Whether or not shuffle mode is enabled."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              32768
            ]
          }
        ]
      }
    },
    "unjoin": {
      "name": "Unjoin",
      "description": "Removes the player from a group. Only works on platforms which support player groups.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              524288
            ]
          }
        ]
      }
    },
    "repeat_set": {
      "name": "Repeat",
      "description": "Playback mode that plays the media in a loop.",
      "fields": {
        "repeat": {
          "required": true,
          "selector": {
            "select": {
              "options": [
                "off",
                "all",
                "one"
              ],
              "translation_key": "repeat"
            }
          },
          "name": "Repeat mode",
          "description": "Repeat mode to set."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              262144
            ]
          }
        ]
      }
    }
  },
  "notify": {
    "send_message": {
      "name": "Send a notification message",
      "description": "Sends a notification message.",
      "fields": {
        "message": {
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "Your notification message."
        },
        "title": {
          "required": false,
          "selector": {
            "text": null
          },
          "filter": {
            "supported_features": [
              1
            ]
          },
          "name": "Title",
          "description": "Title for your notification message."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "notify"
            ]
          }
        ]
      }
    },
    "persistent_notification": {
      "name": "Send a persistent notification",
      "description": "Sends a notification that is visible in the notifications panel.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "Message body of the notification."
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          },
          "name": "Title",
          "description": "Title of the notification."
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          },
          "name": "Data",
          "description": "Some integrations provide extended functionality. For information on how to use _data_, refer to the integration documentation.."
        }
      }
    },
    "mobile_app_stuarts_iphone": {
      "name": "Send a notification via mobile_app_stuarts_iphone",
      "description": "Sends a notification message using the mobile_app_stuarts_iphone integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_pixel_8": {
      "name": "Send a notification via mobile_app_pixel_8",
      "description": "Sends a notification message using the mobile_app_pixel_8 integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_wallfire": {
      "name": "Send a notification via mobile_app_wallfire",
      "description": "Sends a notification message using the mobile_app_wallfire integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_briana_s_iphone": {
      "name": "Send a notification via mobile_app_briana_s_iphone",
      "description": "Sends a notification message using the mobile_app_briana_s_iphone integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_mikaela": {
      "name": "Send a notification via mobile_app_mikaela",
      "description": "Sends a notification message using the mobile_app_mikaela integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "notify": {
      "name": "Send a notification with notify",
      "description": "Sends a notification message using the notify service.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "lg_webos_tv_oled65c1pub": {
      "name": "Send a notification with lg_webos_tv_oled65c1pub",
      "description": "Sends a notification message using the lg_webos_tv_oled65c1pub service.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "o365_email_jeff_hamm": {
      "name": "Send a notification via o365_email_jeff_hamm",
      "description": "Sends a notification message using the o365_email_jeff_hamm integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    }
  },
  "device_tracker": {
    "see": {
      "name": "See",
      "description": "Manually update the records of a seen legacy device tracker in the known_devices.yaml file.",
      "fields": {
        "mac": {
          "example": "FF:FF:FF:FF:FF:FF",
          "selector": {
            "text": null
          },
          "name": "MAC address",
          "description": "MAC address of the device."
        },
        "dev_id": {
          "example": "phonedave",
          "selector": {
            "text": null
          },
          "name": "Device ID",
          "description": "ID of the device (find the ID in \u0060known_devices.yaml\u0060)."
        },
        "host_name": {
          "example": "Dave",
          "selector": {
            "text": null
          },
          "name": "Hostname",
          "description": "Hostname of the device."
        },
        "location_name": {
          "example": "home",
          "selector": {
            "text": null
          },
          "name": "Location",
          "description": "Name of the location where the device is located. The options are: \u0060home\u0060, \u0060not_home\u0060, or the name of the zone."
        },
        "gps": {
          "example": "[51.509802, -0.086692]",
          "selector": {
            "object": null
          },
          "name": "GPS coordinates",
          "description": "GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539])."
        },
        "gps_accuracy": {
          "selector": {
            "number": {
              "min": 0,
              "mode": "box",
              "unit_of_measurement": "m"
            }
          },
          "name": "GPS accuracy",
          "description": "Accuracy of the GPS coordinates."
        },
        "battery": {
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Battery level",
          "description": "Battery level of the device."
        }
      }
    }
  },
  "siren": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns the siren on.",
      "fields": {
        "tone": {
          "example": "fire",
          "filter": {
            "supported_features": [
              4
            ]
          },
          "required": false,
          "selector": {
            "text": null
          },
          "name": "Tone",
          "description": "The tone to emit. When \u0060available_tones\u0060 property is a map, either the key or the value can be used. Must be supported by the integration."
        },
        "volume_level": {
          "example": 0.5,
          "filter": {
            "supported_features": [
              8
            ]
          },
          "required": false,
          "selector": {
            "number": {
              "min": 0,
              "max": 1,
              "step": 0.05
            }
          },
          "name": "Volume",
          "description": "The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration."
        },
        "duration": {
          "example": 15,
          "filter": {
            "supported_features": [
              16
            ]
          },
          "required": false,
          "selector": {
            "text": null
          },
          "name": "Duration",
          "description": "Number of seconds the sound is played. Must be supported by the integration."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "siren"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns the siren off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "siren"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles the siren on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "siren"
            ],
            "supported_features": [
              3
            ]
          }
        ]
      }
    }
  },
  "google_assistant": {
    "request_sync": {
      "name": "Request sync",
      "description": "Sends a request_sync command to Google.",
      "fields": {
        "agent_user_id": {
          "selector": {
            "text": null
          },
          "name": "Agent user ID",
          "description": "Only needed for automations. Specific Home Assistant user id (not username, ID in configuration \u003E users \u003E under username) to sync with Google Assistant. Do not need when you use this action through Home Assistant front end or API. Used in automation script or other place where context.user_id is missing."
        }
      }
    }
  },
  "weather": {
    "get_forecasts": {
      "name": "Get forecasts",
      "description": "Get weather forecasts.",
      "fields": {
        "type": {
          "required": true,
          "selector": {
            "select": {
              "options": [
                "daily",
                "hourly",
                "twice_daily"
              ],
              "translation_key": "forecast_type"
            }
          },
          "name": "Forecast type",
          "description": "Forecast type: daily, hourly or twice daily."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "weather"
            ],
            "supported_features": [
              1,
              2,
              4
            ]
          }
        ]
      },
      "response": {
        "optional": false
      }
    }
  },
  "ytube_music_player": {
    "call_method": {
      "name": "Call a submethod of ytubemusic player",
      "description": "Call a custom command.",
      "fields": {
        "entity_id": {
          "example": "media_player.ytube_music_player",
          "required": true,
          "selector": {
            "entity": {
              "domain": "media_player"
            }
          },
          "name": "Entity ID",
          "description": "Name(s) of the yTube music player entity where to run the custom command."
        },
        "command": {
          "example": "rate_track",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Command",
          "description": "Command to pass to LyTube music player."
        },
        "parameters": {
          "example": "thumb_up",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Parameter",
          "description": "Array of additional parameters, optional and depends on command."
        }
      }
    },
    "search": {
      "name": "Search",
      "description": "Search for music / album / etc on Ytube YouTube Music Player",
      "fields": {
        "entity_id": {
          "example": "media_player.ytube_music_player",
          "required": true,
          "selector": {
            "entity": {
              "domain": "media_player"
            }
          },
          "name": "Entity ID",
          "description": "Name(s) of the yTube music player entity where to run the custom command."
        },
        "query": {
          "example": "2pm tetris",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Query",
          "description": "The search query"
        },
        "filter": {
          "required": false,
          "selector": {
            "text": null
          },
          "name": "Filter",
          "description": "filter for query, values can be \u0027albums\u0027, \u0027playlists\u0027,\u0027artists\u0027 or \u0027songs\u0027. Leave this out to get all types."
        },
        "limit": {
          "required": false,
          "example": "20",
          "default": 20,
          "selector": {
            "number": {
              "min": 1,
              "max": 1000
            }
          },
          "name": "Limit",
          "description": "Limits the amount of resuls"
        }
      }
    },
    "add_to_playlist": {
      "name": "Add song to playlist",
      "description": "Adds a song to a playlist",
      "fields": {
        "entity_id": {
          "example": "media_player.ytube_music_player",
          "required": true,
          "selector": {
            "entity": {
              "domain": "media_player"
            }
          },
          "name": "Entity ID",
          "description": "Entity ID of the ytube media player"
        },
        "song_id": {
          "required": false,
          "example": "",
          "selector": {
            "text": null
          },
          "name": "Song ID",
          "description": "The id of the song, optional. By default the current song id is used. Only provide an argument to override this behavior."
        },
        "playlist_id": {
          "required": false,
          "example": "",
          "selector": {
            "text": null
          },
          "name": "Playlist ID",
          "description": "The id of the playlist, optional. By default the current playlist is used. Only provide an argument to override this behavior."
        }
      }
    },
    "remove_from_playlist": {
      "name": "Remove song from playlist",
      "description": "Removes a song from a playlist",
      "fields": {
        "entity_id": {
          "example": "media_player.ytube_music_player",
          "required": true,
          "selector": {
            "entity": {
              "domain": "media_player"
            }
          },
          "name": "Entity ID",
          "description": "Entity ID of the ytube media player"
        },
        "song_id": {
          "example": "",
          "name": "Song ID",
          "description": "The id of the song, optional. By default the current song id is used. Only provide an argument to override this behavior."
        },
        "playlist_id": {
          "example": "",
          "name": "Playlist ID",
          "description": "The id of the playlist, optional. By default the current playlist is used. Only provide an argument to override this behavior."
        }
      }
    },
    "rate_track": {
      "name": "Rate a track",
      "description": "Rates a song",
      "fields": {
        "entity_id": {
          "example": "media_player.ytube_music_player",
          "required": true,
          "selector": {
            "entity": {
              "domain": "media_player"
            }
          },
          "name": "Entity ID",
          "description": "Name(s) of the yTube music player entity where to run the custom command."
        },
        "rating": {
          "example": "thumb_up",
          "required": true,
          "selector": {
            "select": {
              "options": [
                "thumb_up",
                "thumb_down",
                "thumb_middle",
                "thumb_toggle_up_middle"
              ]
            }
          },
          "name": "Rating",
          "description": "The rating of the song, can be \u0027thumb_up\u0027 / \u0027thumb_down\u0027 / \u0027thumb_middle\u0027 / \u0027thumb_toggle_up_middle\u0027."
        },
        "song_id": {
          "example": "",
          "name": "Song ID",
          "description": "The id of the song, optional. By default the current song id is used. Only provide an argument to override this behavior."
        }
      }
    },
    "limit_count": {
      "name": "Limit song count",
      "description": "Limits the count of loaded tracks",
      "fields": {
        "entity_id": {
          "example": "media_player.ytube_music_player",
          "required": true,
          "selector": {
            "entity": {
              "domain": "media_player"
            }
          },
          "name": "Entity ID",
          "description": "Name(s) of the yTube music player entity where to run the custom command."
        },
        "limit": {
          "example": "20",
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 1000
            }
          },
          "name": "Limit",
          "description": "The amount of tracks, loaded per call"
        }
      }
    },
    "start_radio": {
      "name": "Radio",
      "description": "Creates a radio of the current track",
      "fields": {
        "entity_id": {
          "example": "media_player.ytube_music_player",
          "required": true,
          "selector": {
            "entity": {
              "domain": "media_player"
            }
          },
          "name": "Entity ID",
          "description": "Name(s) of the yTube music player entity where to run the command."
        },
        "interrupt": {
          "required": true,
          "example": "true",
          "selector": {
            "boolean": null
          },
          "name": "Interrupt",
          "description": "interrupt the current playback or not"
        }
      }
    }
  },
  "alarm_control_panel": {
    "alarm_disarm": {
      "name": "Disarm",
      "description": "Disarms the alarm.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to disarm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ]
          }
        ]
      }
    },
    "alarm_arm_home": {
      "name": "Arm home",
      "description": "Sets the alarm to: _armed, but someone is home_.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to arm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "alarm_arm_away": {
      "name": "Arm away",
      "description": "Sets the alarm to: _armed, no one home_.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to arm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    },
    "alarm_arm_night": {
      "name": "Arm night",
      "description": "Sets the alarm to: _armed for the night_.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to arm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "alarm_arm_vacation": {
      "name": "Arm vacation",
      "description": "Sets the alarm to: _armed for vacation_.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to arm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ],
            "supported_features": [
              32
            ]
          }
        ]
      }
    },
    "alarm_arm_custom_bypass": {
      "name": "Arm with custom bypass",
      "description": "Arms the alarm while allowing to bypass a custom area.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to arm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ],
            "supported_features": [
              16
            ]
          }
        ]
      }
    },
    "alarm_trigger": {
      "name": "Trigger",
      "description": "Trigger the alarm manually.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to arm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ],
            "supported_features": [
              8
            ]
          }
        ]
      }
    }
  },
  "humidifier": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns the humidifier on.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "humidifier"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns the humidifier off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "humidifier"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles the humidifier on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "humidifier"
            ]
          }
        ]
      }
    },
    "set_mode": {
      "name": "Set mode",
      "description": "Sets the humidifier operation mode.",
      "fields": {
        "mode": {
          "required": true,
          "example": "away",
          "selector": {
            "text": null
          },
          "name": "Mode",
          "description": "Operation mode. For example, _normal_, _eco_, or _away_. For a list of possible values, refer to the integration documentation."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "humidifier"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "set_humidity": {
      "name": "Set humidity",
      "description": "Sets the target humidity.",
      "fields": {
        "humidity": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Humidity",
          "description": "Target humidity."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "humidifier"
            ]
          }
        ]
      }
    }
  },
  "automation": {
    "trigger": {
      "name": "Trigger",
      "description": "Triggers the actions of an automation.",
      "fields": {
        "skip_condition": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Skip conditions",
          "description": "Defines whether or not the conditions will be skipped."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "automation"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles (enable / disable) an automation.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "automation"
            ]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Enables an automation.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "automation"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Disables an automation.",
      "fields": {
        "stop_actions": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Stop actions",
          "description": "Stops currently running actions."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "automation"
            ]
          }
        ]
      }
    },
    "reload": {
      "name": "Reload",
      "description": "Reloads the automation configuration.",
      "fields": {}
    }
  },
  "calendar": {
    "create_event": {
      "name": "Create event",
      "description": "Adds a new calendar event.",
      "fields": {
        "summary": {
          "required": true,
          "example": "Department Party",
          "selector": {
            "text": null
          },
          "name": "Summary",
          "description": "Defines the short summary or subject for the event."
        },
        "description": {
          "example": "Meeting to provide technical review for \u0027Phoenix\u0027 design.",
          "selector": {
            "text": null
          },
          "name": "Description",
          "description": "A more complete description of the event than the one provided by the summary."
        },
        "start_date_time": {
          "example": "2022-03-22 20:00:00",
          "selector": {
            "datetime": null
          },
          "name": "Start time",
          "description": "The date and time the event should start."
        },
        "end_date_time": {
          "example": "2022-03-22 22:00:00",
          "selector": {
            "datetime": null
          },
          "name": "End time",
          "description": "The date and time the event should end."
        },
        "start_date": {
          "example": "2022-03-22",
          "selector": {
            "date": null
          },
          "name": "Start date",
          "description": "The date the all-day event should start."
        },
        "end_date": {
          "example": "2022-03-23",
          "selector": {
            "date": null
          },
          "name": "End date",
          "description": "The date the all-day event should end (exclusive)."
        },
        "in": {
          "example": "{\u0022days\u0022: 2} or {\u0022weeks\u0022: 2}",
          "name": "In",
          "description": "Days or weeks that you want to create the event in."
        },
        "location": {
          "example": "Conference Room - F123, Bldg. 002",
          "selector": {
            "text": null
          },
          "name": "Location",
          "description": "The location of the event."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "calendar"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "get_events": {
      "name": "Get events",
      "description": "Get events on a calendar within a time range.",
      "fields": {
        "start_date_time": {
          "example": "2022-03-22 20:00:00",
          "selector": {
            "datetime": null
          },
          "name": "Start time",
          "description": "Returns active events after this time (exclusive). When not set, defaults to now."
        },
        "end_date_time": {
          "example": "2022-03-22 22:00:00",
          "selector": {
            "datetime": null
          },
          "name": "End time",
          "description": "Returns active events before this time (exclusive). Cannot be used with Duration."
        },
        "duration": {
          "selector": {
            "duration": null
          },
          "name": "Duration",
          "description": "Returns active events from Start time for the specified duration."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "calendar"
            ]
          }
        ]
      },
      "response": {
        "optional": false
      }
    }
  },
  "todo": {
    "add_item": {
      "name": "Add to-do list item",
      "description": "Add a new to-do list item.",
      "fields": {
        "item": {
          "required": true,
          "example": "Submit income tax return",
          "selector": {
            "text": null
          },
          "name": "Item name",
          "description": "The name that represents the to-do item."
        },
        "due_date": {
          "filter": {
            "supported_features": [
              16
            ]
          },
          "example": "2023-11-17",
          "selector": {
            "date": null
          },
          "name": "Due date",
          "description": "The date the to-do item is expected to be completed."
        },
        "due_datetime": {
          "filter": {
            "supported_features": [
              32
            ]
          },
          "example": "2023-11-17 13:30:00",
          "selector": {
            "datetime": null
          },
          "name": "Due date and time",
          "description": "The date and time the to-do item is expected to be completed."
        },
        "description": {
          "filter": {
            "supported_features": [
              64
            ]
          },
          "example": "A more complete description of the to-do item than that provided by the summary.",
          "selector": {
            "text": null
          },
          "name": "Description",
          "description": "A more complete description of the to-do item than provided by the item name."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "todo"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "update_item": {
      "name": "Update to-do list item",
      "description": "Update an existing to-do list item based on its name.",
      "fields": {
        "item": {
          "required": true,
          "example": "Submit income tax return",
          "selector": {
            "text": null
          },
          "name": "Item name",
          "description": "The current name of the to-do item."
        },
        "rename": {
          "example": "Something else",
          "selector": {
            "text": null
          },
          "name": "Rename item",
          "description": "The new name for the to-do item"
        },
        "status": {
          "example": "needs_action",
          "selector": {
            "select": {
              "translation_key": "status",
              "options": [
                "needs_action",
                "completed"
              ]
            }
          },
          "name": "Set status",
          "description": "A status or confirmation of the to-do item."
        },
        "due_date": {
          "filter": {
            "supported_features": [
              16
            ]
          },
          "example": "2023-11-17",
          "selector": {
            "date": null
          },
          "name": "Due date",
          "description": "The date the to-do item is expected to be completed."
        },
        "due_datetime": {
          "filter": {
            "supported_features": [
              32
            ]
          },
          "example": "2023-11-17 13:30:00",
          "selector": {
            "datetime": null
          },
          "name": "Due date and time",
          "description": "The date and time the to-do item is expected to be completed."
        },
        "description": {
          "filter": {
            "supported_features": [
              64
            ]
          },
          "example": "A more complete description of the to-do item than that provided by the summary.",
          "selector": {
            "text": null
          },
          "name": "Description",
          "description": "A more complete description of the to-do item than provided by the item name."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "todo"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "remove_item": {
      "name": "Remove a to-do list item",
      "description": "Remove an existing to-do list item by its name.",
      "fields": {
        "item": {
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Item name",
          "description": "The name for the to-do list item."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "todo"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    },
    "get_items": {
      "name": "Get to-do list items",
      "description": "Get items on a to-do list.",
      "fields": {
        "status": {
          "example": "needs_action",
          "default": "needs_action",
          "selector": {
            "select": {
              "translation_key": "status",
              "options": [
                "needs_action",
                "completed"
              ],
              "multiple": true
            }
          },
          "name": "Status",
          "description": "Only return to-do items with the specified statuses. Returns not completed actions by default."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "todo"
            ]
          }
        ]
      },
      "response": {
        "optional": false
      }
    },
    "remove_completed_items": {
      "name": "Remove all completed to-do list items",
      "description": "Remove all to-do list items that have been completed.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "todo"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    }
  },
  "o365": {
    "migrate_config": {
      "name": "Migrate existing O365 config to MS365",
      "description": "Create disabled MS365 config entries based on existing O365 config",
      "fields": {}
    },
    "scan_for_todo_lists": {
      "name": "Scan for new todo lists",
      "description": "Scan for newly available todo lists",
      "fields": {}
    },
    "new_todo": {
      "name": "Create a ToDo",
      "description": "Create a new ToDo",
      "fields": {
        "subject": {
          "name": "Subject",
          "description": "The subject of the todo",
          "example": "Pick up the mail",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "description": {
          "name": "Description",
          "description": "Description of the todo",
          "example": "Walk to the post box and collect the mail",
          "selector": {
            "text": null
          }
        },
        "due": {
          "name": "Due date",
          "description": "When the todo is due by",
          "example": "\u00222025-01-01\u0022",
          "selector": {
            "date": null
          }
        },
        "reminder": {
          "name": "Reminder date \u0026 time",
          "description": "When a reminder is needed",
          "example": "2025-01-01T12:00:00\u002B0000",
          "selector": {
            "datetime": null
          }
        }
      },
      "target": {
        "device": [
          {
            "integration": "o365"
          }
        ],
        "entity": [
          {
            "integration": "o365",
            "domain": [
              "todo"
            ]
          }
        ]
      }
    },
    "update_todo": {
      "name": "Update a ToDo",
      "description": "Update a ToDo",
      "fields": {
        "todo_id": {
          "name": "ToDo ID",
          "description": "ID for the todo, can be found as an attribute on your todo",
          "example": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "subject": {
          "name": "Subject",
          "description": "The subject of the todo",
          "example": "Pick up the mail",
          "selector": {
            "text": null
          }
        },
        "description": {
          "name": "Description",
          "description": "Description of the todo",
          "example": "Walk to the post box and collect the mail",
          "selector": {
            "text": null
          }
        },
        "due": {
          "name": "Due date",
          "description": "When the todo is due by",
          "example": "\u00222025-01-01\u0022",
          "selector": {
            "date": null
          }
        },
        "reminder": {
          "name": "reminder date \u0026 time",
          "description": "When a reminder is needed",
          "example": "2025-01-01T12:00:00\u002B0000",
          "selector": {
            "datetime": null
          }
        }
      },
      "target": {
        "device": [
          {
            "integration": "o365"
          }
        ],
        "entity": [
          {
            "integration": "o365",
            "domain": [
              "todo"
            ]
          }
        ]
      }
    },
    "delete_todo": {
      "name": "Delete a ToDo",
      "description": "Delete a ToDo",
      "fields": {
        "todo_id": {
          "name": "ToDo ID",
          "description": "ID for the todo, can be found as an attribute on your todo",
          "example": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
          "required": true,
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "device": [
          {
            "integration": "o365"
          }
        ],
        "entity": [
          {
            "integration": "o365",
            "domain": [
              "todo"
            ]
          }
        ]
      }
    },
    "complete_todo": {
      "name": "Complete a ToDo",
      "description": "Complete a ToDo",
      "fields": {
        "todo_id": {
          "name": "Todo ID",
          "description": "ID for the todo, can be found as an attribute on your todo",
          "example": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "completed": {
          "name": "Completed",
          "description": "Set whether todo is completed or not",
          "example": true,
          "required": true,
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "device": [
          {
            "integration": "o365"
          }
        ],
        "entity": [
          {
            "integration": "o365",
            "domain": [
              "todo"
            ]
          }
        ]
      }
    },
    "create_calendar_event": {
      "name": "Create a new event",
      "description": "Create new calendar event",
      "fields": {
        "subject": {
          "name": "Subject",
          "description": "The subject of the created event",
          "example": "Clean up the garage",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "start": {
          "name": "Start",
          "description": "The start time of the event",
          "example": "2025-03-22 20:00:00",
          "required": true,
          "selector": {
            "datetime": null
          }
        },
        "end": {
          "name": "End",
          "description": "The end time of the event",
          "example": "2025-03-22 20:30:00",
          "required": true,
          "selector": {
            "datetime": null
          }
        },
        "body": {
          "name": "Body",
          "description": "The body text for the event (optional)",
          "example": "Remember to also clean out the gutters",
          "selector": {
            "text": null
          }
        },
        "location": {
          "name": "Location",
          "description": "The location for the event (optional)",
          "example": "1600 Pennsylvania Ave Nw, Washington, DC 20500",
          "selector": {
            "text": null
          }
        },
        "categories": {
          "name": "Categories",
          "description": "list of categories for the event (optional)",
          "selector": {
            "text": null
          }
        },
        "sensitivity": {
          "name": "Sensitivity",
          "description": "The sensitivity for the event (optional) [Normal, Personal, Private, Confidential]",
          "example": "normal",
          "selector": {
            "select": {
              "mode": "dropdown",
              "options": [
                {
                  "label": "Normal",
                  "value": "normal"
                },
                {
                  "label": "Personal",
                  "value": "personal"
                },
                {
                  "label": "Private",
                  "value": "private"
                },
                {
                  "label": "Confidential",
                  "value": "confidential"
                }
              ]
            }
          }
        },
        "show_as": {
          "name": "Show As",
          "description": "Show event as (optional) [Free, Tentative, Busy, Oof, WorkingElsewhere, Unknown]",
          "example": "busy",
          "selector": {
            "select": {
              "mode": "dropdown",
              "options": [
                {
                  "label": "Free",
                  "value": "free"
                },
                {
                  "label": "Tentative",
                  "value": "tentative"
                },
                {
                  "label": "Busy",
                  "value": "busy"
                },
                {
                  "label": "Out of Office",
                  "value": "oof"
                },
                {
                  "label": "Working Elsewhere",
                  "value": "workingElsewhere"
                },
                {
                  "label": "Unknown",
                  "value": "unknown"
                }
              ]
            }
          }
        },
        "is_all_day": {
          "name": "All Day",
          "description": "Set whether event is all day (optional)",
          "example": false,
          "selector": {
            "boolean": null
          }
        },
        "attendees": {
          "name": "Attendees",
          "description": "list of attendees formatted as email: example@example.com type: Required, Optional, or Resource (optional)",
          "selector": {
            "object": null
          }
        }
      },
      "target": {
        "device": [
          {
            "integration": "o365"
          }
        ],
        "entity": [
          {
            "integration": "o365",
            "domain": [
              "calendar"
            ]
          }
        ]
      }
    },
    "modify_calendar_event": {
      "name": "Modify an event",
      "description": "Modify existing calendar event, all properties except event_id are optional.",
      "fields": {
        "event_id": {
          "name": "Event ID",
          "description": "ID for the event, can be found as an attribute on you calendar entity\u0027s events",
          "example": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "subject": {
          "name": "Subject",
          "description": "The subject of the created event",
          "example": "Clean up the garage",
          "selector": {
            "text": null
          }
        },
        "start": {
          "name": "Start",
          "description": "The start time of the event",
          "example": "2025-03-22 20:00:00",
          "selector": {
            "datetime": null
          }
        },
        "end": {
          "name": "End",
          "description": "The end time of the event",
          "example": "2025-03-22 20:30:00",
          "selector": {
            "datetime": null
          }
        },
        "body": {
          "name": "Body",
          "description": "The body text for the event",
          "example": "Remember to also clean out the gutters",
          "selector": {
            "text": null
          }
        },
        "location": {
          "name": "Location",
          "description": "The location for the event",
          "example": "1600 Pennsylvania Ave Nw, Washington, DC 20500",
          "selector": {
            "text": null
          }
        },
        "categories": {
          "name": "Categories",
          "description": "list of categories for the event",
          "selector": {
            "text": null
          }
        },
        "sensitivity": {
          "name": "Sensitivity",
          "description": "The sensitivity for the event[Normal, Personal, Private, Confidential]",
          "example": "normal",
          "selector": {
            "select": {
              "mode": "dropdown",
              "options": [
                {
                  "label": "Normal",
                  "value": "normal"
                },
                {
                  "label": "Personal",
                  "value": "personal"
                },
                {
                  "label": "Private",
                  "value": "private"
                },
                {
                  "label": "Confidential",
                  "value": "confidential"
                }
              ]
            }
          }
        },
        "show_as": {
          "name": "Show As",
          "description": "Show event as [Free, Tentative, Busy, Oof, WorkingElsewhere, Unknown]",
          "example": "busy",
          "selector": {
            "select": {
              "mode": "dropdown",
              "options": [
                {
                  "label": "Free",
                  "value": "free"
                },
                {
                  "label": "Tentative",
                  "value": "tentative"
                },
                {
                  "label": "Busy",
                  "value": "busy"
                },
                {
                  "label": "Out of Office",
                  "value": "oof"
                },
                {
                  "label": "Working Elsewhere",
                  "value": "workingElsewhere"
                },
                {
                  "label": "Unknown",
                  "value": "unknown"
                }
              ]
            }
          }
        },
        "is_all_day": {
          "name": "All Day",
          "description": "Set whether event is all day",
          "example": false,
          "selector": {
            "boolean": null
          }
        },
        "attendees": {
          "name": "Attendees",
          "description": "list of attendees formatted as email: example@example.com type: Required, Optional, or Resource",
          "selector": {
            "object": null
          }
        }
      },
      "target": {
        "device": [
          {
            "integration": "o365"
          }
        ],
        "entity": [
          {
            "integration": "o365",
            "domain": [
              "calendar"
            ]
          }
        ]
      }
    },
    "remove_calendar_event": {
      "name": "Delete an event",
      "description": "Delete calendar event",
      "fields": {
        "event_id": {
          "name": "Event ID",
          "description": "ID for the event, can be found as an attribute on you calendar entity\u0027s events",
          "example": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
          "required": true,
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "device": [
          {
            "integration": "o365"
          }
        ],
        "entity": [
          {
            "integration": "o365",
            "domain": [
              "calendar"
            ]
          }
        ]
      }
    },
    "respond_calendar_event": {
      "name": "Respond to an event",
      "description": "Respond to calendar event/invite",
      "fields": {
        "event_id": {
          "name": "Event ID",
          "description": "ID for event, can be found as an attribute on your calendar entity\u0027s events",
          "example": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "response": {
          "name": "Response",
          "description": "The response to the invite [Accept, Tentative, Decline]",
          "example": "Decline",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "message": {
          "name": "Message",
          "description": "The response message to the invite (Optional)",
          "example": "I cannot attend this meeting",
          "selector": {
            "text": null
          }
        },
        "send_response": {
          "name": "Send Response",
          "description": "Send the response to the organizer (Optional)",
          "example": true,
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "device": [
          {
            "integration": "o365"
          }
        ],
        "entity": [
          {
            "integration": "o365",
            "domain": [
              "calendar"
            ]
          }
        ]
      }
    },
    "scan_for_calendars": {
      "name": "Scan for new calendars",
      "description": "Scan for newly available calendars",
      "fields": {}
    }
  }
}