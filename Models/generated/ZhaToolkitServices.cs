//------------------------------------------------------------------------------
// <auto-generated>
// Generated using NetDaemon CodeGenerator nd-codegen v24.52.0.0
//   At: 2025-01-16T04:15:56.4465327-08:00
//
// *** Make sure the version of the codegen tool and your nugets NetDaemon.* have the same version.***
// You can use following command to keep it up to date with the latest version:
//   dotnet tool update NetDaemon.HassModel.CodeGen
//
// To update this file with latest entities run this command in your project directory:
//   dotnet tool run nd-codegen
//
// In the template projects we provided a convenience powershell script that will update
// the codegen and nugets to latest versions update_all_dependencies.ps1.
//
// For more information: https://netdaemon.xyz/docs/user/hass_model/hass_model_codegen
// For more information about NetDaemon: https://netdaemon.xyz/
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using System.Text.Json;
using System.Text.Json.Serialization;
using NetDaemon.HassModel;
using NetDaemon.HassModel.Entities;
using NetDaemon.HassModel.Entities.Core;

namespace Hammlet.NetDaemon.Models;
public partial class ZhaToolkitServices
{
    private readonly IHaContext _haContext;
    public ZhaToolkitServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Add group to endpoint groups list of device.  May be equivalent to `add_to_group`</summary>
    public void AddGroup(ZhaToolkitAddGroupParameters data)
    {
        _haContext.CallService("zha_toolkit", "add_group", null, data);
    }

    ///<summary>Add group to endpoint groups list of device.  May be equivalent to `add_to_group`</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpoint">endpoint to get information for (all endpoints when not set)</param>
    ///<param name="commandData">Group id to add eg: 2</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    public void AddGroup(string ieee, double commandData, double? endpoint = null, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null)
    {
        _haContext.CallService("zha_toolkit", "add_group", null, new ZhaToolkitAddGroupParameters { Ieee = ieee, Endpoint = endpoint, CommandData = commandData, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException });
    }

    ///<summary>Add group to endpoint groups list of device.  May be equivalent to `add_to_group`</summary>
    public Task<JsonElement?> AddGroupAsync(ZhaToolkitAddGroupParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "add_group", null, data);
    }

    ///<summary>Add group to endpoint groups list of device.  May be equivalent to `add_to_group`</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpoint">endpoint to get information for (all endpoints when not set)</param>
    ///<param name="commandData">Group id to add eg: 2</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    public Task<JsonElement?> AddGroupAsync(string ieee, double commandData, double? endpoint = null, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "add_group", null, new ZhaToolkitAddGroupParameters { Ieee = ieee, Endpoint = endpoint, CommandData = commandData, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException });
    }

    ///<summary>Add device to group</summary>
    public void AddToGroup(ZhaToolkitAddToGroupParameters data)
    {
        _haContext.CallService("zha_toolkit", "add_to_group", null, data);
    }

    ///<summary>Add device to group</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpoint">endpoint to remove group from (or all EP if not set)</param>
    ///<param name="commandData">Group id to remove eg: 2</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    public void AddToGroup(string ieee, double commandData, double? endpoint = null, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null)
    {
        _haContext.CallService("zha_toolkit", "add_to_group", null, new ZhaToolkitAddToGroupParameters { Ieee = ieee, Endpoint = endpoint, CommandData = commandData, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException });
    }

    ///<summary>Add device to group</summary>
    public Task<JsonElement?> AddToGroupAsync(ZhaToolkitAddToGroupParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "add_to_group", null, data);
    }

    ///<summary>Add device to group</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpoint">endpoint to remove group from (or all EP if not set)</param>
    ///<param name="commandData">Group id to remove eg: 2</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    public Task<JsonElement?> AddToGroupAsync(string ieee, double commandData, double? endpoint = null, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "add_to_group", null, new ZhaToolkitAddToGroupParameters { Ieee = ieee, Endpoint = endpoint, CommandData = commandData, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException });
    }

    ///<summary>Scan for all routes and neighbours, results saved to config/scans/...</summary>
    public void AllRoutesAndNeighbours(ZhaToolkitAllRoutesAndNeighboursParameters data)
    {
        _haContext.CallService("zha_toolkit", "all_routes_and_neighbours", null, data);
    }

    ///<summary>Scan for all routes and neighbours, results saved to config/scans/...</summary>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public void AllRoutesAndNeighbours(string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        _haContext.CallService("zha_toolkit", "all_routes_and_neighbours", null, new ZhaToolkitAllRoutesAndNeighboursParameters { EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    ///<summary>Scan for all routes and neighbours, results saved to config/scans/...</summary>
    public Task<JsonElement?> AllRoutesAndNeighboursAsync(ZhaToolkitAllRoutesAndNeighboursParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "all_routes_and_neighbours", null, data);
    }

    ///<summary>Scan for all routes and neighbours, results saved to config/scans/...</summary>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public Task<JsonElement?> AllRoutesAndNeighboursAsync(string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "all_routes_and_neighbours", null, new ZhaToolkitAllRoutesAndNeighboursParameters { EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    ///<summary>Read Attribute</summary>
    public void AttrRead(ZhaToolkitAttrReadParameters data)
    {
        _haContext.CallService("zha_toolkit", "attr_read", null, data);
    }

    ///<summary>Read Attribute</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node to execute command eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="manf">Manufacturer id (0 = No manufacturer id, empty=possibly automatic)</param>
    ///<param name="endpoint">target endpoint</param>
    ///<param name="cluster">target cluster</param>
    ///<param name="attribute">target attribute id (or name, accepted in most cases)</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="stateId">When defined, name of state to write the read attribute value to eg: sensor.example</param>
    ///<param name="stateAttr">When defined, attribute in state_id to write the read attribute value to.  Write to state value when missing (and state_id is defined) eg: other_attr</param>
    ///<param name="stateValueTemplate">When defined, the read attribute is converted using this template before writing it to the state. eg: value / 100</param>
    ///<param name="forceUpdate">Force an update event when the state is written When not set or false, if the state value is unchanged, the update may not trigger an automation. eg: True</param>
    ///<param name="useCache">Use zigpy attribute cache to get the value of an attribute. (Does not send a zigbee packet to read the attribute) eg: True</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="allowCreate">Allow state creation (given by state_id) if it does not exist</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    ///<param name="csvout">Filename of CSV to write read data to.  Written to &apos;csv&apos; directory eg: ../web/mycsv.csv</param>
    ///<param name="csvlabel">Label to use for read value (in CSV file) eg: SecretAttributeName</param>
    public void AttrRead(string ieee, double cluster, double attribute, double? manf = null, double? endpoint = null, double? tries = null, string? stateId = null, string? stateAttr = null, string? stateValueTemplate = null, bool? forceUpdate = null, bool? useCache = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? allowCreate = null, bool? expectReply = null, string? csvout = null, string? csvlabel = null)
    {
        _haContext.CallService("zha_toolkit", "attr_read", null, new ZhaToolkitAttrReadParameters { Ieee = ieee, Manf = manf, Endpoint = endpoint, Cluster = cluster, Attribute = attribute, Tries = tries, StateId = stateId, StateAttr = stateAttr, StateValueTemplate = stateValueTemplate, ForceUpdate = forceUpdate, UseCache = useCache, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, AllowCreate = allowCreate, ExpectReply = expectReply, Csvout = csvout, Csvlabel = csvlabel });
    }

    ///<summary>Read Attribute</summary>
    public Task<JsonElement?> AttrReadAsync(ZhaToolkitAttrReadParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "attr_read", null, data);
    }

    ///<summary>Read Attribute</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node to execute command eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="manf">Manufacturer id (0 = No manufacturer id, empty=possibly automatic)</param>
    ///<param name="endpoint">target endpoint</param>
    ///<param name="cluster">target cluster</param>
    ///<param name="attribute">target attribute id (or name, accepted in most cases)</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="stateId">When defined, name of state to write the read attribute value to eg: sensor.example</param>
    ///<param name="stateAttr">When defined, attribute in state_id to write the read attribute value to.  Write to state value when missing (and state_id is defined) eg: other_attr</param>
    ///<param name="stateValueTemplate">When defined, the read attribute is converted using this template before writing it to the state. eg: value / 100</param>
    ///<param name="forceUpdate">Force an update event when the state is written When not set or false, if the state value is unchanged, the update may not trigger an automation. eg: True</param>
    ///<param name="useCache">Use zigpy attribute cache to get the value of an attribute. (Does not send a zigbee packet to read the attribute) eg: True</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="allowCreate">Allow state creation (given by state_id) if it does not exist</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    ///<param name="csvout">Filename of CSV to write read data to.  Written to &apos;csv&apos; directory eg: ../web/mycsv.csv</param>
    ///<param name="csvlabel">Label to use for read value (in CSV file) eg: SecretAttributeName</param>
    public Task<JsonElement?> AttrReadAsync(string ieee, double cluster, double attribute, double? manf = null, double? endpoint = null, double? tries = null, string? stateId = null, string? stateAttr = null, string? stateValueTemplate = null, bool? forceUpdate = null, bool? useCache = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? allowCreate = null, bool? expectReply = null, string? csvout = null, string? csvlabel = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "attr_read", null, new ZhaToolkitAttrReadParameters { Ieee = ieee, Manf = manf, Endpoint = endpoint, Cluster = cluster, Attribute = attribute, Tries = tries, StateId = stateId, StateAttr = stateAttr, StateValueTemplate = stateValueTemplate, ForceUpdate = forceUpdate, UseCache = useCache, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, AllowCreate = allowCreate, ExpectReply = expectReply, Csvout = csvout, Csvlabel = csvlabel });
    }

    ///<summary>Write Attribute</summary>
    public void AttrWrite(ZhaToolkitAttrWriteParameters data)
    {
        _haContext.CallService("zha_toolkit", "attr_write", null, data);
    }

    ///<summary>Write Attribute</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node to execute command eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="manf">Manufacturer id (0 = No manufacturer id, empty=possibly automatic)</param>
    ///<param name="endpoint">target endpoint</param>
    ///<param name="cluster">target cluster</param>
    ///<param name="attribute">target attribute id (or name, accepted in most cases)</param>
    ///<param name="attrType">Attribute type (to write, ...)</param>
    ///<param name="attrVal">Attribute value to write</param>
    ///<param name="useCache">Use zigpy attribute cache to get the value of an attribute. (Does not send a zigbee packet to read the attribute) eg: True</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="stateId">When defined, name of state to write the read attribute value to eg: sensor.example</param>
    ///<param name="stateAttr">When defined, attribute in state_id to write the read attribute value to.  Write to state value when missing (and state_id is defined) eg: other_attr</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="allowCreate">Allow state creation (given by state_id) if it does not exist</param>
    ///<param name="readBeforeWrite">Read attribute before writing it (used with attr_write).  When the read value matches the value to write, no write is done. Defaults to True.</param>
    ///<param name="readAfterWrite">Read attribute after writing.  Can be used to ensure the values match.  Defaults to True</param>
    ///<param name="writeIfEqual">Force writing the attribute even if the read attribute already matches.  Defaults to False</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    ///<param name="csvout">Filename of CSV to write read data to.  Written to &apos;csv&apos; directory eg: ../web/mycsv.csv</param>
    ///<param name="csvlabel">Label to use for read value (in CSV file) eg: SecretAttributeName</param>
    public void AttrWrite(string ieee, double cluster, double attribute, string attrVal, double? manf = null, double? endpoint = null, double? attrType = null, bool? useCache = null, double? tries = null, string? stateId = null, string? stateAttr = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? allowCreate = null, bool? readBeforeWrite = null, bool? readAfterWrite = null, bool? writeIfEqual = null, bool? expectReply = null, string? csvout = null, string? csvlabel = null)
    {
        _haContext.CallService("zha_toolkit", "attr_write", null, new ZhaToolkitAttrWriteParameters { Ieee = ieee, Manf = manf, Endpoint = endpoint, Cluster = cluster, Attribute = attribute, AttrType = attrType, AttrVal = attrVal, UseCache = useCache, Tries = tries, StateId = stateId, StateAttr = stateAttr, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, AllowCreate = allowCreate, ReadBeforeWrite = readBeforeWrite, ReadAfterWrite = readAfterWrite, WriteIfEqual = writeIfEqual, ExpectReply = expectReply, Csvout = csvout, Csvlabel = csvlabel });
    }

    ///<summary>Write Attribute</summary>
    public Task<JsonElement?> AttrWriteAsync(ZhaToolkitAttrWriteParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "attr_write", null, data);
    }

    ///<summary>Write Attribute</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node to execute command eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="manf">Manufacturer id (0 = No manufacturer id, empty=possibly automatic)</param>
    ///<param name="endpoint">target endpoint</param>
    ///<param name="cluster">target cluster</param>
    ///<param name="attribute">target attribute id (or name, accepted in most cases)</param>
    ///<param name="attrType">Attribute type (to write, ...)</param>
    ///<param name="attrVal">Attribute value to write</param>
    ///<param name="useCache">Use zigpy attribute cache to get the value of an attribute. (Does not send a zigbee packet to read the attribute) eg: True</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="stateId">When defined, name of state to write the read attribute value to eg: sensor.example</param>
    ///<param name="stateAttr">When defined, attribute in state_id to write the read attribute value to.  Write to state value when missing (and state_id is defined) eg: other_attr</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="allowCreate">Allow state creation (given by state_id) if it does not exist</param>
    ///<param name="readBeforeWrite">Read attribute before writing it (used with attr_write).  When the read value matches the value to write, no write is done. Defaults to True.</param>
    ///<param name="readAfterWrite">Read attribute after writing.  Can be used to ensure the values match.  Defaults to True</param>
    ///<param name="writeIfEqual">Force writing the attribute even if the read attribute already matches.  Defaults to False</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    ///<param name="csvout">Filename of CSV to write read data to.  Written to &apos;csv&apos; directory eg: ../web/mycsv.csv</param>
    ///<param name="csvlabel">Label to use for read value (in CSV file) eg: SecretAttributeName</param>
    public Task<JsonElement?> AttrWriteAsync(string ieee, double cluster, double attribute, string attrVal, double? manf = null, double? endpoint = null, double? attrType = null, bool? useCache = null, double? tries = null, string? stateId = null, string? stateAttr = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? allowCreate = null, bool? readBeforeWrite = null, bool? readAfterWrite = null, bool? writeIfEqual = null, bool? expectReply = null, string? csvout = null, string? csvlabel = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "attr_write", null, new ZhaToolkitAttrWriteParameters { Ieee = ieee, Manf = manf, Endpoint = endpoint, Cluster = cluster, Attribute = attribute, AttrType = attrType, AttrVal = attrVal, UseCache = useCache, Tries = tries, StateId = stateId, StateAttr = stateAttr, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, AllowCreate = allowCreate, ReadBeforeWrite = readBeforeWrite, ReadAfterWrite = readAfterWrite, WriteIfEqual = writeIfEqual, ExpectReply = expectReply, Csvout = csvout, Csvlabel = csvlabel });
    }

    ///<summary>Backup coordinator data (znp, bellows/ezsp)</summary>
    public void Backup(ZhaToolkitBackupParameters data)
    {
        _haContext.CallService("zha_toolkit", "backup", null, data);
    }

    ///<summary>Backup coordinator data (znp, bellows/ezsp)</summary>
    ///<param name="commandData">Suffix for backup file eg: _bathroom_added</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public void Backup(string? commandData = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        _haContext.CallService("zha_toolkit", "backup", null, new ZhaToolkitBackupParameters { CommandData = commandData, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    ///<summary>Backup coordinator data (znp, bellows/ezsp)</summary>
    public Task<JsonElement?> BackupAsync(ZhaToolkitBackupParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "backup", null, data);
    }

    ///<summary>Backup coordinator data (znp, bellows/ezsp)</summary>
    ///<param name="commandData">Suffix for backup file eg: _bathroom_added</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public Task<JsonElement?> BackupAsync(string? commandData = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "backup", null, new ZhaToolkitBackupParameters { CommandData = commandData, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    ///<summary>Bind clusters from ieee device to command_data device</summary>
    public void BindGroup(ZhaToolkitBindGroupParameters data)
    {
        _haContext.CallService("zha_toolkit", "bind_group", null, data);
    }

    ///<summary>Bind clusters from ieee device to command_data device</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node to execute command eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="commandData">Target group for binding eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpoint">Target endpoint (when missing: all endpoints)</param>
    ///<param name="cluster">Target cluster (when missing: all internally defined cluster)</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public void BindGroup(string ieee, double commandData, double? endpoint = null, double? cluster = null, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        _haContext.CallService("zha_toolkit", "bind_group", null, new ZhaToolkitBindGroupParameters { Ieee = ieee, CommandData = commandData, Endpoint = endpoint, Cluster = cluster, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    ///<summary>Bind clusters from ieee device to command_data device</summary>
    public Task<JsonElement?> BindGroupAsync(ZhaToolkitBindGroupParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "bind_group", null, data);
    }

    ///<summary>Bind clusters from ieee device to command_data device</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node to execute command eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="commandData">Target group for binding eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpoint">Target endpoint (when missing: all endpoints)</param>
    ///<param name="cluster">Target cluster (when missing: all internally defined cluster)</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public Task<JsonElement?> BindGroupAsync(string ieee, double commandData, double? endpoint = null, double? cluster = null, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "bind_group", null, new ZhaToolkitBindGroupParameters { Ieee = ieee, CommandData = commandData, Endpoint = endpoint, Cluster = cluster, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    ///<summary>Bind clusters from ieee device to command_data device</summary>
    public void BindIeee(ZhaToolkitBindIeeeParameters data)
    {
        _haContext.CallService("zha_toolkit", "bind_ieee", null, data);
    }

    ///<summary>Bind clusters from ieee device to command_data device</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node to execute command eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="commandData">Binding target (Entity name, device name, or IEEE address of the node to execute command).  By default: coordinator eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpoint">Target endpoint (when missing: all endpoints)</param>
    ///<param name="dstEndpoint">Destination endpoint (when missing: first EP with matching cluster)</param>
    ///<param name="cluster">Target cluster (or all internally defined ones)</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public void BindIeee(string ieee, string? commandData = null, double? endpoint = null, double? dstEndpoint = null, double? cluster = null, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        _haContext.CallService("zha_toolkit", "bind_ieee", null, new ZhaToolkitBindIeeeParameters { Ieee = ieee, CommandData = commandData, Endpoint = endpoint, DstEndpoint = dstEndpoint, Cluster = cluster, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    ///<summary>Bind clusters from ieee device to command_data device</summary>
    public Task<JsonElement?> BindIeeeAsync(ZhaToolkitBindIeeeParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "bind_ieee", null, data);
    }

    ///<summary>Bind clusters from ieee device to command_data device</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node to execute command eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="commandData">Binding target (Entity name, device name, or IEEE address of the node to execute command).  By default: coordinator eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpoint">Target endpoint (when missing: all endpoints)</param>
    ///<param name="dstEndpoint">Destination endpoint (when missing: first EP with matching cluster)</param>
    ///<param name="cluster">Target cluster (or all internally defined ones)</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public Task<JsonElement?> BindIeeeAsync(string ieee, string? commandData = null, double? endpoint = null, double? dstEndpoint = null, double? cluster = null, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "bind_ieee", null, new ZhaToolkitBindIeeeParameters { Ieee = ieee, CommandData = commandData, Endpoint = endpoint, DstEndpoint = dstEndpoint, Cluster = cluster, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    ///<summary>Get binding table from device.</summary>
    public void BindsGet(ZhaToolkitBindsGetParameters data)
    {
        _haContext.CallService("zha_toolkit", "binds_get", null, data);
    }

    ///<summary>Get binding table from device.</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node to execute command eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public void BindsGet(string ieee, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        _haContext.CallService("zha_toolkit", "binds_get", null, new ZhaToolkitBindsGetParameters { Ieee = ieee, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    ///<summary>Get binding table from device.</summary>
    public Task<JsonElement?> BindsGetAsync(ZhaToolkitBindsGetParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "binds_get", null, data);
    }

    ///<summary>Get binding table from device.</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node to execute command eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public Task<JsonElement?> BindsGetAsync(string ieee, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "binds_get", null, new ZhaToolkitBindsGetParameters { Ieee = ieee, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    ///<summary>Remove (Unbind) all bindings from device</summary>
    public void BindsRemoveAll(ZhaToolkitBindsRemoveAllParameters data)
    {
        _haContext.CallService("zha_toolkit", "binds_remove_all", null, data);
    }

    ///<summary>Remove (Unbind) all bindings from device</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node to execute command eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="commandData">When provided, remove only bindings towards this device (Entity name, device name, or IEEE address of the binding destination) eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpoint">When provided, remove only bindings for this endpoint or list of endpoints (single value or list. Example: 20 or [20, 30]) Otherwise: removes bindings for all endpoints</param>
    ///<param name="cluster">When provided, remove only bindings for this cluster or list of clusters (single value or list. Example: 0x0200 or [0x200, 0x300]) Otherwise: removes bindings for all clusters</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public void BindsRemoveAll(string ieee, string? commandData = null, double? endpoint = null, double? cluster = null, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        _haContext.CallService("zha_toolkit", "binds_remove_all", null, new ZhaToolkitBindsRemoveAllParameters { Ieee = ieee, CommandData = commandData, Endpoint = endpoint, Cluster = cluster, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    ///<summary>Remove (Unbind) all bindings from device</summary>
    public Task<JsonElement?> BindsRemoveAllAsync(ZhaToolkitBindsRemoveAllParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "binds_remove_all", null, data);
    }

    ///<summary>Remove (Unbind) all bindings from device</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node to execute command eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="commandData">When provided, remove only bindings towards this device (Entity name, device name, or IEEE address of the binding destination) eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpoint">When provided, remove only bindings for this endpoint or list of endpoints (single value or list. Example: 20 or [20, 30]) Otherwise: removes bindings for all endpoints</param>
    ///<param name="cluster">When provided, remove only bindings for this cluster or list of clusters (single value or list. Example: 0x0200 or [0x200, 0x300]) Otherwise: removes bindings for all clusters</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public Task<JsonElement?> BindsRemoveAllAsync(string ieee, string? commandData = null, double? endpoint = null, double? cluster = null, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "binds_remove_all", null, new ZhaToolkitBindsRemoveAllParameters { Ieee = ieee, CommandData = commandData, Endpoint = endpoint, Cluster = cluster, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    ///<summary>Configure attribute reporting. You can set a high value for tries (100 or more) for sleepy devices.&quot;</summary>
    public void ConfReport(ZhaToolkitConfReportParameters data)
    {
        _haContext.CallService("zha_toolkit", "conf_report", null, data);
    }

    ///<summary>Configure attribute reporting. You can set a high value for tries (100 or more) for sleepy devices.&quot;</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node to execute command&quot; eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpoint">target endpoint</param>
    ///<param name="cluster">target cluster</param>
    ///<param name="attribute">target attribute id (or name, accepted in most cases)</param>
    ///<param name="minInterval">Minimum report interval (seconds)</param>
    ///<param name="maxInterval">Maximum report interval (seconds)</param>
    ///<param name="reportableChange">Minimum change before reporting</param>
    ///<param name="manf">Manufacturer id (0 = No manufacturer id, empty=possibly automatic)</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public void ConfReport(string ieee, double cluster, double attribute, double minInterval, double maxInterval, double reportableChange, double? endpoint = null, double? manf = null, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        _haContext.CallService("zha_toolkit", "conf_report", null, new ZhaToolkitConfReportParameters { Ieee = ieee, Endpoint = endpoint, Cluster = cluster, Attribute = attribute, MinInterval = minInterval, MaxInterval = maxInterval, ReportableChange = reportableChange, Manf = manf, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    ///<summary>Configure attribute reporting. You can set a high value for tries (100 or more) for sleepy devices.&quot;</summary>
    public Task<JsonElement?> ConfReportAsync(ZhaToolkitConfReportParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "conf_report", null, data);
    }

    ///<summary>Configure attribute reporting. You can set a high value for tries (100 or more) for sleepy devices.&quot;</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node to execute command&quot; eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpoint">target endpoint</param>
    ///<param name="cluster">target cluster</param>
    ///<param name="attribute">target attribute id (or name, accepted in most cases)</param>
    ///<param name="minInterval">Minimum report interval (seconds)</param>
    ///<param name="maxInterval">Maximum report interval (seconds)</param>
    ///<param name="reportableChange">Minimum change before reporting</param>
    ///<param name="manf">Manufacturer id (0 = No manufacturer id, empty=possibly automatic)</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public Task<JsonElement?> ConfReportAsync(string ieee, double cluster, double attribute, double minInterval, double maxInterval, double reportableChange, double? endpoint = null, double? manf = null, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "conf_report", null, new ZhaToolkitConfReportParameters { Ieee = ieee, Endpoint = endpoint, Cluster = cluster, Attribute = attribute, MinInterval = minInterval, MaxInterval = maxInterval, ReportableChange = reportableChange, Manf = manf, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    ///<summary>Read attribute report configuration You can set a high value for tries (100 or more) for sleepy devices.&quot;</summary>
    public void ConfReportRead(ZhaToolkitConfReportReadParameters data)
    {
        _haContext.CallService("zha_toolkit", "conf_report_read", null, data);
    }

    ///<summary>Read attribute report configuration You can set a high value for tries (100 or more) for sleepy devices.&quot;</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node to execute command&quot; eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpoint">target endpoint</param>
    ///<param name="cluster">target cluster</param>
    ///<param name="attribute">target attribute id (or name, accepted in most cases), can be a list</param>
    ///<param name="manf">Manufacturer id (0 = No manufacturer id, empty=possibly automatic)</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public void ConfReportRead(string ieee, double cluster, double attribute, double? endpoint = null, double? manf = null, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        _haContext.CallService("zha_toolkit", "conf_report_read", null, new ZhaToolkitConfReportReadParameters { Ieee = ieee, Endpoint = endpoint, Cluster = cluster, Attribute = attribute, Manf = manf, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    ///<summary>Read attribute report configuration You can set a high value for tries (100 or more) for sleepy devices.&quot;</summary>
    public Task<JsonElement?> ConfReportReadAsync(ZhaToolkitConfReportReadParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "conf_report_read", null, data);
    }

    ///<summary>Read attribute report configuration You can set a high value for tries (100 or more) for sleepy devices.&quot;</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node to execute command&quot; eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpoint">target endpoint</param>
    ///<param name="cluster">target cluster</param>
    ///<param name="attribute">target attribute id (or name, accepted in most cases), can be a list</param>
    ///<param name="manf">Manufacturer id (0 = No manufacturer id, empty=possibly automatic)</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public Task<JsonElement?> ConfReportReadAsync(string ieee, double cluster, double attribute, double? endpoint = null, double? manf = null, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "conf_report_read", null, new ZhaToolkitConfReportReadParameters { Ieee = ieee, Endpoint = endpoint, Cluster = cluster, Attribute = attribute, Manf = manf, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    ///<summary>Execute ZHA Toolkit service (Examine the documentation or code to know which parameters are needed)</summary>
    public void Execute(ZhaToolkitExecuteParameters data)
    {
        _haContext.CallService("zha_toolkit", "execute", null, data);
    }

    ///<summary>Execute ZHA Toolkit service (Examine the documentation or code to know which parameters are needed)</summary>
    ///<param name="command">Command name eg: scan_device</param>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node to execute command eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="commandData">data for the command (specific command. Example, second IEEE address for binding) eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="manf">Manufacturer id (0 = No manufacturer id, empty=possibly automatic)</param>
    ///<param name="cmd">Command Id (zcl_cmd)</param>
    ///<param name="endpoint">target endpoint</param>
    ///<param name="dstEndpoint">destination endpoint</param>
    ///<param name="cluster">target cluster</param>
    ///<param name="attribute">target attribute id (or name, accepted in most cases)</param>
    ///<param name="attrType">Attribute type (to write, ...)</param>
    ///<param name="attrVal">Attribute value to write</param>
    ///<param name="minInterval">Minimum report interval (seconds)</param>
    ///<param name="maxInterval">Maximum report interval (seconds)</param>
    ///<param name="reportableChange">Minimum change before reporting</param>
    ///<param name="dir">Direction indicator, according to command</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="stateId">When defined, name of state to write the read attribute value to eg: sensor.example</param>
    ///<param name="stateAttr">When defined, attribute in state_id to write the read attribute value to.  Write to state value when missing (and state_id is defined) eg: other_attr</param>
    ///<param name="stateValueTemplate">When defined, the read attribute is converted using this template before writing it to the state. eg: value / 100</param>
    ///<param name="forceUpdate">Force an update event when the state is written When not set or false, if the state value is unchanged, the update may not trigger an automation. eg: True</param>
    ///<param name="useCache">Use zigpy attribute cache to get the value of an attribute. (Does not send a zigbee packet to read the attribute) eg: True</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="allowCreate">Allow state creation (given by state_id) if it does not exist</param>
    ///<param name="readBeforeWrite">Read attribute before writing it (used with attr_write).  When the read value matches the value to write, no write is done. Defaults to True.</param>
    ///<param name="readAfterWrite">Read attribute after writing.  Can be used to ensure the values match.  Defaults to True</param>
    ///<param name="writeIfEqual">Force writing the attribute even if the read attribute already matches.  Defaults to False</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    ///<param name="csvout">Filename of CSV to write read data to.  Written to &apos;csv&apos; directory eg: ../web/mycsv.csv</param>
    ///<param name="csvlabel">Label to use for read value (in CSV file) eg: SecretAttributeName</param>
    public void Execute(object command, string? ieee = null, string? commandData = null, double? manf = null, double? cmd = null, double? endpoint = null, double? dstEndpoint = null, double? cluster = null, double? attribute = null, double? attrType = null, string? attrVal = null, double? minInterval = null, double? maxInterval = null, double? reportableChange = null, double? dir = null, double? tries = null, string? stateId = null, string? stateAttr = null, string? stateValueTemplate = null, bool? forceUpdate = null, bool? useCache = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? allowCreate = null, bool? readBeforeWrite = null, bool? readAfterWrite = null, bool? writeIfEqual = null, bool? expectReply = null, string? csvout = null, string? csvlabel = null)
    {
        _haContext.CallService("zha_toolkit", "execute", null, new ZhaToolkitExecuteParameters { Command = command, Ieee = ieee, CommandData = commandData, Manf = manf, Cmd = cmd, Endpoint = endpoint, DstEndpoint = dstEndpoint, Cluster = cluster, Attribute = attribute, AttrType = attrType, AttrVal = attrVal, MinInterval = minInterval, MaxInterval = maxInterval, ReportableChange = reportableChange, Dir = dir, Tries = tries, StateId = stateId, StateAttr = stateAttr, StateValueTemplate = stateValueTemplate, ForceUpdate = forceUpdate, UseCache = useCache, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, AllowCreate = allowCreate, ReadBeforeWrite = readBeforeWrite, ReadAfterWrite = readAfterWrite, WriteIfEqual = writeIfEqual, ExpectReply = expectReply, Csvout = csvout, Csvlabel = csvlabel });
    }

    ///<summary>Execute ZHA Toolkit service (Examine the documentation or code to know which parameters are needed)</summary>
    public Task<JsonElement?> ExecuteAsync(ZhaToolkitExecuteParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "execute", null, data);
    }

    ///<summary>Execute ZHA Toolkit service (Examine the documentation or code to know which parameters are needed)</summary>
    ///<param name="command">Command name eg: scan_device</param>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node to execute command eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="commandData">data for the command (specific command. Example, second IEEE address for binding) eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="manf">Manufacturer id (0 = No manufacturer id, empty=possibly automatic)</param>
    ///<param name="cmd">Command Id (zcl_cmd)</param>
    ///<param name="endpoint">target endpoint</param>
    ///<param name="dstEndpoint">destination endpoint</param>
    ///<param name="cluster">target cluster</param>
    ///<param name="attribute">target attribute id (or name, accepted in most cases)</param>
    ///<param name="attrType">Attribute type (to write, ...)</param>
    ///<param name="attrVal">Attribute value to write</param>
    ///<param name="minInterval">Minimum report interval (seconds)</param>
    ///<param name="maxInterval">Maximum report interval (seconds)</param>
    ///<param name="reportableChange">Minimum change before reporting</param>
    ///<param name="dir">Direction indicator, according to command</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="stateId">When defined, name of state to write the read attribute value to eg: sensor.example</param>
    ///<param name="stateAttr">When defined, attribute in state_id to write the read attribute value to.  Write to state value when missing (and state_id is defined) eg: other_attr</param>
    ///<param name="stateValueTemplate">When defined, the read attribute is converted using this template before writing it to the state. eg: value / 100</param>
    ///<param name="forceUpdate">Force an update event when the state is written When not set or false, if the state value is unchanged, the update may not trigger an automation. eg: True</param>
    ///<param name="useCache">Use zigpy attribute cache to get the value of an attribute. (Does not send a zigbee packet to read the attribute) eg: True</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="allowCreate">Allow state creation (given by state_id) if it does not exist</param>
    ///<param name="readBeforeWrite">Read attribute before writing it (used with attr_write).  When the read value matches the value to write, no write is done. Defaults to True.</param>
    ///<param name="readAfterWrite">Read attribute after writing.  Can be used to ensure the values match.  Defaults to True</param>
    ///<param name="writeIfEqual">Force writing the attribute even if the read attribute already matches.  Defaults to False</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    ///<param name="csvout">Filename of CSV to write read data to.  Written to &apos;csv&apos; directory eg: ../web/mycsv.csv</param>
    ///<param name="csvlabel">Label to use for read value (in CSV file) eg: SecretAttributeName</param>
    public Task<JsonElement?> ExecuteAsync(object command, string? ieee = null, string? commandData = null, double? manf = null, double? cmd = null, double? endpoint = null, double? dstEndpoint = null, double? cluster = null, double? attribute = null, double? attrType = null, string? attrVal = null, double? minInterval = null, double? maxInterval = null, double? reportableChange = null, double? dir = null, double? tries = null, string? stateId = null, string? stateAttr = null, string? stateValueTemplate = null, bool? forceUpdate = null, bool? useCache = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? allowCreate = null, bool? readBeforeWrite = null, bool? readAfterWrite = null, bool? writeIfEqual = null, bool? expectReply = null, string? csvout = null, string? csvlabel = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "execute", null, new ZhaToolkitExecuteParameters { Command = command, Ieee = ieee, CommandData = commandData, Manf = manf, Cmd = cmd, Endpoint = endpoint, DstEndpoint = dstEndpoint, Cluster = cluster, Attribute = attribute, AttrType = attrType, AttrVal = attrVal, MinInterval = minInterval, MaxInterval = maxInterval, ReportableChange = reportableChange, Dir = dir, Tries = tries, StateId = stateId, StateAttr = stateAttr, StateValueTemplate = stateValueTemplate, ForceUpdate = forceUpdate, UseCache = useCache, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, AllowCreate = allowCreate, ReadBeforeWrite = readBeforeWrite, ReadAfterWrite = readAfterWrite, WriteIfEqual = writeIfEqual, ExpectReply = expectReply, Csvout = csvout, Csvlabel = csvlabel });
    }

    public void EzspAddKey(object? data = null)
    {
        _haContext.CallService("zha_toolkit", "ezsp_add_key", null, data);
    }

    public Task<JsonElement?> EzspAddKeyAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "ezsp_add_key", null, data);
    }

    ///<summary>Backup coordinator data (bellows/ezsp)</summary>
    public void EzspBackup(ZhaToolkitEzspBackupParameters data)
    {
        _haContext.CallService("zha_toolkit", "ezsp_backup", null, data);
    }

    ///<summary>Backup coordinator data (bellows/ezsp)</summary>
    ///<param name="commandData">Suffix for backup file eg: _bathroom_added</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public void EzspBackup(string? commandData = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        _haContext.CallService("zha_toolkit", "ezsp_backup", null, new ZhaToolkitEzspBackupParameters { CommandData = commandData, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    ///<summary>Backup coordinator data (bellows/ezsp)</summary>
    public Task<JsonElement?> EzspBackupAsync(ZhaToolkitEzspBackupParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "ezsp_backup", null, data);
    }

    ///<summary>Backup coordinator data (bellows/ezsp)</summary>
    ///<param name="commandData">Suffix for backup file eg: _bathroom_added</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public Task<JsonElement?> EzspBackupAsync(string? commandData = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "ezsp_backup", null, new ZhaToolkitEzspBackupParameters { CommandData = commandData, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    public void EzspClearKeys(object? data = null)
    {
        _haContext.CallService("zha_toolkit", "ezsp_clear_keys", null, data);
    }

    public Task<JsonElement?> EzspClearKeysAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "ezsp_clear_keys", null, data);
    }

    public void EzspGetConfigValue(object? data = null)
    {
        _haContext.CallService("zha_toolkit", "ezsp_get_config_value", null, data);
    }

    public Task<JsonElement?> EzspGetConfigValueAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "ezsp_get_config_value", null, data);
    }

    public void EzspGetIeeeByNwk(object? data = null)
    {
        _haContext.CallService("zha_toolkit", "ezsp_get_ieee_by_nwk", null, data);
    }

    public Task<JsonElement?> EzspGetIeeeByNwkAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "ezsp_get_ieee_by_nwk", null, data);
    }

    public void EzspGetKeys(object? data = null)
    {
        _haContext.CallService("zha_toolkit", "ezsp_get_keys", null, data);
    }

    public Task<JsonElement?> EzspGetKeysAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "ezsp_get_keys", null, data);
    }

    public void EzspGetPolicy(object? data = null)
    {
        _haContext.CallService("zha_toolkit", "ezsp_get_policy", null, data);
    }

    public Task<JsonElement?> EzspGetPolicyAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "ezsp_get_policy", null, data);
    }

    public void EzspGetToken(object? data = null)
    {
        _haContext.CallService("zha_toolkit", "ezsp_get_token", null, data);
    }

    public Task<JsonElement?> EzspGetTokenAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "ezsp_get_token", null, data);
    }

    public void EzspGetValue(object? data = null)
    {
        _haContext.CallService("zha_toolkit", "ezsp_get_value", null, data);
    }

    public Task<JsonElement?> EzspGetValueAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "ezsp_get_value", null, data);
    }

    public void EzspSetChannel(object? data = null)
    {
        _haContext.CallService("zha_toolkit", "ezsp_set_channel", null, data);
    }

    public Task<JsonElement?> EzspSetChannelAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "ezsp_set_channel", null, data);
    }

    public void EzspStartMfg(object? data = null)
    {
        _haContext.CallService("zha_toolkit", "ezsp_start_mfg", null, data);
    }

    public Task<JsonElement?> EzspStartMfgAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "ezsp_start_mfg", null, data);
    }

    ///<summary>Get groups set on the endpoints of the device</summary>
    public void GetGroups(ZhaToolkitGetGroupsParameters data)
    {
        _haContext.CallService("zha_toolkit", "get_groups", null, data);
    }

    ///<summary>Get groups set on the endpoints of the device</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpoint">endpoint to get information for (all endpoints when not set)</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    public void GetGroups(string ieee, double? endpoint = null, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null)
    {
        _haContext.CallService("zha_toolkit", "get_groups", null, new ZhaToolkitGetGroupsParameters { Ieee = ieee, Endpoint = endpoint, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException });
    }

    ///<summary>Get groups set on the endpoints of the device</summary>
    public Task<JsonElement?> GetGroupsAsync(ZhaToolkitGetGroupsParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "get_groups", null, data);
    }

    ///<summary>Get groups set on the endpoints of the device</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpoint">endpoint to get information for (all endpoints when not set)</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    public Task<JsonElement?> GetGroupsAsync(string ieee, double? endpoint = null, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "get_groups", null, new ZhaToolkitGetGroupsParameters { Ieee = ieee, Endpoint = endpoint, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException });
    }

    ///<summary>Scan for all routes and neighbours, results saved to config/scans/...</summary>
    public void GetRoutesAndNeighbours(ZhaToolkitGetRoutesAndNeighboursParameters data)
    {
        _haContext.CallService("zha_toolkit", "get_routes_and_neighbours", null, data);
    }

    ///<summary>Scan for all routes and neighbours, results saved to config/scans/...</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public void GetRoutesAndNeighbours(string ieee, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        _haContext.CallService("zha_toolkit", "get_routes_and_neighbours", null, new ZhaToolkitGetRoutesAndNeighboursParameters { Ieee = ieee, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    ///<summary>Scan for all routes and neighbours, results saved to config/scans/...</summary>
    public Task<JsonElement?> GetRoutesAndNeighboursAsync(ZhaToolkitGetRoutesAndNeighboursParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "get_routes_and_neighbours", null, data);
    }

    ///<summary>Scan for all routes and neighbours, results saved to config/scans/...</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public Task<JsonElement?> GetRoutesAndNeighboursAsync(string ieee, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "get_routes_and_neighbours", null, new ZhaToolkitGetRoutesAndNeighboursParameters { Ieee = ieee, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    ///<summary>Get groups for zll_cluster (if present)</summary>
    public void GetZllGroups(ZhaToolkitGetZllGroupsParameters data)
    {
        _haContext.CallService("zha_toolkit", "get_zll_groups", null, data);
    }

    ///<summary>Get groups for zll_cluster (if present)</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    public void GetZllGroups(string ieee, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null)
    {
        _haContext.CallService("zha_toolkit", "get_zll_groups", null, new ZhaToolkitGetZllGroupsParameters { Ieee = ieee, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException });
    }

    ///<summary>Get groups for zll_cluster (if present)</summary>
    public Task<JsonElement?> GetZllGroupsAsync(ZhaToolkitGetZllGroupsParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "get_zll_groups", null, data);
    }

    ///<summary>Get groups for zll_cluster (if present)</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    public Task<JsonElement?> GetZllGroupsAsync(string ieee, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "get_zll_groups", null, new ZhaToolkitGetZllGroupsParameters { Ieee = ieee, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException });
    }

    ///<summary>Set/update a Home Assistant state</summary>
    public void HaSetState(ZhaToolkitHaSetStateParameters data)
    {
        _haContext.CallService("zha_toolkit", "ha_set_state", null, data);
    }

    ///<summary>Set/update a Home Assistant state</summary>
    ///<param name="attrVal">value to write to the state (or use in the template)</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="stateId">Name of state to write the read attribute value to eg: sensor.example</param>
    ///<param name="stateAttr">When defined, attribute in state_id to write the read attribute value to.  Write to state value when missing (and state_id is defined) eg: other_attr</param>
    ///<param name="stateValueTemplate">When defined, used as a template expression. For example &quot;value + 10&quot; will be internally interpreted as &quot;{{ value + 10 }}&quot; where &apos;value&apos; is substituted with the value for &apos;attr_val&apos; eg: value + 10</param>
    ///<param name="allowCreate">Allow state creation (given by state_id) if it does not exist</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="csvout">Filename of CSV to write the update state information to.  Written to &apos;csv&apos; directory. eg: ../web/mystatecsv.csv</param>
    ///<param name="csvlabel">Label to designate value written (in CSV file) eg: Updated from zha_toolkit.ha_set_state</param>
    public void HaSetState(string attrVal, string stateId, double? tries = null, string? stateAttr = null, string? stateValueTemplate = null, bool? allowCreate = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, string? csvout = null, string? csvlabel = null)
    {
        _haContext.CallService("zha_toolkit", "ha_set_state", null, new ZhaToolkitHaSetStateParameters { AttrVal = attrVal, Tries = tries, StateId = stateId, StateAttr = stateAttr, StateValueTemplate = stateValueTemplate, AllowCreate = allowCreate, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, Csvout = csvout, Csvlabel = csvlabel });
    }

    ///<summary>Set/update a Home Assistant state</summary>
    public Task<JsonElement?> HaSetStateAsync(ZhaToolkitHaSetStateParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "ha_set_state", null, data);
    }

    ///<summary>Set/update a Home Assistant state</summary>
    ///<param name="attrVal">value to write to the state (or use in the template)</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="stateId">Name of state to write the read attribute value to eg: sensor.example</param>
    ///<param name="stateAttr">When defined, attribute in state_id to write the read attribute value to.  Write to state value when missing (and state_id is defined) eg: other_attr</param>
    ///<param name="stateValueTemplate">When defined, used as a template expression. For example &quot;value + 10&quot; will be internally interpreted as &quot;{{ value + 10 }}&quot; where &apos;value&apos; is substituted with the value for &apos;attr_val&apos; eg: value + 10</param>
    ///<param name="allowCreate">Allow state creation (given by state_id) if it does not exist</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="csvout">Filename of CSV to write the update state information to.  Written to &apos;csv&apos; directory. eg: ../web/mystatecsv.csv</param>
    ///<param name="csvlabel">Label to designate value written (in CSV file) eg: Updated from zha_toolkit.ha_set_state</param>
    public Task<JsonElement?> HaSetStateAsync(string attrVal, string stateId, double? tries = null, string? stateAttr = null, string? stateValueTemplate = null, bool? allowCreate = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, string? csvout = null, string? csvlabel = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "ha_set_state", null, new ZhaToolkitHaSetStateParameters { AttrVal = attrVal, Tries = tries, StateId = stateId, StateAttr = stateAttr, StateValueTemplate = stateValueTemplate, AllowCreate = allowCreate, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, Csvout = csvout, Csvlabel = csvlabel });
    }

    ///<summary>Handle join (ZHA should re-interrogate the device as on new join)</summary>
    public void HandleJoin(ZhaToolkitHandleJoinParameters data)
    {
        _haContext.CallService("zha_toolkit", "handle_join", null, data);
    }

    ///<summary>Handle join (ZHA should re-interrogate the device as on new join)</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node to execute command eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="commandData">Short network address of the device (optional, if known in ZHA)</param>
    public void HandleJoin(string ieee, double? commandData = null)
    {
        _haContext.CallService("zha_toolkit", "handle_join", null, new ZhaToolkitHandleJoinParameters { Ieee = ieee, CommandData = commandData });
    }

    ///<summary>Handle join (ZHA should re-interrogate the device as on new join)</summary>
    public Task<JsonElement?> HandleJoinAsync(ZhaToolkitHandleJoinParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "handle_join", null, data);
    }

    ///<summary>Handle join (ZHA should re-interrogate the device as on new join)</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node to execute command eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="commandData">Short network address of the device (optional, if known in ZHA)</param>
    public Task<JsonElement?> HandleJoinAsync(string ieee, double? commandData = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "handle_join", null, new ZhaToolkitHandleJoinParameters { Ieee = ieee, CommandData = commandData });
    }

    ///<summary>Ping device</summary>
    public void IeeePing(ZhaToolkitIeeePingParameters data)
    {
        _haContext.CallService("zha_toolkit", "ieee_ping", null, data);
    }

    ///<summary>Ping device</summary>
    ///<param name="ieee">Ping: Requests IEEE address (using the known NWK Address) eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public void IeeePing(string ieee, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        _haContext.CallService("zha_toolkit", "ieee_ping", null, new ZhaToolkitIeeePingParameters { Ieee = ieee, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    ///<summary>Ping device</summary>
    public Task<JsonElement?> IeeePingAsync(ZhaToolkitIeeePingParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "ieee_ping", null, data);
    }

    ///<summary>Ping device</summary>
    ///<param name="ieee">Ping: Requests IEEE address (using the known NWK Address) eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public Task<JsonElement?> IeeePingAsync(string ieee, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "ieee_ping", null, new ZhaToolkitIeeePingParameters { Ieee = ieee, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    ///<summary>Send a Leave request to the device</summary>
    public void Leave(ZhaToolkitLeaveParameters data)
    {
        _haContext.CallService("zha_toolkit", "leave", null, data);
    }

    ///<summary>Send a Leave request to the device</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node to leave the network eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="commandData">(Parent) Node (router) that removes the device of the node) eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public void Leave(string ieee, string commandData, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        _haContext.CallService("zha_toolkit", "leave", null, new ZhaToolkitLeaveParameters { Ieee = ieee, CommandData = commandData, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    ///<summary>Send a Leave request to the device</summary>
    public Task<JsonElement?> LeaveAsync(ZhaToolkitLeaveParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "leave", null, data);
    }

    ///<summary>Send a Leave request to the device</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node to leave the network eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="commandData">(Parent) Node (router) that removes the device of the node) eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public Task<JsonElement?> LeaveAsync(string ieee, string commandData, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "leave", null, new ZhaToolkitLeaveParameters { Ieee = ieee, CommandData = commandData, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    ///<summary>Reinitialize device</summary>
    public void MiscReinitialize(ZhaToolkitMiscReinitializeParameters data)
    {
        _haContext.CallService("zha_toolkit", "misc_reinitialize", null, data);
    }

    ///<summary>Reinitialize device</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node to execute command&quot; eg: 00:0d:6f:00:05:7d:2d:34</param>
    public void MiscReinitialize(string ieee)
    {
        _haContext.CallService("zha_toolkit", "misc_reinitialize", null, new ZhaToolkitMiscReinitializeParameters { Ieee = ieee });
    }

    ///<summary>Reinitialize device</summary>
    public Task<JsonElement?> MiscReinitializeAsync(ZhaToolkitMiscReinitializeParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "misc_reinitialize", null, data);
    }

    ///<summary>Reinitialize device</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node to execute command&quot; eg: 00:0d:6f:00:05:7d:2d:34</param>
    public Task<JsonElement?> MiscReinitializeAsync(string ieee)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "misc_reinitialize", null, new ZhaToolkitMiscReinitializeParameters { Ieee = ieee });
    }

    ///<summary>Set Time Cluster attributes (Time, DST - except TimeStatus)</summary>
    public void MiscSettime(ZhaToolkitMiscSettimeParameters data)
    {
        _haContext.CallService("zha_toolkit", "misc_settime", null, data);
    }

    ///<summary>Set Time Cluster attributes (Time, DST - except TimeStatus)</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpoint">target endpoint</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="readBeforeWrite">Read attributes before writing them</param>
    ///<param name="readAfterWrite">Read attribute after writing.  Can be used to ensure the values match.  Defaults to True</param>
    ///<param name="csvout">Filename of CSV to write read data to.  Written to &apos;csv&apos; directory eg: ../web/mycsv.csv</param>
    public void MiscSettime(string ieee, double? endpoint = null, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? readBeforeWrite = null, bool? readAfterWrite = null, string? csvout = null)
    {
        _haContext.CallService("zha_toolkit", "misc_settime", null, new ZhaToolkitMiscSettimeParameters { Ieee = ieee, Endpoint = endpoint, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ReadBeforeWrite = readBeforeWrite, ReadAfterWrite = readAfterWrite, Csvout = csvout });
    }

    ///<summary>Set Time Cluster attributes (Time, DST - except TimeStatus)</summary>
    public Task<JsonElement?> MiscSettimeAsync(ZhaToolkitMiscSettimeParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "misc_settime", null, data);
    }

    ///<summary>Set Time Cluster attributes (Time, DST - except TimeStatus)</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpoint">target endpoint</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="readBeforeWrite">Read attributes before writing them</param>
    ///<param name="readAfterWrite">Read attribute after writing.  Can be used to ensure the values match.  Defaults to True</param>
    ///<param name="csvout">Filename of CSV to write read data to.  Written to &apos;csv&apos; directory eg: ../web/mycsv.csv</param>
    public Task<JsonElement?> MiscSettimeAsync(string ieee, double? endpoint = null, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? readBeforeWrite = null, bool? readAfterWrite = null, string? csvout = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "misc_settime", null, new ZhaToolkitMiscSettimeParameters { Ieee = ieee, Endpoint = endpoint, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ReadBeforeWrite = readBeforeWrite, ReadAfterWrite = readAfterWrite, Csvout = csvout });
    }

    ///<summary>Notify a device that an update is available, after triggering ota image providers to fetch new images.</summary>
    public void OtaNotify(ZhaToolkitOtaNotifyParameters data)
    {
        _haContext.CallService("zha_toolkit", "ota_notify", null, data);
    }

    ///<summary>Notify a device that an update is available, after triggering ota image providers to fetch new images.</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node to execute command eg: entity.name_of_zigbee_device</param>
    ///<param name="download">When True, download FW from KKoenk&apos;s list that possibly matches devices.</param>
    ///<param name="path">Path to write ota image(s) to (defaults to zha:zigpy_config:ota:otau_directory value or /config/zigpy_ota)</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: ota_notify_success</param>
    ///<param name="eventFail">Event name in case of failure eg: ota_notify_fail</param>
    ///<param name="eventDone">Event name when the images were updated and the device notified (either success or failure). eg: ota_notify_done</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public void OtaNotify(string ieee, bool? download = null, string? path = null, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        _haContext.CallService("zha_toolkit", "ota_notify", null, new ZhaToolkitOtaNotifyParameters { Ieee = ieee, Download = download, Path = path, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    ///<summary>Notify a device that an update is available, after triggering ota image providers to fetch new images.</summary>
    public Task<JsonElement?> OtaNotifyAsync(ZhaToolkitOtaNotifyParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "ota_notify", null, data);
    }

    ///<summary>Notify a device that an update is available, after triggering ota image providers to fetch new images.</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node to execute command eg: entity.name_of_zigbee_device</param>
    ///<param name="download">When True, download FW from KKoenk&apos;s list that possibly matches devices.</param>
    ///<param name="path">Path to write ota image(s) to (defaults to zha:zigpy_config:ota:otau_directory value or /config/zigpy_ota)</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: ota_notify_success</param>
    ///<param name="eventFail">Event name in case of failure eg: ota_notify_fail</param>
    ///<param name="eventDone">Event name when the images were updated and the device notified (either success or failure). eg: ota_notify_done</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public Task<JsonElement?> OtaNotifyAsync(string ieee, bool? download = null, string? path = null, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "ota_notify", null, new ZhaToolkitOtaNotifyParameters { Ieee = ieee, Download = download, Path = path, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    ///<summary>Reregister zha-toolkit services Useful during development when they are updated in __init__.py</summary>
    public void RegisterServices(object? data = null)
    {
        _haContext.CallService("zha_toolkit", "register_services", null, data);
    }

    ///<summary>Reregister zha-toolkit services Useful during development when they are updated in __init__.py</summary>
    public Task<JsonElement?> RegisterServicesAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "register_services", null, data);
    }

    ///<summary>Send a rejoin request to the device (=leave with rejoin)</summary>
    public void Rejoin(ZhaToolkitRejoinParameters data)
    {
        _haContext.CallService("zha_toolkit", "rejoin", null, data);
    }

    ///<summary>Send a rejoin request to the device (=leave with rejoin)</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node to request rejoin eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="commandData">Node used to accept the rejoin (Entity name, device name, or IEEE address of the node) eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public void Rejoin(string ieee, string? commandData = null, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        _haContext.CallService("zha_toolkit", "rejoin", null, new ZhaToolkitRejoinParameters { Ieee = ieee, CommandData = commandData, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    ///<summary>Send a rejoin request to the device (=leave with rejoin)</summary>
    public Task<JsonElement?> RejoinAsync(ZhaToolkitRejoinParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "rejoin", null, data);
    }

    ///<summary>Send a rejoin request to the device (=leave with rejoin)</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node to request rejoin eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="commandData">Node used to accept the rejoin (Entity name, device name, or IEEE address of the node) eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public Task<JsonElement?> RejoinAsync(string ieee, string? commandData = null, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "rejoin", null, new ZhaToolkitRejoinParameters { Ieee = ieee, CommandData = commandData, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    ///<summary>Remove all groups from (selected) endpoints on device</summary>
    public void RemoveAllGroups(ZhaToolkitRemoveAllGroupsParameters data)
    {
        _haContext.CallService("zha_toolkit", "remove_all_groups", null, data);
    }

    ///<summary>Remove all groups from (selected) endpoints on device</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpoint">endpoint to remove group from (all endpoints when not set)</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    public void RemoveAllGroups(string ieee, double? endpoint = null, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null)
    {
        _haContext.CallService("zha_toolkit", "remove_all_groups", null, new ZhaToolkitRemoveAllGroupsParameters { Ieee = ieee, Endpoint = endpoint, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException });
    }

    ///<summary>Remove all groups from (selected) endpoints on device</summary>
    public Task<JsonElement?> RemoveAllGroupsAsync(ZhaToolkitRemoveAllGroupsParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "remove_all_groups", null, data);
    }

    ///<summary>Remove all groups from (selected) endpoints on device</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpoint">endpoint to remove group from (all endpoints when not set)</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    public Task<JsonElement?> RemoveAllGroupsAsync(string ieee, double? endpoint = null, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "remove_all_groups", null, new ZhaToolkitRemoveAllGroupsParameters { Ieee = ieee, Endpoint = endpoint, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException });
    }

    ///<summary>Remove device endpoints from group</summary>
    public void RemoveFromGroup(ZhaToolkitRemoveFromGroupParameters data)
    {
        _haContext.CallService("zha_toolkit", "remove_from_group", null, data);
    }

    ///<summary>Remove device endpoints from group</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpoint">endpoint to remove group from (or all EP if not set)</param>
    ///<param name="commandData">Group id to remove eg: 2</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    public void RemoveFromGroup(string ieee, double commandData, double? endpoint = null, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null)
    {
        _haContext.CallService("zha_toolkit", "remove_from_group", null, new ZhaToolkitRemoveFromGroupParameters { Ieee = ieee, Endpoint = endpoint, CommandData = commandData, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException });
    }

    ///<summary>Remove device endpoints from group</summary>
    public Task<JsonElement?> RemoveFromGroupAsync(ZhaToolkitRemoveFromGroupParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "remove_from_group", null, data);
    }

    ///<summary>Remove device endpoints from group</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpoint">endpoint to remove group from (or all EP if not set)</param>
    ///<param name="commandData">Group id to remove eg: 2</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    public Task<JsonElement?> RemoveFromGroupAsync(string ieee, double commandData, double? endpoint = null, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "remove_from_group", null, new ZhaToolkitRemoveFromGroupParameters { Ieee = ieee, Endpoint = endpoint, CommandData = commandData, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException });
    }

    ///<summary>Remove group from endpoint groups list of device.  May be equivalent to `remove_from_group`</summary>
    public void RemoveGroup(ZhaToolkitRemoveGroupParameters data)
    {
        _haContext.CallService("zha_toolkit", "remove_group", null, data);
    }

    ///<summary>Remove group from endpoint groups list of device.  May be equivalent to `remove_from_group`</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpoint">endpoint to remove group from (or all EP if not set)</param>
    ///<param name="commandData">Group id to remove eg: 2</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    public void RemoveGroup(string ieee, double commandData, double? endpoint = null, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null)
    {
        _haContext.CallService("zha_toolkit", "remove_group", null, new ZhaToolkitRemoveGroupParameters { Ieee = ieee, Endpoint = endpoint, CommandData = commandData, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException });
    }

    ///<summary>Remove group from endpoint groups list of device.  May be equivalent to `remove_from_group`</summary>
    public Task<JsonElement?> RemoveGroupAsync(ZhaToolkitRemoveGroupParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "remove_group", null, data);
    }

    ///<summary>Remove group from endpoint groups list of device.  May be equivalent to `remove_from_group`</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpoint">endpoint to remove group from (or all EP if not set)</param>
    ///<param name="commandData">Group id to remove eg: 2</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    public Task<JsonElement?> RemoveGroupAsync(string ieee, double commandData, double? endpoint = null, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "remove_group", null, new ZhaToolkitRemoveGroupParameters { Ieee = ieee, Endpoint = endpoint, CommandData = commandData, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException });
    }

    ///<summary>Scan device (result written to file in /config/scans)</summary>
    public void ScanDevice(ZhaToolkitScanDeviceParameters data)
    {
        _haContext.CallService("zha_toolkit", "scan_device", null, data);
    }

    ///<summary>Scan device (result written to file in /config/scans)</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node to execute command eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpoint">Target endpoint, or list of endpoints eg: 1</param>
    ///<param name="tries">Number of times a zigbee packet is repeated when no response</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public void ScanDevice(string ieee, double? endpoint = null, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        _haContext.CallService("zha_toolkit", "scan_device", null, new ZhaToolkitScanDeviceParameters { Ieee = ieee, Endpoint = endpoint, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    ///<summary>Scan device (result written to file in /config/scans)</summary>
    public Task<JsonElement?> ScanDeviceAsync(ZhaToolkitScanDeviceParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "scan_device", null, data);
    }

    ///<summary>Scan device (result written to file in /config/scans)</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node to execute command eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpoint">Target endpoint, or list of endpoints eg: 1</param>
    ///<param name="tries">Number of times a zigbee packet is repeated when no response</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public Task<JsonElement?> ScanDeviceAsync(string ieee, double? endpoint = null, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "scan_device", null, new ZhaToolkitScanDeviceParameters { Ieee = ieee, Endpoint = endpoint, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    ///<summary>Do Tuya magic spell (= make most Tuya devices work normally)</summary>
    public void TuyaMagic(ZhaToolkitTuyaMagicParameters data)
    {
        _haContext.CallService("zha_toolkit", "tuya_magic", null, data);
    }

    ///<summary>Do Tuya magic spell (= make most Tuya devices work normally)</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node to execute command eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public void TuyaMagic(string ieee, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        _haContext.CallService("zha_toolkit", "tuya_magic", null, new ZhaToolkitTuyaMagicParameters { Ieee = ieee, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    ///<summary>Do Tuya magic spell (= make most Tuya devices work normally)</summary>
    public Task<JsonElement?> TuyaMagicAsync(ZhaToolkitTuyaMagicParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "tuya_magic", null, data);
    }

    ///<summary>Do Tuya magic spell (= make most Tuya devices work normally)</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node to execute command eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public Task<JsonElement?> TuyaMagicAsync(string ieee, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "tuya_magic", null, new ZhaToolkitTuyaMagicParameters { Ieee = ieee, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    ///<summary>Remove (Unbind) all bindings from device to the coordinator (your HA Instance)</summary>
    public void UnbindCoordinator(ZhaToolkitUnbindCoordinatorParameters data)
    {
        _haContext.CallService("zha_toolkit", "unbind_coordinator", null, data);
    }

    ///<summary>Remove (Unbind) all bindings from device to the coordinator (your HA Instance)</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node to execute command eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpoint">When provided, remove only bindings for this endpoint or list of endpoints (single value or list. Example: 20 or [20, 30]) Otherwise: removes bindings for all endpoints</param>
    ///<param name="cluster">When provided, remove only bindings for this cluster or list of clusters (single value or list. Example: 0x0200 or [0x200, 0x300]) Otherwise: removes bindings for all clusters</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public void UnbindCoordinator(string ieee, double? endpoint = null, double? cluster = null, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        _haContext.CallService("zha_toolkit", "unbind_coordinator", null, new ZhaToolkitUnbindCoordinatorParameters { Ieee = ieee, Endpoint = endpoint, Cluster = cluster, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    ///<summary>Remove (Unbind) all bindings from device to the coordinator (your HA Instance)</summary>
    public Task<JsonElement?> UnbindCoordinatorAsync(ZhaToolkitUnbindCoordinatorParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "unbind_coordinator", null, data);
    }

    ///<summary>Remove (Unbind) all bindings from device to the coordinator (your HA Instance)</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node to execute command eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpoint">When provided, remove only bindings for this endpoint or list of endpoints (single value or list. Example: 20 or [20, 30]) Otherwise: removes bindings for all endpoints</param>
    ///<param name="cluster">When provided, remove only bindings for this cluster or list of clusters (single value or list. Example: 0x0200 or [0x200, 0x300]) Otherwise: removes bindings for all clusters</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public Task<JsonElement?> UnbindCoordinatorAsync(string ieee, double? endpoint = null, double? cluster = null, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "unbind_coordinator", null, new ZhaToolkitUnbindCoordinatorParameters { Ieee = ieee, Endpoint = endpoint, Cluster = cluster, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    public void UnbindGroup(object? data = null)
    {
        _haContext.CallService("zha_toolkit", "unbind_group", null, data);
    }

    public Task<JsonElement?> UnbindGroupAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "unbind_group", null, data);
    }

    ///<summary>Send cluster command</summary>
    public void ZclCmd(ZhaToolkitZclCmdParameters data)
    {
        _haContext.CallService("zha_toolkit", "zcl_cmd", null, data);
    }

    ///<summary>Send cluster command</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node to send\ command to eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="manf">Manufacturer id (0 = No manufacturer id, empty=possibly automatic)</param>
    ///<param name="endpoint">target endpoint</param>
    ///<param name="cluster">target cluster</param>
    ///<param name="cmd">Command Id to execute</param>
    ///<param name="args">Arguments for command when needed (as per zigpy&apos;s definition corresponding to Zigbee Library Cluster (ZCL) specification) eg: [1,&quot;abcd&quot;,3]</param>
    ///<param name="kwargs">Keyword arguments for command eg: {&quot;code&quot;:&quot;cool_code&quot;}</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public void ZclCmd(string ieee, double cluster, double cmd, double? manf = null, double? endpoint = null, string? args = null, string? kwargs = null, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        _haContext.CallService("zha_toolkit", "zcl_cmd", null, new ZhaToolkitZclCmdParameters { Ieee = ieee, Manf = manf, Endpoint = endpoint, Cluster = cluster, Cmd = cmd, Args = args, Kwargs = kwargs, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    ///<summary>Send cluster command</summary>
    public Task<JsonElement?> ZclCmdAsync(ZhaToolkitZclCmdParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "zcl_cmd", null, data);
    }

    ///<summary>Send cluster command</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node to send\ command to eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="manf">Manufacturer id (0 = No manufacturer id, empty=possibly automatic)</param>
    ///<param name="endpoint">target endpoint</param>
    ///<param name="cluster">target cluster</param>
    ///<param name="cmd">Command Id to execute</param>
    ///<param name="args">Arguments for command when needed (as per zigpy&apos;s definition corresponding to Zigbee Library Cluster (ZCL) specification) eg: [1,&quot;abcd&quot;,3]</param>
    ///<param name="kwargs">Keyword arguments for command eg: {&quot;code&quot;:&quot;cool_code&quot;}</param>
    ///<param name="tries">Number of times the zigbee packet should be attempted</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public Task<JsonElement?> ZclCmdAsync(string ieee, double cluster, double cmd, double? manf = null, double? endpoint = null, string? args = null, string? kwargs = null, double? tries = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "zcl_cmd", null, new ZhaToolkitZclCmdParameters { Ieee = ieee, Manf = manf, Endpoint = endpoint, Cluster = cluster, Cmd = cmd, Args = args, Kwargs = kwargs, Tries = tries, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    public void ZdoFloodParentAnnce(object? data = null)
    {
        _haContext.CallService("zha_toolkit", "zdo_flood_parent_annce", null, data);
    }

    public Task<JsonElement?> ZdoFloodParentAnnceAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "zdo_flood_parent_annce", null, data);
    }

    ///<summary>Allow a device to join with a code (bellows radio type only)</summary>
    public void ZdoJoinWithCode(ZhaToolkitZdoJoinWithCodeParameters data)
    {
        _haContext.CallService("zha_toolkit", "zdo_join_with_code", null, data);
    }

    ///<summary>Allow a device to join with a code (bellows radio type only)</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node to request rejoin eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="commandData">Node used to accept the rejoin (Entity name, device name, or IEEE address of the node) eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="code">The code the device needs to present eg: 01234567</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public void ZdoJoinWithCode(string ieee, string code, string? commandData = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        _haContext.CallService("zha_toolkit", "zdo_join_with_code", null, new ZhaToolkitZdoJoinWithCodeParameters { Ieee = ieee, CommandData = commandData, Code = code, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    ///<summary>Allow a device to join with a code (bellows radio type only)</summary>
    public Task<JsonElement?> ZdoJoinWithCodeAsync(ZhaToolkitZdoJoinWithCodeParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "zdo_join_with_code", null, data);
    }

    ///<summary>Allow a device to join with a code (bellows radio type only)</summary>
    ///<param name="ieee">Entity name, device name, or IEEE address of the node to request rejoin eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="commandData">Node used to accept the rejoin (Entity name, device name, or IEEE address of the node) eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="code">The code the device needs to present eg: 01234567</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public Task<JsonElement?> ZdoJoinWithCodeAsync(string ieee, string code, string? commandData = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "zdo_join_with_code", null, new ZhaToolkitZdoJoinWithCodeParameters { Ieee = ieee, CommandData = commandData, Code = code, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    public void ZdoScanNow(object? data = null)
    {
        _haContext.CallService("zha_toolkit", "zdo_scan_now", null, data);
    }

    public Task<JsonElement?> ZdoScanNowAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "zdo_scan_now", null, data);
    }

    public void ZdoUpdateNwkId(object? data = null)
    {
        _haContext.CallService("zha_toolkit", "zdo_update_nwk_id", null, data);
    }

    public Task<JsonElement?> ZdoUpdateNwkIdAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "zdo_update_nwk_id", null, data);
    }

    ///<summary>Export device information (Response, CSV File, Event)</summary>
    public void ZhaDevices(ZhaToolkitZhaDevicesParameters data)
    {
        _haContext.CallService("zha_toolkit", "zha_devices", null, data);
    }

    ///<summary>Export device information (Response, CSV File, Event)</summary>
    ///<param name="ieee">Optional Entity name, device name, or IEEE address of the device to provide details for.  Defaults to all devices eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="commandData">Selected Fields eg: [&quot;ieee&quot;,&quot;lqi&quot;,&quot;name&quot;]</param>
    ///<param name="csvout">Filename of CSV to write read data to.  Written to &apos;csv&apos; directory (can be relative as in example). eg: ../web/mycsv.csv</param>
    ///<param name="csvlabel">Column to sort table by eg: lqi</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    public void ZhaDevices(string? ieee = null, string? commandData = null, string? csvout = null, object? csvlabel = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null)
    {
        _haContext.CallService("zha_toolkit", "zha_devices", null, new ZhaToolkitZhaDevicesParameters { Ieee = ieee, CommandData = commandData, Csvout = csvout, Csvlabel = csvlabel, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException });
    }

    ///<summary>Export device information (Response, CSV File, Event)</summary>
    public Task<JsonElement?> ZhaDevicesAsync(ZhaToolkitZhaDevicesParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "zha_devices", null, data);
    }

    ///<summary>Export device information (Response, CSV File, Event)</summary>
    ///<param name="ieee">Optional Entity name, device name, or IEEE address of the device to provide details for.  Defaults to all devices eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="commandData">Selected Fields eg: [&quot;ieee&quot;,&quot;lqi&quot;,&quot;name&quot;]</param>
    ///<param name="csvout">Filename of CSV to write read data to.  Written to &apos;csv&apos; directory (can be relative as in example). eg: ../web/mycsv.csv</param>
    ///<param name="csvlabel">Column to sort table by eg: lqi</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    public Task<JsonElement?> ZhaDevicesAsync(string? ieee = null, string? commandData = null, string? csvout = null, object? csvlabel = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "zha_devices", null, new ZhaToolkitZhaDevicesParameters { Ieee = ieee, CommandData = commandData, Csvout = csvout, Csvlabel = csvlabel, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException });
    }

    ///<summary>Backup coordinator data (znp, bellows/ezsp)</summary>
    public void ZnpBackup(ZhaToolkitZnpBackupParameters data)
    {
        _haContext.CallService("zha_toolkit", "znp_backup", null, data);
    }

    ///<summary>Backup coordinator data (znp, bellows/ezsp)</summary>
    ///<param name="commandData">Suffix for backup file eg: _bathroom_added</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public void ZnpBackup(string? commandData = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        _haContext.CallService("zha_toolkit", "znp_backup", null, new ZhaToolkitZnpBackupParameters { CommandData = commandData, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    ///<summary>Backup coordinator data (znp, bellows/ezsp)</summary>
    public Task<JsonElement?> ZnpBackupAsync(ZhaToolkitZnpBackupParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "znp_backup", null, data);
    }

    ///<summary>Backup coordinator data (znp, bellows/ezsp)</summary>
    ///<param name="commandData">Suffix for backup file eg: _bathroom_added</param>
    ///<param name="eventSuccess">Event name in case of success eg: my_read_success_trigger_event</param>
    ///<param name="eventFail">Event name in case of failure eg: my_read_fail_trigger_event</param>
    ///<param name="eventDone">Event name when the service call did all its work (either success or failure).  Has event data with relevant attributes. eg: my_read_done_trigger_event</param>
    ///<param name="failException">Throw exception when success==False, useful to stop scripts, automations</param>
    ///<param name="expectReply">Wait for/expect a reply (not used yet)</param>
    public Task<JsonElement?> ZnpBackupAsync(string? commandData = null, string? eventSuccess = null, string? eventFail = null, string? eventDone = null, bool? failException = null, bool? expectReply = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "znp_backup", null, new ZhaToolkitZnpBackupParameters { CommandData = commandData, EventSuccess = eventSuccess, EventFail = eventFail, EventDone = eventDone, FailException = failException, ExpectReply = expectReply });
    }

    public void ZnpNvramBackup(object? data = null)
    {
        _haContext.CallService("zha_toolkit", "znp_nvram_backup", null, data);
    }

    public Task<JsonElement?> ZnpNvramBackupAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "znp_nvram_backup", null, data);
    }

    public void ZnpNvramReset(object? data = null)
    {
        _haContext.CallService("zha_toolkit", "znp_nvram_reset", null, data);
    }

    public Task<JsonElement?> ZnpNvramResetAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "znp_nvram_reset", null, data);
    }

    public void ZnpNvramRestore(object? data = null)
    {
        _haContext.CallService("zha_toolkit", "znp_nvram_restore", null, data);
    }

    public Task<JsonElement?> ZnpNvramRestoreAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "znp_nvram_restore", null, data);
    }

    public void ZnpRestore(object? data = null)
    {
        _haContext.CallService("zha_toolkit", "znp_restore", null, data);
    }

    public Task<JsonElement?> ZnpRestoreAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("zha_toolkit", "znp_restore", null, data);
    }
}